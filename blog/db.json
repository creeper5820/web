{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/beian.png","path":"assets/beian.png","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/css/dark.css","path":"css/dark.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/dark.css.map","path":"css/dark.css.map","modified":1,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/mobile.css.map","path":"css/mobile.css.map","modified":1,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/style.css.map","path":"css/style.css.map","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/customFontLoader.js","path":"scripts/customFontLoader.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/customFontLoader.js.map","path":"scripts/customFontLoader.js.map","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/dark.js","path":"scripts/dark.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/dark.js.map","path":"scripts/dark.js.map","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js.LICENSE.txt","path":"scripts/main.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js.map","path":"scripts/main.js.map","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js.LICENSE.txt","path":"scripts/search.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js.map","path":"scripts/search.js.map","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/share.js.map","path":"scripts/share.js.map","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/about-ubuntu-server-network.md","hash":"18201cec5589acbfc7b0053cf1a7b7a22c122136","modified":1716913573248},{"_id":"source/_posts/can-tutorial.md","hash":"a36ac82c585205f3be734b5de62fab6ebf3fdd5c","modified":1716913573248},{"_id":"source/_posts/debug-ros2-with-foxglove.md","hash":"ee0e577ed6c658356e9edff3852dc984f8c3a31d","modified":1716913600938},{"_id":"source/_posts/develop-prepare.md","hash":"9cdee1b39b45189b6dc56dd8da3d6a2313215d4e","modified":1717872668810},{"_id":"source/_posts/server-based-on-frp-and-nginx.md","hash":"0c9d0d8ca4646643593c7718d3cbd9771b8960a8","modified":1716913573248},{"_id":"source/_posts/ubuntu-installation.md","hash":"cab710b5c74319206706aca63d0c00bcc56c3f00","modified":1717873094404},{"_id":"source/about/index.md","hash":"62cf53963aba8a75598b7fdbd235ec3c9e9ede85","modified":1716913573248},{"_id":"source/can-tutorial/index.md","hash":"48eb1b3fe846dd41c45990080cb4eaf4b3305601","modified":1716913573248},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716913573250},{"_id":"themes/archer/.babelrc","hash":"078678843ebb6992f0cc44304faa6f1cb082bd4a","modified":1716913573248},{"_id":"themes/archer/.editorconfig","hash":"3a7f38d9586f73ed1c46cfbc9839b3465ec57d7c","modified":1716913573248},{"_id":"themes/archer/.eslintignore","hash":"304e696987e3f31cd0a7a13a835d58d8bda3aa6c","modified":1716913573248},{"_id":"themes/archer/.eslintrc.json","hash":"352a07b94efa124a5658b502bf973683be09fd00","modified":1716913573248},{"_id":"themes/archer/.prettierignore","hash":"29648a30c14f6df709eb6610f506c82825910cc8","modified":1716913573248},{"_id":"themes/archer/.prettierrc.js","hash":"bae1d8dab7bf8b68207386f366e092778940540c","modified":1716913573248},{"_id":"themes/archer/CHANGELOG.md","hash":"6fbf3e5e8ed6ae6fb68fd74bfd2b53d99db4b1fd","modified":1716913573248},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1716913573248},{"_id":"themes/archer/README.md","hash":"63eb0f874bc056d407ee343f853adee9a5765434","modified":1716913573248},{"_id":"themes/archer/gulpfile.js","hash":"ee1ad57aa5113a084091fd86fca2c34e1b9e4b95","modified":1716913573249},{"_id":"themes/archer/_config.yml","hash":"9e81d05cea1cb9e00a20cc669162d2bf04853bb1","modified":1716913573248},{"_id":"themes/archer/package.json","hash":"81af75826e854ac80f6337dc4f1ce4b51f066b0b","modified":1716913573252},{"_id":"themes/archer/webpack.config.js","hash":"e090744d8e7a0d0906d1d6b8192eb906092d1e9b","modified":1716913573286},{"_id":"themes/archer/webpack.dev.js","hash":"7c740341894bd584f72145512a58703bb134ea60","modified":1716913573286},{"_id":"themes/archer/webpack.prod.js","hash":"a34abc06d6cd8fa4e267069468726322a3656e2b","modified":1716913573286},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1716913573249},{"_id":"themes/archer/docs/README-en.md","hash":"f5e40c5803071bd6dafc94070c6939aa0c02d061","modified":1716913573249},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"c62510d3d14b38126b5a86ff30416cb71abc1d9a","modified":1716913573249},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"451b304c1a5d081313f0532a4f5665f0855d4cfd","modified":1716913573249},{"_id":"themes/archer/languages/default.yml","hash":"e937791c5080868c3abe20bab4cf266a342b5922","modified":1716913573250},{"_id":"themes/archer/languages/en.yml","hash":"5a1a85fed95dab4f01671714ee8cc5420936c05f","modified":1716913573250},{"_id":"themes/archer/layout/404.ejs","hash":"9137c0b1153ca8cd32e60a38fd79b7e4b91c8bf4","modified":1716913573250},{"_id":"themes/archer/layout/about.ejs","hash":"748786bebad03b1ef79c551f26522fa2bee1b9dd","modified":1716913573251},{"_id":"themes/archer/layout/index.ejs","hash":"093f8dbe875cad94b9618f181d1b5621d8874b19","modified":1716913573251},{"_id":"themes/archer/layout/layout.ejs","hash":"1bee90a75c1f4b04c90421419dd68acdec15b998","modified":1716913573251},{"_id":"themes/archer/layout/post.ejs","hash":"d421aba0ab93e2b7a22d060da4c56441bf97cdb9","modified":1716913573251},{"_id":"themes/archer/layout/site-meta.ejs","hash":"562e446a742fde07e0880343d5693bf8cb0dec23","modified":1716913573251},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"c7bf50dd6e60fd8e8dfbeab9960172359af7307e","modified":1716913573250},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"18365516cd8819de853716f0d47a72a60a5edc46","modified":1716913573250},{"_id":"themes/archer/layout/_partial/base-footer-fixed.ejs","hash":"e4dbde6594c0c2d1c5de71ddf968be0879ceddb7","modified":1716913573250},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"d8f4236166d058421c2e4ff00660be75a3494704","modified":1716913573250},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"687c08823e7ce43e6ebb44f2fb4b75549abfed29","modified":1716913573250},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"57d1ae0fd6f9f1ab52a64c44a8ae17ee71de22ef","modified":1716913573250},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"d046322674052b0667775dca0886f14e0d812897","modified":1716913573250},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"f63032391dd75905b6663628a9ca231fa0283350","modified":1716913573250},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"0190f06c2f0345cec00eba2074bbfd1b56a7fdc9","modified":1716913573250},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"1d5a95782ffc382fdb6b1239b3b97db125984fa0","modified":1716913573250},{"_id":"themes/archer/layout/_partial/custom-font.ejs","hash":"bc6bfda53f8856e1473263a44fd861e96cc00719","modified":1716913573250},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"7b8b078b1c1e5b216e46b32a0cab67330c92c734","modified":1716913573250},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1716913573252},{"_id":"themes/archer/source/assets/beian.png","hash":"a99df13e8eb11db86edebf6e5ac246eb59f4b3c4","modified":1716913573252},{"_id":"themes/archer/source/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1716913573252},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1716913573252},{"_id":"themes/archer/source/css/dark.css","hash":"4db211216f16a5e66d4d499158f4005a1bbb39f5","modified":1716913573259},{"_id":"themes/archer/source/css/dark.css.map","hash":"f49556935deae49df3158c2eb2265464129ef978","modified":1716913573259},{"_id":"themes/archer/source/css/mobile.css","hash":"acb0dfcce26ec93f59c6ec4936006abbe8daefee","modified":1716913573259},{"_id":"themes/archer/source/css/mobile.css.map","hash":"c9f9dade45b119ae2eb7a93be0160baef4d494f8","modified":1716913573259},{"_id":"themes/archer/source/css/style.css","hash":"f08b1ec3a5fe1bf936401a238d55e0487296b42c","modified":1716913573259},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1716913573260},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1716913573260},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"4c69aeb4e4f355912503d1c460e8e7aa6ea6963e","modified":1716913573270},{"_id":"themes/archer/source/scripts/customFontLoader.js","hash":"7c2f03fbd2b8340b77b1b02778a34e5ac10b560c","modified":1716913573270},{"_id":"themes/archer/source/scripts/dark.js","hash":"28ba818b2ab8a9454a52fe2710b5a8a81a195e4d","modified":1716913573270},{"_id":"themes/archer/source/scripts/customFontLoader.js.map","hash":"702a44b0b1b450263592bfb1199c8d36ea9834a2","modified":1716913573270},{"_id":"themes/archer/source/scripts/dark.js.map","hash":"feb9e1905c4b313b839c1c3b69ad61c05f265a9a","modified":1716913573270},{"_id":"themes/archer/source/scripts/main.js.LICENSE.txt","hash":"959bfc660011bc6a0800fe9e7974080f64c062aa","modified":1716913573274},{"_id":"themes/archer/source/scripts/search.js.LICENSE.txt","hash":"2c9b607ded909550f2ed2d0f2e7271781d9f78d9","modified":1716913573280},{"_id":"themes/archer/source/scripts/share.js","hash":"2210dd8dacea4f1ca11c0047dfafd0a170abd953","modified":1716913573283},{"_id":"themes/archer/src/js/browser.js","hash":"c56e0094a04d6f20564f8f0da1496cb7631d4dc2","modified":1716913573284},{"_id":"themes/archer/src/js/customFontLoader.js","hash":"98bb3a1c0f69bc2675bfa6579df2dde38ba6fded","modified":1716913573284},{"_id":"themes/archer/src/js/dark.js","hash":"2cd243df8593b18a1a293f483d2db18503c53547","modified":1716913573284},{"_id":"themes/archer/src/js/fancybox.js","hash":"6dfc8015d6000c76806424876f5472f39e5485af","modified":1716913573284},{"_id":"themes/archer/src/js/fontawsome.js","hash":"43e852899ee1bc22495253428a2ff3bdedf89882","modified":1716913573284},{"_id":"themes/archer/src/js/init.js","hash":"dee0a1c959bd4dc3953428b1b2137f42bc659b32","modified":1716913573284},{"_id":"themes/archer/src/js/initSidebar.js","hash":"c9c030a451ed394934c1858c7d55ec5a7b588305","modified":1716913573284},{"_id":"themes/archer/src/js/main.js","hash":"658565fbf20adc5b9b237a53c973d0685ce60202","modified":1716913573284},{"_id":"themes/archer/src/js/mobile.js","hash":"4ae6837e18b729f85b5097867fc742ba2d1edf25","modified":1716913573284},{"_id":"themes/archer/src/js/scroll.js","hash":"3017b329329888b287ad233831138428475749be","modified":1716913573284},{"_id":"themes/archer/src/js/search.js","hash":"0bf92b51fef092989f4fe16fb7ef7724d11e9f58","modified":1716913573284},{"_id":"themes/archer/src/js/share.js","hash":"c2e6a3d8d6883cde0c67484daca5e742ebb8e0d1","modified":1716913573284},{"_id":"themes/archer/src/js/sidebar.js","hash":"2518f2b0b7947530851e6c73245dddc96a618a08","modified":1716913573284},{"_id":"themes/archer/src/js/tag.js","hash":"395db7eb2d09e2df6eefcf3f4c7da5cd809a6221","modified":1716913573285},{"_id":"themes/archer/src/js/toc.js","hash":"96a7e07d1976eb29a77799ac2b7abb47907f4b45","modified":1716913573285},{"_id":"themes/archer/src/js/util.js","hash":"e49b30f6ba82d5183d005fc0192d2d673969586b","modified":1716913573285},{"_id":"themes/archer/src/scss/_common.scss","hash":"e80acb4f0049d24260f0a32a301f985ae7e166b8","modified":1716913573285},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"78da2632e7150baa0fd1f6d04fc59ca5e304903d","modified":1716913573285},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1716913573285},{"_id":"themes/archer/src/scss/_variables.scss","hash":"01e5cab2b5fc686c52145d65229f17db13a3cc54","modified":1716913573286},{"_id":"themes/archer/src/scss/dark.scss","hash":"739af46f0ef8c0c89c3e78ec577e844678f737b5","modified":1716913573286},{"_id":"themes/archer/src/scss/mobile.scss","hash":"2b542af943a8502aae26362dd2af1fbcf68eac1c","modified":1716913573286},{"_id":"themes/archer/src/scss/style.scss","hash":"b10b9a44efaa293b7ac220e66c963dca04ad4bc7","modified":1716913573286},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"cc02b3cf9586135d2d7f822c7ad97d81fdf6d4e5","modified":1716913573250},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"0f0612ce9ca5c3dc349153a87fdc9dba5f93c52c","modified":1716913573250},{"_id":"themes/archer/layout/_partial/comment/gitalk.ejs","hash":"840279fd3e21dc1cdb1932fe4d9a3be5f670e764","modified":1716913573250},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"eda79ada5171ed44e4f3ae4d8a345ad2c7adb2df","modified":1716913573250},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"d65d9372fca4b316b94ae511f8ccfb0b92d7b065","modified":1716913573250},{"_id":"themes/archer/layout/_partial/comment/utteranc.ejs","hash":"f4ec58c74e6870b8c22032ad3a3c1ee33e5ec41d","modified":1716913573250},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"24cd7b9e28ceb4b2083ddccce26517de64b35119","modified":1716913573250},{"_id":"themes/archer/layout/_partial/comment/waline.ejs","hash":"c2208d6f05490bbf1b35cdf1519a39933212c33e","modified":1716913573250},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"2f4ef49a74a8d63310af60ecda6d765b8c386ff4","modified":1716913573250},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"e67a7a2f6bcbfd97e95577446872e217e0c48e80","modified":1716913573250},{"_id":"themes/archer/layout/_partial/math/mathjax.ejs","hash":"84c40a07765e95213045e9b9f7a8c9aaa9c69161","modified":1716913573250},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"0473335774025d185dcbaf641496b25a8f33f7af","modified":1716913573251},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"bdf08beebbe454da9d4c55b35efd317d5f222be5","modified":1716913573251},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"6360da867c23b8daa5e34e62c5c5552e2974e360","modified":1716913573251},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"02f407d9f9968d228a6a47f2a283b8cf41836a1a","modified":1716913573251},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"469455994771da166ddecb4839efa9ef28f2775d","modified":1716913573251},{"_id":"themes/archer/src/scss/_dark/_common-dark.scss","hash":"fc03470312c57a39bc131a1e86cdd3ea2ddb164a","modified":1716913573285},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"9e5cb20871e5bf1af4cf50694a73bd7c9fe64685","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"fd7716d8559a9f58f7caef576c553ca7ba1a85e1","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"91dc2a0c1ca8d25b1f27d91fa1c81ceb5ff8c3bc","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7583c8c2004e333c5b94e4b868ac778357e0d21e","modified":1716913573286},{"_id":"themes/archer/src/scss/_dark/_partial/_algolia-dark.scss","hash":"e9ea52ca5410c6a6eb53d2a6de1419d3db97d8ca","modified":1716913573285},{"_id":"themes/archer/src/scss/_dark/_partial/_index-page-dark.scss","hash":"4c1406e82b2d4503e027443f64f0984fe0942e1d","modified":1716913573285},{"_id":"themes/archer/src/scss/_dark/_partial/_post-page-dark.scss","hash":"d61059785c72c626990f5b473dc3570cb52c0d73","modified":1716913573285},{"_id":"themes/archer/src/scss/_mobile/_partial/_index-page-mobile.scss","hash":"2d166bb6f234b8773a9ea12457b10e94902a32f1","modified":1716913573285},{"_id":"themes/archer/src/scss/_partial/_comment/_gitalk.scss","hash":"341bb251987f30221936e36b44374b2b5ce0d218","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_partial/_footer-fixed.scss","hash":"1eb918f6c16054ef2b53b9eea60c751ad89bbd55","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"4aafefa6834c8a8583c1cdace620a31306676a57","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"ce683553806293fea0466f363b18de0ee341dd4e","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"4567b9081f063e5fb388b0671f3bc322bdc9acfa","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"4771add895f8a47917ae2d0d34b92cb327329bf1","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"424c08f4acc3f643567f138ffea7d8337791d2c4","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"504f9fdb723c7b287d958211189d25919ac592f6","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_post/_writing-enhance.scss","hash":"4cb495c64d144b2bcf225f2b87641017bd652e66","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"a7374f46ca31bf8ebf5bafea909100921d0c52a4","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"93cc82cb56663e83e90fbd6fe31ffdd38e694f3b","modified":1716913573286},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"b2870a9cdaea9b9c8426d406d6859a8f3f1a995f","modified":1716913573286},{"_id":"themes/archer/src/scss/_dark/_partial/_comment/_gitalk-dark.scss","hash":"57accaee4bb5b502d5d3e94c7981ac6996804cf0","modified":1716913573285},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_footer-dark.scss","hash":"d074a8fef75ba626dd3448cc42290a8c722fd182","modified":1716913573285},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_footer-fixed-dark.scss","hash":"f4e3eb7aa19c1061b5d9df4f6a7745902e5843f2","modified":1716913573285},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_header-dark.scss","hash":"ed815d959a37cccdf9137ace91c68bea8ca922c2","modified":1716913573285},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_profile-dark.scss","hash":"c0fe68f6e9c196157adc71fea0d97f6f70f0a31b","modified":1716913573285},{"_id":"themes/archer/src/scss/_dark/_partial/_post/_code-dark.scss","hash":"9ded8203699f816558fd1493a3ce7cf3d38818e9","modified":1716913573285},{"_id":"themes/archer/src/scss/_dark/_partial/_sidebar/_sidebar-archive-dark.scss","hash":"79b7548214339807ff713f0c7454a227d24d6d0d","modified":1716913573285},{"_id":"themes/archer/src/scss/_dark/_partial/_sidebar/_sidebar-dark.scss","hash":"8e77738f83a425eebb00513ee98e487fe71fdc22","modified":1716913573285},{"_id":"themes/archer/src/scss/_dark/_partial/_sidebar/_sidebar-tags-dark.scss","hash":"6621db2ff1182e3cd14286af4b8f3d8c5bd14e2a","modified":1716913573285},{"_id":"themes/archer/src/scss/_mobile/_partial/_post/_writing-enhance-mobile.scss","hash":"9e714c1cdc61a4ebd5510667e87e879d0b14de67","modified":1716913573285},{"_id":"themes/archer/src/scss/_mobile/_partial/_sidebar/_sidebar-tags-mobile.scss","hash":"b5c62234defe693b4cfa65bda188d71c937eeaf9","modified":1716913573285},{"_id":"themes/archer/source/css/style.css.map","hash":"dbe8f8c1fccf8bd9d28ecf3874036a2281319aa0","modified":1716913573259},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1716913573260},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1716913573260},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1716913573260},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1716913573261},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1716913573270},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1716913573269},{"_id":"themes/archer/source/scripts/share.js.map","hash":"1e018aa465800a066480e33c848f380880af6743","modified":1716913573284},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1716913573262},{"_id":"themes/archer/source/scripts/search.js","hash":"ac8e9d130ea410832a421d661898abee63bd8e67","modified":1716913573280},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1716913573249},{"_id":"themes/archer/package-lock.json","hash":"400ab1cc2a2f1380a5e9ab69abe3a5b93f923d8d","modified":1716913573252},{"_id":"themes/archer/source/scripts/search.js.map","hash":"bd469588b3bee82b3cf72b72d447c854f4d76875","modified":1716913573283},{"_id":"themes/archer/source/scripts/main.js","hash":"11fd75dddcbef7157fbfb8717b3463a80fda1fb3","modified":1716913573274},{"_id":"themes/archer/source/scripts/main.js.map","hash":"79d928070b7e5333ca241c5563ab4fe9cab31b74","modified":1716913573279},{"_id":"public/content.json","hash":"f8a0b11057ec5d6597bbfbbc6dcfcf73a151a422","modified":1717873105267},{"_id":"public/about/index.html","hash":"6e46d32124b528bb0a817219fa6f487c6f04400d","modified":1717873105267},{"_id":"public/can-tutorial/index.html","hash":"289541dd22e923f1093298ffba8c8efdebf93235","modified":1717873105267},{"_id":"public/2024/06/08/develop-prepare/index.html","hash":"b6af1cfd369d61f126541d5b9619aaa680b002e1","modified":1717873105267},{"_id":"public/2024/06/08/ubuntu-installation/index.html","hash":"0c9f155f25c4e20ca88ce9f8d7ec1a2260661b8e","modified":1717873105267},{"_id":"public/2024/05/13/debug-ros2-with-foxglove/index.html","hash":"72395cc5373fc225630b460ec1b882f0245a04c2","modified":1717873105267},{"_id":"public/2024/05/13/server-based-on-frp-and-nginx/index.html","hash":"3fa4ef7d2bcada309b32cc7ee1168884fb5beb71","modified":1717873105267},{"_id":"public/2024/05/13/about-ubuntu-server-network/index.html","hash":"229079e7955a3b0d27dc8f905025be15588c7669","modified":1717873105267},{"_id":"public/2024/05/12/can-tutorial/index.html","hash":"db3e0a8c9eedcab9b5cccd4b9307614e58e78bc3","modified":1717873105267},{"_id":"public/archives/index.html","hash":"4a2446c02905cd003bd61cf8d300345f9b6a3b40","modified":1717873105267},{"_id":"public/archives/2024/index.html","hash":"a481647f203b585793feaa247baba37a581768b3","modified":1717873105267},{"_id":"public/archives/2024/05/index.html","hash":"c1e7002db1669903fa0bbe9adfdf81a66e31ee7e","modified":1717873105267},{"_id":"public/archives/2024/06/index.html","hash":"a5f2b8eca5d70c85e452b1ababa2e7f219052a9b","modified":1717873105267},{"_id":"public/categories/ubuntu/index.html","hash":"c4ee53d31adc2f5e97cfc6177ba8c7dcff899d70","modified":1717873105267},{"_id":"public/categories/ros2/index.html","hash":"518e1b816fc4f2c91c92c9d43c99716646a7bc61","modified":1717873105267},{"_id":"public/categories/web/index.html","hash":"15fa549dbc6ebc8dcc234cd238c5ec89e6a9347a","modified":1717873105267},{"_id":"public/categories/embedded/index.html","hash":"277da6f9af30cb5993bc648018dc877837c7a73c","modified":1717873105267},{"_id":"public/index.html","hash":"9d16b77f2285330b69cca34490353b9d68cc9dba","modified":1717873105267},{"_id":"public/tags/ubuntu/index.html","hash":"a67a9c35dd8b468a7f7abdb41cdb8dbb3e4921ea","modified":1717873105267},{"_id":"public/tags/server/index.html","hash":"4cbede01ed5f75a5367d9a286a38dbc1fecbf045","modified":1717873105267},{"_id":"public/tags/netplan/index.html","hash":"88641e37dafe2ebc1fba850d77f21c3bbe2602a7","modified":1717873105267},{"_id":"public/tags/ros2/index.html","hash":"cd15d2343da0e7c6ad13802d8c82026027022ee2","modified":1717873105267},{"_id":"public/tags/foxglove/index.html","hash":"460b6aefbc4b2d1d2a6443c5bf0ceede93c610eb","modified":1717873105267},{"_id":"public/tags/c-cpp/index.html","hash":"981434938c15cbaef06e2457b9090b1924e2cea2","modified":1717873105267},{"_id":"public/tags/nginx/index.html","hash":"39364dcadbea6d8d5b6696aa3fdb9ee1396eb4e0","modified":1717873105267},{"_id":"public/tags/frp/index.html","hash":"f8ad0fb0a00f98b8fd72c1aefad9411d19f34658","modified":1717873105267},{"_id":"public/tags/web/index.html","hash":"b1bd2114f08ec0f1b566411b1d0fb5e3c9389ba9","modified":1717873105267},{"_id":"public/tags/embedded/index.html","hash":"8b0b6ad2ee7b2c7d01d20fb33367c78507608ae0","modified":1717873105267},{"_id":"public/tags/can/index.html","hash":"6cd8cf6a9b767534204d1a9c4cfb4262b6e14bc4","modified":1717873105267},{"_id":"public/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1717873105267},{"_id":"public/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1717873105267},{"_id":"public/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1717873105267},{"_id":"public/assets/beian.png","hash":"a99df13e8eb11db86edebf6e5ac246eb59f4b3c4","modified":1717873105267},{"_id":"public/css/dark.css.map","hash":"f49556935deae49df3158c2eb2265464129ef978","modified":1717873105267},{"_id":"public/css/mobile.css.map","hash":"c9f9dade45b119ae2eb7a93be0160baef4d494f8","modified":1717873105267},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1717873105267},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1717873105267},{"_id":"public/scripts/dark.js.map","hash":"feb9e1905c4b313b839c1c3b69ad61c05f265a9a","modified":1717873105267},{"_id":"public/scripts/main.js.LICENSE.txt","hash":"959bfc660011bc6a0800fe9e7974080f64c062aa","modified":1717873105267},{"_id":"public/scripts/search.js.LICENSE.txt","hash":"2c9b607ded909550f2ed2d0f2e7271781d9f78d9","modified":1717873105267},{"_id":"public/css/style.css.map","hash":"dbe8f8c1fccf8bd9d28ecf3874036a2281319aa0","modified":1717873105267},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1717873105267},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1717873105267},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1717873105267},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1717873105267},{"_id":"public/scripts/customFontLoader.js.map","hash":"702a44b0b1b450263592bfb1199c8d36ea9834a2","modified":1717873105267},{"_id":"public/css/dark.css","hash":"4db211216f16a5e66d4d499158f4005a1bbb39f5","modified":1717873105267},{"_id":"public/css/mobile.css","hash":"acb0dfcce26ec93f59c6ec4936006abbe8daefee","modified":1717873105267},{"_id":"public/lib/webfontloader.min.js","hash":"4c69aeb4e4f355912503d1c460e8e7aa6ea6963e","modified":1717873105267},{"_id":"public/scripts/customFontLoader.js","hash":"7c2f03fbd2b8340b77b1b02778a34e5ac10b560c","modified":1717873105267},{"_id":"public/scripts/dark.js","hash":"28ba818b2ab8a9454a52fe2710b5a8a81a195e4d","modified":1717873105267},{"_id":"public/scripts/share.js.map","hash":"1e018aa465800a066480e33c848f380880af6743","modified":1717873105267},{"_id":"public/scripts/share.js","hash":"2210dd8dacea4f1ca11c0047dfafd0a170abd953","modified":1717873105267},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1717873105267},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1717873105267},{"_id":"public/css/style.css","hash":"f08b1ec3a5fe1bf936401a238d55e0487296b42c","modified":1717873105267},{"_id":"public/lib/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1717873105267},{"_id":"public/scripts/search.js.map","hash":"bd469588b3bee82b3cf72b72d447c854f4d76875","modified":1717873105267},{"_id":"public/scripts/search.js","hash":"ac8e9d130ea410832a421d661898abee63bd8e67","modified":1717873105267},{"_id":"public/scripts/main.js.map","hash":"79d928070b7e5333ca241c5563ab4fe9cab31b74","modified":1717873105267},{"_id":"public/scripts/main.js","hash":"11fd75dddcbef7157fbfb8717b3463a80fda1fb3","modified":1717873105267}],"Category":[{"name":"ubuntu","_id":"clx6hajm60003i9604vcphxno"},{"name":"ros2","_id":"clx6hajma0008i960ggmyb0z7"},{"name":"web","_id":"clx6hajme000fi960aahzfyq8"},{"name":"embedded","_id":"clx6hajmm0017i960c6jdguam"}],"Data":[],"Page":[{"title":"我已经怒不可遏了！","layout":"about","_content":"## 引子\n\n思来想去，我觉得还是需要一个自我介绍的，于是我写下了这份文字来供以他人阅览 `2024`。\n\n## 你好，世界\n\n男，年20，就读于南京某所大学，自动化，是一个很正常的大学生。\n\n## 对世界报以热忱\n\n### 间歇勤奋的习字者\n会写一点字，临过一些帖子，诸如灵飞经，瘦金体，主要是硬笔，现在逐渐放下了练字的习惯，偶尔兴致来了还是会抽几张纸写一写。\n\n### 不愿接稿的画手\n会画一点画，间歇性练习，平日有灵感了还是会专门拿出一张纸或打开SAI画上一作的，主要画二次元的角色。\n\n### 会拨弄二三的吉他奏者\n会弹一点吉他，指弹，看上喜欢的曲子了就会拿起来练习。\n\n### 根深蒂固的二次元\n有追番的习惯，穿插着补老番，每个季度都会挑几部感兴趣的看看，若是遇到喜欢的角色或者剧情，就会拿起手帐本做一点剧情内容的记录，或者为角色画上几幅画，分享给朋友。\n\n### 体能不好的小球类本当上手\n乒乓球，羽毛球都会，经常拿一个劲极7 + 狂飙月速在学校乒乓球馆游荡，或者拿上我26磅5U拍在野场漂流（我们学校羽毛球场地是最难抢的）。\n\n### 不可救药的二次元曲风\n喜欢听偏日系的音乐，DECO*27，花谱，Aimer，Miku，GUMI，可不 ...\n\n### 时常萎靡的游戏欲\n游戏偶尔会玩，我的世界，原神，崩坏之类的，Steam上会和朋友玩一玩求生之路，战地，或者自己玩一玩一些单机游戏。\n\n### 大学生活的日常\n常参加一些专业相关的比赛，像是机甲大师，工程赛这些和嵌入式，视觉算法相关的比赛，像安卓App，Unity，Vue，JavaSpring什么的也会学着玩玩，偶尔也会画块板子，打开SolidWorks\t建个模做个小项目。\n\n### 解脱于广告和约束\n喜欢折腾电子产品，系统，比如刷机，刷系统，平日主用ubuntu，小米（好刷机，自定义程度高）。\n\n## 期待未定义的相遇\n\n可以说生活处处可以折腾，未来还想着学学GK建模，涂装，游戏制作等等，不断地开启新坑。\n如果你也是对生活充满热情的人，想尝试一切新奇的事物，有自己的追求，不妨和我交流交流，也许又能找到一个志趣相投的朋友呢？","source":"about/index.md","raw":"---\ntitle: 我已经怒不可遏了！\nlayout: about\n---\n## 引子\n\n思来想去，我觉得还是需要一个自我介绍的，于是我写下了这份文字来供以他人阅览 `2024`。\n\n## 你好，世界\n\n男，年20，就读于南京某所大学，自动化，是一个很正常的大学生。\n\n## 对世界报以热忱\n\n### 间歇勤奋的习字者\n会写一点字，临过一些帖子，诸如灵飞经，瘦金体，主要是硬笔，现在逐渐放下了练字的习惯，偶尔兴致来了还是会抽几张纸写一写。\n\n### 不愿接稿的画手\n会画一点画，间歇性练习，平日有灵感了还是会专门拿出一张纸或打开SAI画上一作的，主要画二次元的角色。\n\n### 会拨弄二三的吉他奏者\n会弹一点吉他，指弹，看上喜欢的曲子了就会拿起来练习。\n\n### 根深蒂固的二次元\n有追番的习惯，穿插着补老番，每个季度都会挑几部感兴趣的看看，若是遇到喜欢的角色或者剧情，就会拿起手帐本做一点剧情内容的记录，或者为角色画上几幅画，分享给朋友。\n\n### 体能不好的小球类本当上手\n乒乓球，羽毛球都会，经常拿一个劲极7 + 狂飙月速在学校乒乓球馆游荡，或者拿上我26磅5U拍在野场漂流（我们学校羽毛球场地是最难抢的）。\n\n### 不可救药的二次元曲风\n喜欢听偏日系的音乐，DECO*27，花谱，Aimer，Miku，GUMI，可不 ...\n\n### 时常萎靡的游戏欲\n游戏偶尔会玩，我的世界，原神，崩坏之类的，Steam上会和朋友玩一玩求生之路，战地，或者自己玩一玩一些单机游戏。\n\n### 大学生活的日常\n常参加一些专业相关的比赛，像是机甲大师，工程赛这些和嵌入式，视觉算法相关的比赛，像安卓App，Unity，Vue，JavaSpring什么的也会学着玩玩，偶尔也会画块板子，打开SolidWorks\t建个模做个小项目。\n\n### 解脱于广告和约束\n喜欢折腾电子产品，系统，比如刷机，刷系统，平日主用ubuntu，小米（好刷机，自定义程度高）。\n\n## 期待未定义的相遇\n\n可以说生活处处可以折腾，未来还想着学学GK建模，涂装，游戏制作等等，不断地开启新坑。\n如果你也是对生活充满热情的人，想尝试一切新奇的事物，有自己的追求，不妨和我交流交流，也许又能找到一个志趣相投的朋友呢？","date":"2024-05-28T16:26:13.248Z","updated":"2024-05-28T16:26:13.248Z","path":"about/index.html","comments":1,"_id":"clx6hajly0000i960bu1kgtuc","content":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>思来想去，我觉得还是需要一个自我介绍的，于是我写下了这份文字来供以他人阅览 <code>2024</code>。</p>\n<h2 id=\"你好，世界\"><a href=\"#你好，世界\" class=\"headerlink\" title=\"你好，世界\"></a>你好，世界</h2><p>男，年20，就读于南京某所大学，自动化，是一个很正常的大学生。</p>\n<h2 id=\"对世界报以热忱\"><a href=\"#对世界报以热忱\" class=\"headerlink\" title=\"对世界报以热忱\"></a>对世界报以热忱</h2><h3 id=\"间歇勤奋的习字者\"><a href=\"#间歇勤奋的习字者\" class=\"headerlink\" title=\"间歇勤奋的习字者\"></a>间歇勤奋的习字者</h3><p>会写一点字，临过一些帖子，诸如灵飞经，瘦金体，主要是硬笔，现在逐渐放下了练字的习惯，偶尔兴致来了还是会抽几张纸写一写。</p>\n<h3 id=\"不愿接稿的画手\"><a href=\"#不愿接稿的画手\" class=\"headerlink\" title=\"不愿接稿的画手\"></a>不愿接稿的画手</h3><p>会画一点画，间歇性练习，平日有灵感了还是会专门拿出一张纸或打开SAI画上一作的，主要画二次元的角色。</p>\n<h3 id=\"会拨弄二三的吉他奏者\"><a href=\"#会拨弄二三的吉他奏者\" class=\"headerlink\" title=\"会拨弄二三的吉他奏者\"></a>会拨弄二三的吉他奏者</h3><p>会弹一点吉他，指弹，看上喜欢的曲子了就会拿起来练习。</p>\n<h3 id=\"根深蒂固的二次元\"><a href=\"#根深蒂固的二次元\" class=\"headerlink\" title=\"根深蒂固的二次元\"></a>根深蒂固的二次元</h3><p>有追番的习惯，穿插着补老番，每个季度都会挑几部感兴趣的看看，若是遇到喜欢的角色或者剧情，就会拿起手帐本做一点剧情内容的记录，或者为角色画上几幅画，分享给朋友。</p>\n<h3 id=\"体能不好的小球类本当上手\"><a href=\"#体能不好的小球类本当上手\" class=\"headerlink\" title=\"体能不好的小球类本当上手\"></a>体能不好的小球类本当上手</h3><p>乒乓球，羽毛球都会，经常拿一个劲极7 + 狂飙月速在学校乒乓球馆游荡，或者拿上我26磅5U拍在野场漂流（我们学校羽毛球场地是最难抢的）。</p>\n<h3 id=\"不可救药的二次元曲风\"><a href=\"#不可救药的二次元曲风\" class=\"headerlink\" title=\"不可救药的二次元曲风\"></a>不可救药的二次元曲风</h3><p>喜欢听偏日系的音乐，DECO*27，花谱，Aimer，Miku，GUMI，可不 …</p>\n<h3 id=\"时常萎靡的游戏欲\"><a href=\"#时常萎靡的游戏欲\" class=\"headerlink\" title=\"时常萎靡的游戏欲\"></a>时常萎靡的游戏欲</h3><p>游戏偶尔会玩，我的世界，原神，崩坏之类的，Steam上会和朋友玩一玩求生之路，战地，或者自己玩一玩一些单机游戏。</p>\n<h3 id=\"大学生活的日常\"><a href=\"#大学生活的日常\" class=\"headerlink\" title=\"大学生活的日常\"></a>大学生活的日常</h3><p>常参加一些专业相关的比赛，像是机甲大师，工程赛这些和嵌入式，视觉算法相关的比赛，像安卓App，Unity，Vue，JavaSpring什么的也会学着玩玩，偶尔也会画块板子，打开SolidWorks\t建个模做个小项目。</p>\n<h3 id=\"解脱于广告和约束\"><a href=\"#解脱于广告和约束\" class=\"headerlink\" title=\"解脱于广告和约束\"></a>解脱于广告和约束</h3><p>喜欢折腾电子产品，系统，比如刷机，刷系统，平日主用ubuntu，小米（好刷机，自定义程度高）。</p>\n<h2 id=\"期待未定义的相遇\"><a href=\"#期待未定义的相遇\" class=\"headerlink\" title=\"期待未定义的相遇\"></a>期待未定义的相遇</h2><p>可以说生活处处可以折腾，未来还想着学学GK建模，涂装，游戏制作等等，不断地开启新坑。<br>如果你也是对生活充满热情的人，想尝试一切新奇的事物，有自己的追求，不妨和我交流交流，也许又能找到一个志趣相投的朋友呢？</p>\n","excerpt":"","more":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>思来想去，我觉得还是需要一个自我介绍的，于是我写下了这份文字来供以他人阅览 <code>2024</code>。</p>\n<h2 id=\"你好，世界\"><a href=\"#你好，世界\" class=\"headerlink\" title=\"你好，世界\"></a>你好，世界</h2><p>男，年20，就读于南京某所大学，自动化，是一个很正常的大学生。</p>\n<h2 id=\"对世界报以热忱\"><a href=\"#对世界报以热忱\" class=\"headerlink\" title=\"对世界报以热忱\"></a>对世界报以热忱</h2><h3 id=\"间歇勤奋的习字者\"><a href=\"#间歇勤奋的习字者\" class=\"headerlink\" title=\"间歇勤奋的习字者\"></a>间歇勤奋的习字者</h3><p>会写一点字，临过一些帖子，诸如灵飞经，瘦金体，主要是硬笔，现在逐渐放下了练字的习惯，偶尔兴致来了还是会抽几张纸写一写。</p>\n<h3 id=\"不愿接稿的画手\"><a href=\"#不愿接稿的画手\" class=\"headerlink\" title=\"不愿接稿的画手\"></a>不愿接稿的画手</h3><p>会画一点画，间歇性练习，平日有灵感了还是会专门拿出一张纸或打开SAI画上一作的，主要画二次元的角色。</p>\n<h3 id=\"会拨弄二三的吉他奏者\"><a href=\"#会拨弄二三的吉他奏者\" class=\"headerlink\" title=\"会拨弄二三的吉他奏者\"></a>会拨弄二三的吉他奏者</h3><p>会弹一点吉他，指弹，看上喜欢的曲子了就会拿起来练习。</p>\n<h3 id=\"根深蒂固的二次元\"><a href=\"#根深蒂固的二次元\" class=\"headerlink\" title=\"根深蒂固的二次元\"></a>根深蒂固的二次元</h3><p>有追番的习惯，穿插着补老番，每个季度都会挑几部感兴趣的看看，若是遇到喜欢的角色或者剧情，就会拿起手帐本做一点剧情内容的记录，或者为角色画上几幅画，分享给朋友。</p>\n<h3 id=\"体能不好的小球类本当上手\"><a href=\"#体能不好的小球类本当上手\" class=\"headerlink\" title=\"体能不好的小球类本当上手\"></a>体能不好的小球类本当上手</h3><p>乒乓球，羽毛球都会，经常拿一个劲极7 + 狂飙月速在学校乒乓球馆游荡，或者拿上我26磅5U拍在野场漂流（我们学校羽毛球场地是最难抢的）。</p>\n<h3 id=\"不可救药的二次元曲风\"><a href=\"#不可救药的二次元曲风\" class=\"headerlink\" title=\"不可救药的二次元曲风\"></a>不可救药的二次元曲风</h3><p>喜欢听偏日系的音乐，DECO*27，花谱，Aimer，Miku，GUMI，可不 …</p>\n<h3 id=\"时常萎靡的游戏欲\"><a href=\"#时常萎靡的游戏欲\" class=\"headerlink\" title=\"时常萎靡的游戏欲\"></a>时常萎靡的游戏欲</h3><p>游戏偶尔会玩，我的世界，原神，崩坏之类的，Steam上会和朋友玩一玩求生之路，战地，或者自己玩一玩一些单机游戏。</p>\n<h3 id=\"大学生活的日常\"><a href=\"#大学生活的日常\" class=\"headerlink\" title=\"大学生活的日常\"></a>大学生活的日常</h3><p>常参加一些专业相关的比赛，像是机甲大师，工程赛这些和嵌入式，视觉算法相关的比赛，像安卓App，Unity，Vue，JavaSpring什么的也会学着玩玩，偶尔也会画块板子，打开SolidWorks\t建个模做个小项目。</p>\n<h3 id=\"解脱于广告和约束\"><a href=\"#解脱于广告和约束\" class=\"headerlink\" title=\"解脱于广告和约束\"></a>解脱于广告和约束</h3><p>喜欢折腾电子产品，系统，比如刷机，刷系统，平日主用ubuntu，小米（好刷机，自定义程度高）。</p>\n<h2 id=\"期待未定义的相遇\"><a href=\"#期待未定义的相遇\" class=\"headerlink\" title=\"期待未定义的相遇\"></a>期待未定义的相遇</h2><p>可以说生活处处可以折腾，未来还想着学学GK建模，涂装，游戏制作等等，不断地开启新坑。<br>如果你也是对生活充满热情的人，想尝试一切新奇的事物，有自己的追求，不妨和我交流交流，也许又能找到一个志趣相投的朋友呢？</p>\n"},{"title":"can_tutorial","date":"2024-05-12T10:58:16.000Z","_content":"\n## 引子\n\n现在是2024年1月18号晚上零点半，电路工数等困难科目已经考完，只是剩一门马原\n\n临近寒假的这一段时间颇为闲暇，于是在工作室寻得一些 **M2006无刷电机**和 **C610电调** ，加上手头上的 **C板**，试着组一台个人未来比赛用的四驱底盘\n\n依据大疆资料来看，电调需要使用CAN通信来控制，正中知识盲区，于是放下手中的马原教材（其实根本没有拿起来过），学习一下CAN\n\n## 环境准备\n\n### 前置知识\n- STM32CubeMX的使用\n- 一定的C语言使用经验\n\n### 软件环境\n\n- 代码生成 `STM32CubeMX`\n- 编译工具 `arm-none-eabi工具链`\n- 编写环境 `VSCode`+`Embedded IDE`\n- 调试工具 `Ozone`\n\n### 硬件环境\n\n- 主控芯片 `大疆C板-STM32F407IG`\n- 烧录工具 `JLink`\n- 通讯目标 `C610电调`\n\n## CAN的初印象\n\n### 何为CAN？\n\n在查阅了很多资料后，我提取了几个关键词：`总线结构`，`串行通讯`，`标准协议`，只需要两条线，即可解决沿途中设备的通信需求，例如，使用一块主控板加上CAN总线就可以很轻松的控制多个电机，极大缓解了布线带给我们的`焦虑`\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/0334eb74241d49979182c2ec0562302b.jpeg \n    width=80% \n    />\n</center>\n<center>\n布线地狱\n</center>\n</br>\n\n至于书面，准确，乃至于繁缛的官方定义，我便不写入文章里，百度看看就好\n\n### CAN的硬件组成\n\n我们可以称一个通讯单元为**节点**，一个节点一般有三个部分：**微控制器**， **CAN控制器**，**CAN收发器**，总线两端须串上120Ω的电阻，以模拟无限远传输线的特性阻抗，通过开关等手段来选择是否使用这个电阻\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/fc40ed4d25ce4e14b155bb0b385efd73.png\n    width=80% \n    />\n</center>\n<center>\nCAN总线结构\n</center>\n</br>\n\nSTM32芯片会自带CAN外设拓展，名为**bxCAN** `(Basic Extended CAN  - 基本拓展CAN)`，详细内容此处不展开\n\n## CAN通信初试\n\n姑且暂停理论部分的讲解，**繁杂的原理**总是令人头大，使人望而却步，我们先**启动**开发软件，走通一个通讯的流程，再来细细分析其中的缘由，或者跳过理论，只掌握软件层的流程也是可以的\n\n基本步骤：`配置STM32CubeMX` > `配置CAN过滤器` > `发送接收报文`\n\n### 配置STM32CubeMX\n\n启动CubeMX，选好芯片类型创建项目，首先把**常规设置**搞定\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/5c952ce9d3e74729bef9badd88baf38f.png\n    width=80% \n    />\n</center>\n<center>\nRCC设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/14c833c93c1a4343911d8267e5a1948c.png\n    width=80% \n    />\n</center>\n<center>\nSWD设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/62a9fa51e5ad40258de9884d6d7edf0d.png\n    width=80% \n    />\n</center>\n<center>\n时钟设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/5ce51f07fb40420098f0e63340972fea.png\n    width=80% \n    />\n</center>\n<center>\n.c文件和.h文件分开生成\n</center>\n</br>\n\n项目管理类型之类的根据**自己使用的开发环境**来设置即可\n\n简单写一个点灯测试一下\n\n这是板载灯的连线\n\n- `TIM5_CH1` - `LED_BLUE`\n- `TIM5_CH2` - `LED_GREEN`\n- `TIM5_CH3` - `LED_RED`\n\n```cpp\nvoid breath_led()\n{\n    for (int i = 0; i < 100; i++) {\n        HAL_Delay(10);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 20000 * i / 100);\n    }\n\n    for (int i = 100; i > 0; i--) {\n        HAL_Delay(10);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 20000 * i / 100);\n    }\n}\n```\n将其放入主循环中运行，理所应当地成功了\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/1d9fc725662a4a28b4bf8b925585b0fc.jpeg\n    width=80% \n    />\n</center>\n<center>\n呼吸灯测试\n</center>\n</br>\n\n现在开始配置**CAN通信**\n\nCubeMX界面中，在`CAN1`的**Parameter Settings**我们可以看到\n\n- **Bit Timings Parameters** - 配置传输速度\n    - **Prescaler (for Time Quantum)** - 分频，调整TQ（Time Quantum）大小\n    - Time Quantum - 最小时间单位\n    - **Time Quanta in Bit Segment 1** - 相位缓冲段1段占几个TQ\n    - **Time Quanta in Bit Segment 2** - 相位缓冲段2段占几个TQ\n    - Time for one Bit\n    - Baud Rate - 波特率\n    - **ReSynchronization Jump Width** - 再同步补偿宽度\n- **Basic Parameters** - 基本参数\n    - Time Triggered Communication Mode - 时间触发模式\n    - Automatic Bus-off Management - 自动离线管理\n    - Automatic Wake-Up Mode - 自动唤醒\n    - Automatic Retransmission - 自动重传\n    - Receive Fifo Locked Mode - 锁定模式\n    - Transmit Fifo Priority - 报文发送优先级\n- **Advanced Parameters** - 高级参数\n    - **Operating Mode** -*运行模式：`正常模式` `静默模式` `回环模式` `回环静默模式`\n\n而 **NVIC Interrupt Table** 中有\n\n- CAN1 TX interrupts\n- CAN1 RX0 interrupts\n- CAN1 RX1 interrupt\n- CAN1 SCE interrupt\n\n这是我们初期需要关注的配置列表\n\n**1. 设置波特率**\n\n以我的需求为例，查阅大疆官方资料可以得知\n\n> 将 CAN 信号线连接到控制板接收 CAN 控制指令，CAN 总线比特率为 1Mbps。\n\n所以我们需要将CAN通讯的比特率 `baud rate` 设置为 `1000000 bit/s`\n\n根据波特率计算公式 baud rate = TQ * ( TBS1 + TBS2 + SJY) , 我们得到如下设置\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/bac1aba73d1040cfa061ecc028c35bfa.png\n    width=80% \n    />\n</center>\n<center>\nTQ * ( 11 + 2 + 1) = 1000ns\n</center>\n\n根据实际情况计算一下即可，也可以多选几个选项，把正确的波特率尝试出来，**灰色的选项**就是CubeMX帮我们计算好的数值\n\n**2. 打开中断**\n\n处理电调发送的电机信息，需要中断来调用回调函数，于是打开**接收中断**\n\n这里我使用的单片机中，CAN外设具有两个用于接收信息的**邮箱**，我们命其为 `FIFO0`和`FIFO0`，每个邮箱都有**一个过滤器**，用于筛选报文，可以存放**三条报文**，在**中断设置**中对应 `CAN1 RX0 interrupt`和`CAN1 RX1 interrupt`，我们打开需要使用的那一个就可以\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/f3a40ac4efe94be79b876c875cedbbf1.png\n    width=80% \n    />\n</center>\n\n既然存在接收邮箱，相应的，就有**发送邮箱**，我们现在只要知道发送邮箱存在**发送优先级**且每个邮箱只能存放**一条报文**\n\n现在，我们已经在CubeMX中配置好了CAN，下一步就是要配置**CAN过滤器**\n\n### 配置CAN过滤器\n\n前面我们说到，STM32上有两个**邮箱**用于接收报文，为了接收我们想要的报文，我们需要配置一下过滤器，把不想接受的报文过滤掉，只放行想要的报文\n\n配置过滤器需要我们自己手写，并未提前生成，但HAL库提供了过滤器配置参数的结构体类型，我们只需要**给这个结构体赋值**，然后**调用HAL提供的初始化函数**即可完成配置\n\n```cpp\n// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h\n\n// 过滤器结构体\ntypedef struct\n{\n  uint32_t FilterIdHigh;\n  uint32_t FilterIdLow;\n  uint32_t FilterMaskIdHigh;\n  uint32_t FilterMaskIdLow; \n  uint32_t FilterFIFOAssignment; \n  uint32_t FilterBank;        \n  uint32_t FilterMode;\n  uint32_t FilterScale;\n  uint32_t FilterActivation; \n  uint32_t SlaveStartFilterBank; \n} CAN_FilterTypeDef;\n\n// 配置函数\nHAL_StatusTypeDef HAL_CAN_ConfigFilter(\n    CAN_HandleTypeDef *hcan, \n    CAN_FilterTypeDef *sFilterConfig\n    );\n```\n\n具体的使用和结构体的定义随后再讲，我们只需要对这个结构体和函数有一个**大概的印象**即可\n\n### 发送接收报文\n\n首先是**发送**\n\n我预期使用一块主控与四个电机通信，那么在发送报文时，就需要指定**发送给哪一个电机**，以及**其他一些信息**，比如发送`信息的长度`，`信息的类型`，`信息ID类型`等等，HAL把这些发送需要的信息定义成了一个结构体 `CAN_TxHeaderTypeDef`,我们只需要为每一个电机声明一个 CAN_TxHeaderTypeDef 结构体，再确定好发送的数据内容，就可以将数据发送到指定的电机中\n\n我们回想一下，在设置接收中断时，是不是提到了**邮箱**的概念？**STM32F407IGHx**为我们提供了三个**发送邮箱**，在发送时，需要指定使用哪一个邮箱\n\nHAL库理所应当地帮我们写好了发送的函数，只要传入`can的句柄`，`报文头结构体`，`数据信息`和`邮箱编号`即可\n\n```cpp\n// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h\n\n// 发送函数的声明\nHAL_StatusTypeDef HAL_CAN_AddTxMessage(\n    CAN_HandleTypeDef *hcan, \n    CAN_TxHeaderTypeDef *pHeader, \n    uint8_t aData[], \n    uint32_t *pTxMailbox\n    )；\n\n// 邮箱编号的定义\n#define CAN_TX_MAILBOX0             (0x00000001U)  /*!< Tx Mailbox 0  */\n#define CAN_TX_MAILBOX1             (0x00000002U)  /*!< Tx Mailbox 1  */\n#define CAN_TX_MAILBOX2             (0x00000004U)  /*!< Tx Mailbox 2  */\n```\n在实际使用中，我们可以对邮箱进行轮询，使用**空闲的那一个邮箱**\n\n然后是**接收**\n\n总线上的报文在经过了我们设置的**过滤器**后，正确的报文会**触发**我们设置的**中断**，我们便可以在中断的**回调函数**中对收到的数据进行处理了\n\n我们只需要找到HAL库为我们提供的中断函数，对其进行覆写即可\n\n```cpp\n// 这是一种使用情况\n\n// 回调函数\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n\tif(hcan->Instance ==CAN1)\n\t{\n\t  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, date_CAN1); \n\t  return ;\n\t}\n}\n\n// 这个函数可以从报文中分离出我们想要的信息\nHAL_StatusTypeDef HAL_CAN_GetRxMessage(\n    CAN_HandleTypeDef *hcan,            // can句柄\n    uint32_t RxFifo,                    // 接收邮箱编号\n    CAN_RxHeaderTypeDef *pHeader,       // 接收报文头\n    uint8_t aData[]                     // 数据\n    )；\n\n// 接收邮箱编号的定义\n#define CAN_RX_FIFO0                (0x00000000U)  /*!< CAN receive FIFO 0 */\n#define CAN_RX_FIFO1                (0x00000001U)  /*!< CAN receive FIFO 1 */\n```\n\n现在我们配置过滤器和发送接收这两个流程应该是有了一个**大概的认知**，来做一个简单的测试吧\n\n将运行模式设置为**回环发送**，我们就可以收到自己发送的报文，前提是能通过邮箱过滤，其他配置依照上文即可\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/9662f70acc644e3897a03f64c5d34d2b.png\n    width=80% \n    />\n</center>\n\n记得重新生成代码\n\n然后我们写一个过滤器的配置\n\n```cpp\nvoid can_filter_init()\n{\n    CAN_FilterTypeDef filter;\n\n    // 报文头结构体的赋值\n    // 此处配置为接收全部报文，以便于测试\n    filter.FilterActivation     = ENABLE;                   // 启用过滤器\n    filter.FilterBank           = 0;                        // 过滤器编码\n    filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // 掩码模式\n    filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // 32位宽\n    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // 配置邮箱0\n    filter.FilterIdHigh         = 0x0000;                   // 高位0\n    filter.FilterIdLow          = 0x0000;                   // 低位0\n    filter.FilterMaskIdHigh     = 0x0000;                   // 掩码高位不检测\n    filter.FilterMaskIdLow      = 0x0000;                   // 掩码低位不检测\n\n    // 将配置加载进CAN 1中\n    HAL_CAN_ConfigFilter(&hcan1, &filter);\n}\n```\n\n初始化CAN\n\n```cpp\nvoid can_init()\n{\n    can_filter_init();                                                  // 过滤器\n    HAL_CAN_Start(&hcan1);                                              // 开启CAN通讯\n    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  // 开启接收中断\n}\n```\n\n声明一些必要的变量\n\n```cpp\nuint8_t can_1_rx[8];    // 接收数据\nuint8_t can_1_tx[8];    // 发送数据\n\nCAN_RxHeaderTypeDef can_1_rx_header;    // 接收报文头\nCAN_TxHeaderTypeDef can_1_tx_header;    // 发送报文头\n\nuint32_t mail_tx = CAN_TX_MAILBOX0;     // 发送邮箱编号\n```\n\n初始化一些参数\n\n```cpp\n// 随便创建一种发送报文头结构体\ncan_1_tx_header.StdId              = 0x00000000;\ncan_1_tx_header.ExtId              = 0x12345000;\ncan_1_tx_header.IDE                = CAN_ID_EXT;\ncan_1_tx_header.RTR                = CAN_RTR_DATA;\ncan_1_tx_header.DLC                = 8;\ncan_1_tx_header.TransmitGlobalTime = DISABLE;\n\n// 初始化一些发送的数据\ncan_1_tx[0] = 1;\n\n// 要使用的灯记得开启，根据自己的板子写即可\nHAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);\n// 刚才写的初始化函数用上\ncan_init();\n```\n\n回调函数的覆写\n\n```cpp\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n    if (hcan->Instance == CAN1) {\n        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_1_rx_header, can_1_rx);\n\n        // 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯\n        // 根据自己的板子替换一下点灯的函数\n        if(can_1_rx[0] == 0)\n        {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000);\n        }\n        else if(can_1_rx[0] == 1)\n        {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 0);\n        }\n\n        return;\n    }\n}\n```\n\n在主循环中不断发送报文\n\n```cpp\nHAL_CAN_AddTxMessage(&hcan1, &can_1_tx_header, can_1_tx, &mail_tx);\n```\n\n这是 main.c ，注意根据自己使用的板子情况**进行修改**\n\n```cpp\n/* USER CODE BEGIN Header */\n/**\n ******************************************************************************\n * @file           : main.c\n * @brief          : Main program body\n ******************************************************************************\n * @attention\n *\n * Copyright (c) 2024 STMicroelectronics.\n * All rights reserved.\n *\n * This software is licensed under terms that can be found in the LICENSE file\n * in the root directory of this software component.\n * If no LICENSE file comes with this software, it is provided AS-IS.\n *\n ******************************************************************************\n */\n/* USER CODE END Header */\n/* Includes ------------------------------------------------------------------*/\n#include \"main.h\"\n#include \"can.h\"\n#include \"tim.h\"\n#include \"gpio.h\"\n\n/* Private includes ----------------------------------------------------------*/\n/* USER CODE BEGIN Includes */\n\n/* USER CODE END Includes */\n\n/* Private typedef -----------------------------------------------------------*/\n/* USER CODE BEGIN PTD */\n\n/* USER CODE END PTD */\n\n/* Private define ------------------------------------------------------------*/\n/* USER CODE BEGIN PD */\n\n/* USER CODE END PD */\n\n/* Private macro -------------------------------------------------------------*/\n/* USER CODE BEGIN PM */\n\n/* USER CODE END PM */\n\n/* Private variables ---------------------------------------------------------*/\n\n/* USER CODE BEGIN PV */\n\nuint8_t can_1_rx[8]; // 接收数据\nuint8_t can_1_tx[8]; // 发送数据\n\nCAN_RxHeaderTypeDef can_1_rx_header; // 接收保报文头\nCAN_TxHeaderTypeDef can_1_tx_header; // 发送报文头\n\nuint32_t mail_tx = CAN_TX_MAILBOX0; // 发送邮箱编号\n\n/* USER CODE END PV */\n\n/* Private function prototypes -----------------------------------------------*/\nvoid SystemClock_Config(void);\n/* USER CODE BEGIN PFP */\n\nvoid can_filter_init();\nvoid can_init();\n\n/* USER CODE END PFP */\n\n/* Private user code ---------------------------------------------------------*/\n/* USER CODE BEGIN 0 */\n\nvoid can_filter_init()\n{\n    CAN_FilterTypeDef filter;\n\n    // 报文头结构体的赋值\n    // 此处配置为接收全部报文，以便于测试\n    filter.FilterActivation     = ENABLE;                // 启用过滤器\n    filter.FilterBank           = 0;                     // 过滤器编码\n    filter.FilterMode           = CAN_FILTERMODE_IDMASK; // 掩码模式\n    filter.FilterScale          = CAN_FILTERSCALE_32BIT; // 32位宽\n    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // 配置邮箱0\n    filter.FilterIdHigh         = 0x0000;                // 高位0\n    filter.FilterIdLow          = 0x0000;                // 低位0\n    filter.FilterMaskIdHigh     = 0x0000;                // 掩码高位不检测\n    filter.FilterMaskIdLow      = 0x0000;                // 掩码低位不检测\n\n    // 将配置加载进CAN 1中\n    HAL_CAN_ConfigFilter(&hcan1, &filter);\n}\n\nvoid can_init()\n{\n    can_filter_init();                                                 // 过滤器\n    HAL_CAN_Start(&hcan1);                                             // 开启CAN通讯\n    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // 开启接收中断\n}\n\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n    if (hcan->Instance == CAN1) {\n        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_1_rx_header, can_1_rx);\n\n        // 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯\n        // 根据自己的板子替换一下点灯的函数\n        if (can_1_rx[0] == 0) {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000);\n        } else if (can_1_rx[0] == 1) {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 0);\n        }\n\n        return;\n    }\n}\n\n/* USER CODE END 0 */\n\n/**\n * @brief  The application entry point.\n * @retval int\n */\nint main(void)\n{\n    /* USER CODE BEGIN 1 */\n\n    /* USER CODE END 1 */\n\n    /* MCU Configuration--------------------------------------------------------*/\n\n    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n    HAL_Init();\n\n    /* USER CODE BEGIN Init */\n\n    /* USER CODE END Init */\n\n    /* Configure the system clock */\n    SystemClock_Config();\n\n    /* USER CODE BEGIN SysInit */\n\n    /* USER CODE END SysInit */\n\n    /* Initialize all configured peripherals */\n    MX_GPIO_Init();\n    MX_TIM4_Init();\n    MX_TIM5_Init();\n    MX_CAN1_Init();\n    /* USER CODE BEGIN 2 */\n\n    // 随便创建一种发送报文头结构体\n    can_1_tx_header.StdId              = 0x00000000;\n    can_1_tx_header.ExtId              = 0x12345000;\n    can_1_tx_header.IDE                = CAN_ID_EXT;\n    can_1_tx_header.RTR                = CAN_RTR_DATA;\n    can_1_tx_header.DLC                = 8;\n    can_1_tx_header.TransmitGlobalTime = DISABLE;\n\n    can_1_tx[0] = 1;\n\n    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);\n    can_init();\n\n    /* USER CODE END 2 */\n\n    /* Infinite loop */\n    /* USER CODE BEGIN WHILE */\n    while (1) {\n\n        HAL_CAN_AddTxMessage(&hcan1, &can_1_tx_header, can_1_tx, &mail_tx);\n\n        /* USER CODE END WHILE */\n\n        /* USER CODE BEGIN 3 */\n    }\n    /* USER CODE END 3 */\n}\n\n/**\n * @brief System Clock Configuration\n * @retval None\n */\nvoid SystemClock_Config(void)\n{\n    RCC_OscInitTypeDef RCC_OscInitStruct = {0};\n    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};\n\n    /** Configure the main internal regulator output voltage\n     */\n    __HAL_RCC_PWR_CLK_ENABLE();\n    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);\n\n    /** Initializes the RCC Oscillators according to the specified parameters\n     * in the RCC_OscInitTypeDef structure.\n     */\n    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;\n    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;\n    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;\n    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;\n    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;\n    RCC_OscInitStruct.PLL.PLLM            = 8;\n    RCC_OscInitStruct.PLL.PLLN            = 168;\n    RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;\n    RCC_OscInitStruct.PLL.PLLQ            = 4;\n    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {\n        Error_Handler();\n    }\n\n    /** Initializes the CPU, AHB and APB buses clocks\n     */\n    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;\n    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;\n    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;\n    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;\n\n    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {\n        Error_Handler();\n    }\n}\n\n/* USER CODE BEGIN 4 */\n\n/* USER CODE END 4 */\n\n/**\n * @brief  This function is executed in case of error occurrence.\n * @retval None\n */\nvoid Error_Handler(void)\n{\n    /* USER CODE BEGIN Error_Handler_Debug */\n    /* User can add his own implementation to report the HAL error return state */\n    __disable_irq();\n    while (1) {\n    }\n    /* USER CODE END Error_Handler_Debug */\n}\n\n#ifdef USE_FULL_ASSERT\n/**\n * @brief  Reports the name of the source file and the source line number\n *         where the assert_param error has occurred.\n * @param  file: pointer to the source file name\n * @param  line: assert_param error line source number\n * @retval None\n */\nvoid assert_failed(uint8_t *file, uint32_t line)\n{\n    /* USER CODE BEGIN 6 */\n    /* User can add his own implementation to report the file name and line number,\n       ex: printf(\"Wrong parameters value: file %s on line %d\\r\\n\", file, line) */\n    /* USER CODE END 6 */\n}\n#endif /* USE_FULL_ASSERT */\n\n```\n\n在ozone中查看参数，并实时修改发送数据的数值，发现接收数据也会实时修改，板载灯反馈正常\n\n若不能使用ozone，也可以在代码中修改发送的数值，重新烧录，查看板载灯的情况\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/b9f8c4761d6f417087f7213b0a7d41ca.png\n    width=60% \n    />\n</center>\n\n回环测试正常，我们可以进行下一步的了解\n\n## CAN的熟练掌握\n\n在囫囵吞枣地走通过一遍流程后，我们遇到很很多**复杂的模式和结构体**，这些需要根据实际情况来酌情配置","source":"can-tutorial/index.md","raw":"---\ntitle: can_tutorial\ndate: 2024-05-12 10:58:16\n---\n\n## 引子\n\n现在是2024年1月18号晚上零点半，电路工数等困难科目已经考完，只是剩一门马原\n\n临近寒假的这一段时间颇为闲暇，于是在工作室寻得一些 **M2006无刷电机**和 **C610电调** ，加上手头上的 **C板**，试着组一台个人未来比赛用的四驱底盘\n\n依据大疆资料来看，电调需要使用CAN通信来控制，正中知识盲区，于是放下手中的马原教材（其实根本没有拿起来过），学习一下CAN\n\n## 环境准备\n\n### 前置知识\n- STM32CubeMX的使用\n- 一定的C语言使用经验\n\n### 软件环境\n\n- 代码生成 `STM32CubeMX`\n- 编译工具 `arm-none-eabi工具链`\n- 编写环境 `VSCode`+`Embedded IDE`\n- 调试工具 `Ozone`\n\n### 硬件环境\n\n- 主控芯片 `大疆C板-STM32F407IG`\n- 烧录工具 `JLink`\n- 通讯目标 `C610电调`\n\n## CAN的初印象\n\n### 何为CAN？\n\n在查阅了很多资料后，我提取了几个关键词：`总线结构`，`串行通讯`，`标准协议`，只需要两条线，即可解决沿途中设备的通信需求，例如，使用一块主控板加上CAN总线就可以很轻松的控制多个电机，极大缓解了布线带给我们的`焦虑`\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/0334eb74241d49979182c2ec0562302b.jpeg \n    width=80% \n    />\n</center>\n<center>\n布线地狱\n</center>\n</br>\n\n至于书面，准确，乃至于繁缛的官方定义，我便不写入文章里，百度看看就好\n\n### CAN的硬件组成\n\n我们可以称一个通讯单元为**节点**，一个节点一般有三个部分：**微控制器**， **CAN控制器**，**CAN收发器**，总线两端须串上120Ω的电阻，以模拟无限远传输线的特性阻抗，通过开关等手段来选择是否使用这个电阻\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/fc40ed4d25ce4e14b155bb0b385efd73.png\n    width=80% \n    />\n</center>\n<center>\nCAN总线结构\n</center>\n</br>\n\nSTM32芯片会自带CAN外设拓展，名为**bxCAN** `(Basic Extended CAN  - 基本拓展CAN)`，详细内容此处不展开\n\n## CAN通信初试\n\n姑且暂停理论部分的讲解，**繁杂的原理**总是令人头大，使人望而却步，我们先**启动**开发软件，走通一个通讯的流程，再来细细分析其中的缘由，或者跳过理论，只掌握软件层的流程也是可以的\n\n基本步骤：`配置STM32CubeMX` > `配置CAN过滤器` > `发送接收报文`\n\n### 配置STM32CubeMX\n\n启动CubeMX，选好芯片类型创建项目，首先把**常规设置**搞定\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/5c952ce9d3e74729bef9badd88baf38f.png\n    width=80% \n    />\n</center>\n<center>\nRCC设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/14c833c93c1a4343911d8267e5a1948c.png\n    width=80% \n    />\n</center>\n<center>\nSWD设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/62a9fa51e5ad40258de9884d6d7edf0d.png\n    width=80% \n    />\n</center>\n<center>\n时钟设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/5ce51f07fb40420098f0e63340972fea.png\n    width=80% \n    />\n</center>\n<center>\n.c文件和.h文件分开生成\n</center>\n</br>\n\n项目管理类型之类的根据**自己使用的开发环境**来设置即可\n\n简单写一个点灯测试一下\n\n这是板载灯的连线\n\n- `TIM5_CH1` - `LED_BLUE`\n- `TIM5_CH2` - `LED_GREEN`\n- `TIM5_CH3` - `LED_RED`\n\n```cpp\nvoid breath_led()\n{\n    for (int i = 0; i < 100; i++) {\n        HAL_Delay(10);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 20000 * i / 100);\n    }\n\n    for (int i = 100; i > 0; i--) {\n        HAL_Delay(10);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 20000 * i / 100);\n    }\n}\n```\n将其放入主循环中运行，理所应当地成功了\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/1d9fc725662a4a28b4bf8b925585b0fc.jpeg\n    width=80% \n    />\n</center>\n<center>\n呼吸灯测试\n</center>\n</br>\n\n现在开始配置**CAN通信**\n\nCubeMX界面中，在`CAN1`的**Parameter Settings**我们可以看到\n\n- **Bit Timings Parameters** - 配置传输速度\n    - **Prescaler (for Time Quantum)** - 分频，调整TQ（Time Quantum）大小\n    - Time Quantum - 最小时间单位\n    - **Time Quanta in Bit Segment 1** - 相位缓冲段1段占几个TQ\n    - **Time Quanta in Bit Segment 2** - 相位缓冲段2段占几个TQ\n    - Time for one Bit\n    - Baud Rate - 波特率\n    - **ReSynchronization Jump Width** - 再同步补偿宽度\n- **Basic Parameters** - 基本参数\n    - Time Triggered Communication Mode - 时间触发模式\n    - Automatic Bus-off Management - 自动离线管理\n    - Automatic Wake-Up Mode - 自动唤醒\n    - Automatic Retransmission - 自动重传\n    - Receive Fifo Locked Mode - 锁定模式\n    - Transmit Fifo Priority - 报文发送优先级\n- **Advanced Parameters** - 高级参数\n    - **Operating Mode** -*运行模式：`正常模式` `静默模式` `回环模式` `回环静默模式`\n\n而 **NVIC Interrupt Table** 中有\n\n- CAN1 TX interrupts\n- CAN1 RX0 interrupts\n- CAN1 RX1 interrupt\n- CAN1 SCE interrupt\n\n这是我们初期需要关注的配置列表\n\n**1. 设置波特率**\n\n以我的需求为例，查阅大疆官方资料可以得知\n\n> 将 CAN 信号线连接到控制板接收 CAN 控制指令，CAN 总线比特率为 1Mbps。\n\n所以我们需要将CAN通讯的比特率 `baud rate` 设置为 `1000000 bit/s`\n\n根据波特率计算公式 baud rate = TQ * ( TBS1 + TBS2 + SJY) , 我们得到如下设置\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/bac1aba73d1040cfa061ecc028c35bfa.png\n    width=80% \n    />\n</center>\n<center>\nTQ * ( 11 + 2 + 1) = 1000ns\n</center>\n\n根据实际情况计算一下即可，也可以多选几个选项，把正确的波特率尝试出来，**灰色的选项**就是CubeMX帮我们计算好的数值\n\n**2. 打开中断**\n\n处理电调发送的电机信息，需要中断来调用回调函数，于是打开**接收中断**\n\n这里我使用的单片机中，CAN外设具有两个用于接收信息的**邮箱**，我们命其为 `FIFO0`和`FIFO0`，每个邮箱都有**一个过滤器**，用于筛选报文，可以存放**三条报文**，在**中断设置**中对应 `CAN1 RX0 interrupt`和`CAN1 RX1 interrupt`，我们打开需要使用的那一个就可以\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/f3a40ac4efe94be79b876c875cedbbf1.png\n    width=80% \n    />\n</center>\n\n既然存在接收邮箱，相应的，就有**发送邮箱**，我们现在只要知道发送邮箱存在**发送优先级**且每个邮箱只能存放**一条报文**\n\n现在，我们已经在CubeMX中配置好了CAN，下一步就是要配置**CAN过滤器**\n\n### 配置CAN过滤器\n\n前面我们说到，STM32上有两个**邮箱**用于接收报文，为了接收我们想要的报文，我们需要配置一下过滤器，把不想接受的报文过滤掉，只放行想要的报文\n\n配置过滤器需要我们自己手写，并未提前生成，但HAL库提供了过滤器配置参数的结构体类型，我们只需要**给这个结构体赋值**，然后**调用HAL提供的初始化函数**即可完成配置\n\n```cpp\n// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h\n\n// 过滤器结构体\ntypedef struct\n{\n  uint32_t FilterIdHigh;\n  uint32_t FilterIdLow;\n  uint32_t FilterMaskIdHigh;\n  uint32_t FilterMaskIdLow; \n  uint32_t FilterFIFOAssignment; \n  uint32_t FilterBank;        \n  uint32_t FilterMode;\n  uint32_t FilterScale;\n  uint32_t FilterActivation; \n  uint32_t SlaveStartFilterBank; \n} CAN_FilterTypeDef;\n\n// 配置函数\nHAL_StatusTypeDef HAL_CAN_ConfigFilter(\n    CAN_HandleTypeDef *hcan, \n    CAN_FilterTypeDef *sFilterConfig\n    );\n```\n\n具体的使用和结构体的定义随后再讲，我们只需要对这个结构体和函数有一个**大概的印象**即可\n\n### 发送接收报文\n\n首先是**发送**\n\n我预期使用一块主控与四个电机通信，那么在发送报文时，就需要指定**发送给哪一个电机**，以及**其他一些信息**，比如发送`信息的长度`，`信息的类型`，`信息ID类型`等等，HAL把这些发送需要的信息定义成了一个结构体 `CAN_TxHeaderTypeDef`,我们只需要为每一个电机声明一个 CAN_TxHeaderTypeDef 结构体，再确定好发送的数据内容，就可以将数据发送到指定的电机中\n\n我们回想一下，在设置接收中断时，是不是提到了**邮箱**的概念？**STM32F407IGHx**为我们提供了三个**发送邮箱**，在发送时，需要指定使用哪一个邮箱\n\nHAL库理所应当地帮我们写好了发送的函数，只要传入`can的句柄`，`报文头结构体`，`数据信息`和`邮箱编号`即可\n\n```cpp\n// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h\n\n// 发送函数的声明\nHAL_StatusTypeDef HAL_CAN_AddTxMessage(\n    CAN_HandleTypeDef *hcan, \n    CAN_TxHeaderTypeDef *pHeader, \n    uint8_t aData[], \n    uint32_t *pTxMailbox\n    )；\n\n// 邮箱编号的定义\n#define CAN_TX_MAILBOX0             (0x00000001U)  /*!< Tx Mailbox 0  */\n#define CAN_TX_MAILBOX1             (0x00000002U)  /*!< Tx Mailbox 1  */\n#define CAN_TX_MAILBOX2             (0x00000004U)  /*!< Tx Mailbox 2  */\n```\n在实际使用中，我们可以对邮箱进行轮询，使用**空闲的那一个邮箱**\n\n然后是**接收**\n\n总线上的报文在经过了我们设置的**过滤器**后，正确的报文会**触发**我们设置的**中断**，我们便可以在中断的**回调函数**中对收到的数据进行处理了\n\n我们只需要找到HAL库为我们提供的中断函数，对其进行覆写即可\n\n```cpp\n// 这是一种使用情况\n\n// 回调函数\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n\tif(hcan->Instance ==CAN1)\n\t{\n\t  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, date_CAN1); \n\t  return ;\n\t}\n}\n\n// 这个函数可以从报文中分离出我们想要的信息\nHAL_StatusTypeDef HAL_CAN_GetRxMessage(\n    CAN_HandleTypeDef *hcan,            // can句柄\n    uint32_t RxFifo,                    // 接收邮箱编号\n    CAN_RxHeaderTypeDef *pHeader,       // 接收报文头\n    uint8_t aData[]                     // 数据\n    )；\n\n// 接收邮箱编号的定义\n#define CAN_RX_FIFO0                (0x00000000U)  /*!< CAN receive FIFO 0 */\n#define CAN_RX_FIFO1                (0x00000001U)  /*!< CAN receive FIFO 1 */\n```\n\n现在我们配置过滤器和发送接收这两个流程应该是有了一个**大概的认知**，来做一个简单的测试吧\n\n将运行模式设置为**回环发送**，我们就可以收到自己发送的报文，前提是能通过邮箱过滤，其他配置依照上文即可\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/9662f70acc644e3897a03f64c5d34d2b.png\n    width=80% \n    />\n</center>\n\n记得重新生成代码\n\n然后我们写一个过滤器的配置\n\n```cpp\nvoid can_filter_init()\n{\n    CAN_FilterTypeDef filter;\n\n    // 报文头结构体的赋值\n    // 此处配置为接收全部报文，以便于测试\n    filter.FilterActivation     = ENABLE;                   // 启用过滤器\n    filter.FilterBank           = 0;                        // 过滤器编码\n    filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // 掩码模式\n    filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // 32位宽\n    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // 配置邮箱0\n    filter.FilterIdHigh         = 0x0000;                   // 高位0\n    filter.FilterIdLow          = 0x0000;                   // 低位0\n    filter.FilterMaskIdHigh     = 0x0000;                   // 掩码高位不检测\n    filter.FilterMaskIdLow      = 0x0000;                   // 掩码低位不检测\n\n    // 将配置加载进CAN 1中\n    HAL_CAN_ConfigFilter(&hcan1, &filter);\n}\n```\n\n初始化CAN\n\n```cpp\nvoid can_init()\n{\n    can_filter_init();                                                  // 过滤器\n    HAL_CAN_Start(&hcan1);                                              // 开启CAN通讯\n    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  // 开启接收中断\n}\n```\n\n声明一些必要的变量\n\n```cpp\nuint8_t can_1_rx[8];    // 接收数据\nuint8_t can_1_tx[8];    // 发送数据\n\nCAN_RxHeaderTypeDef can_1_rx_header;    // 接收报文头\nCAN_TxHeaderTypeDef can_1_tx_header;    // 发送报文头\n\nuint32_t mail_tx = CAN_TX_MAILBOX0;     // 发送邮箱编号\n```\n\n初始化一些参数\n\n```cpp\n// 随便创建一种发送报文头结构体\ncan_1_tx_header.StdId              = 0x00000000;\ncan_1_tx_header.ExtId              = 0x12345000;\ncan_1_tx_header.IDE                = CAN_ID_EXT;\ncan_1_tx_header.RTR                = CAN_RTR_DATA;\ncan_1_tx_header.DLC                = 8;\ncan_1_tx_header.TransmitGlobalTime = DISABLE;\n\n// 初始化一些发送的数据\ncan_1_tx[0] = 1;\n\n// 要使用的灯记得开启，根据自己的板子写即可\nHAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);\n// 刚才写的初始化函数用上\ncan_init();\n```\n\n回调函数的覆写\n\n```cpp\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n    if (hcan->Instance == CAN1) {\n        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_1_rx_header, can_1_rx);\n\n        // 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯\n        // 根据自己的板子替换一下点灯的函数\n        if(can_1_rx[0] == 0)\n        {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000);\n        }\n        else if(can_1_rx[0] == 1)\n        {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 0);\n        }\n\n        return;\n    }\n}\n```\n\n在主循环中不断发送报文\n\n```cpp\nHAL_CAN_AddTxMessage(&hcan1, &can_1_tx_header, can_1_tx, &mail_tx);\n```\n\n这是 main.c ，注意根据自己使用的板子情况**进行修改**\n\n```cpp\n/* USER CODE BEGIN Header */\n/**\n ******************************************************************************\n * @file           : main.c\n * @brief          : Main program body\n ******************************************************************************\n * @attention\n *\n * Copyright (c) 2024 STMicroelectronics.\n * All rights reserved.\n *\n * This software is licensed under terms that can be found in the LICENSE file\n * in the root directory of this software component.\n * If no LICENSE file comes with this software, it is provided AS-IS.\n *\n ******************************************************************************\n */\n/* USER CODE END Header */\n/* Includes ------------------------------------------------------------------*/\n#include \"main.h\"\n#include \"can.h\"\n#include \"tim.h\"\n#include \"gpio.h\"\n\n/* Private includes ----------------------------------------------------------*/\n/* USER CODE BEGIN Includes */\n\n/* USER CODE END Includes */\n\n/* Private typedef -----------------------------------------------------------*/\n/* USER CODE BEGIN PTD */\n\n/* USER CODE END PTD */\n\n/* Private define ------------------------------------------------------------*/\n/* USER CODE BEGIN PD */\n\n/* USER CODE END PD */\n\n/* Private macro -------------------------------------------------------------*/\n/* USER CODE BEGIN PM */\n\n/* USER CODE END PM */\n\n/* Private variables ---------------------------------------------------------*/\n\n/* USER CODE BEGIN PV */\n\nuint8_t can_1_rx[8]; // 接收数据\nuint8_t can_1_tx[8]; // 发送数据\n\nCAN_RxHeaderTypeDef can_1_rx_header; // 接收保报文头\nCAN_TxHeaderTypeDef can_1_tx_header; // 发送报文头\n\nuint32_t mail_tx = CAN_TX_MAILBOX0; // 发送邮箱编号\n\n/* USER CODE END PV */\n\n/* Private function prototypes -----------------------------------------------*/\nvoid SystemClock_Config(void);\n/* USER CODE BEGIN PFP */\n\nvoid can_filter_init();\nvoid can_init();\n\n/* USER CODE END PFP */\n\n/* Private user code ---------------------------------------------------------*/\n/* USER CODE BEGIN 0 */\n\nvoid can_filter_init()\n{\n    CAN_FilterTypeDef filter;\n\n    // 报文头结构体的赋值\n    // 此处配置为接收全部报文，以便于测试\n    filter.FilterActivation     = ENABLE;                // 启用过滤器\n    filter.FilterBank           = 0;                     // 过滤器编码\n    filter.FilterMode           = CAN_FILTERMODE_IDMASK; // 掩码模式\n    filter.FilterScale          = CAN_FILTERSCALE_32BIT; // 32位宽\n    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // 配置邮箱0\n    filter.FilterIdHigh         = 0x0000;                // 高位0\n    filter.FilterIdLow          = 0x0000;                // 低位0\n    filter.FilterMaskIdHigh     = 0x0000;                // 掩码高位不检测\n    filter.FilterMaskIdLow      = 0x0000;                // 掩码低位不检测\n\n    // 将配置加载进CAN 1中\n    HAL_CAN_ConfigFilter(&hcan1, &filter);\n}\n\nvoid can_init()\n{\n    can_filter_init();                                                 // 过滤器\n    HAL_CAN_Start(&hcan1);                                             // 开启CAN通讯\n    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // 开启接收中断\n}\n\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n    if (hcan->Instance == CAN1) {\n        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_1_rx_header, can_1_rx);\n\n        // 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯\n        // 根据自己的板子替换一下点灯的函数\n        if (can_1_rx[0] == 0) {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000);\n        } else if (can_1_rx[0] == 1) {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 0);\n        }\n\n        return;\n    }\n}\n\n/* USER CODE END 0 */\n\n/**\n * @brief  The application entry point.\n * @retval int\n */\nint main(void)\n{\n    /* USER CODE BEGIN 1 */\n\n    /* USER CODE END 1 */\n\n    /* MCU Configuration--------------------------------------------------------*/\n\n    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n    HAL_Init();\n\n    /* USER CODE BEGIN Init */\n\n    /* USER CODE END Init */\n\n    /* Configure the system clock */\n    SystemClock_Config();\n\n    /* USER CODE BEGIN SysInit */\n\n    /* USER CODE END SysInit */\n\n    /* Initialize all configured peripherals */\n    MX_GPIO_Init();\n    MX_TIM4_Init();\n    MX_TIM5_Init();\n    MX_CAN1_Init();\n    /* USER CODE BEGIN 2 */\n\n    // 随便创建一种发送报文头结构体\n    can_1_tx_header.StdId              = 0x00000000;\n    can_1_tx_header.ExtId              = 0x12345000;\n    can_1_tx_header.IDE                = CAN_ID_EXT;\n    can_1_tx_header.RTR                = CAN_RTR_DATA;\n    can_1_tx_header.DLC                = 8;\n    can_1_tx_header.TransmitGlobalTime = DISABLE;\n\n    can_1_tx[0] = 1;\n\n    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);\n    can_init();\n\n    /* USER CODE END 2 */\n\n    /* Infinite loop */\n    /* USER CODE BEGIN WHILE */\n    while (1) {\n\n        HAL_CAN_AddTxMessage(&hcan1, &can_1_tx_header, can_1_tx, &mail_tx);\n\n        /* USER CODE END WHILE */\n\n        /* USER CODE BEGIN 3 */\n    }\n    /* USER CODE END 3 */\n}\n\n/**\n * @brief System Clock Configuration\n * @retval None\n */\nvoid SystemClock_Config(void)\n{\n    RCC_OscInitTypeDef RCC_OscInitStruct = {0};\n    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};\n\n    /** Configure the main internal regulator output voltage\n     */\n    __HAL_RCC_PWR_CLK_ENABLE();\n    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);\n\n    /** Initializes the RCC Oscillators according to the specified parameters\n     * in the RCC_OscInitTypeDef structure.\n     */\n    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;\n    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;\n    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;\n    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;\n    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;\n    RCC_OscInitStruct.PLL.PLLM            = 8;\n    RCC_OscInitStruct.PLL.PLLN            = 168;\n    RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;\n    RCC_OscInitStruct.PLL.PLLQ            = 4;\n    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {\n        Error_Handler();\n    }\n\n    /** Initializes the CPU, AHB and APB buses clocks\n     */\n    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;\n    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;\n    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;\n    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;\n\n    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {\n        Error_Handler();\n    }\n}\n\n/* USER CODE BEGIN 4 */\n\n/* USER CODE END 4 */\n\n/**\n * @brief  This function is executed in case of error occurrence.\n * @retval None\n */\nvoid Error_Handler(void)\n{\n    /* USER CODE BEGIN Error_Handler_Debug */\n    /* User can add his own implementation to report the HAL error return state */\n    __disable_irq();\n    while (1) {\n    }\n    /* USER CODE END Error_Handler_Debug */\n}\n\n#ifdef USE_FULL_ASSERT\n/**\n * @brief  Reports the name of the source file and the source line number\n *         where the assert_param error has occurred.\n * @param  file: pointer to the source file name\n * @param  line: assert_param error line source number\n * @retval None\n */\nvoid assert_failed(uint8_t *file, uint32_t line)\n{\n    /* USER CODE BEGIN 6 */\n    /* User can add his own implementation to report the file name and line number,\n       ex: printf(\"Wrong parameters value: file %s on line %d\\r\\n\", file, line) */\n    /* USER CODE END 6 */\n}\n#endif /* USE_FULL_ASSERT */\n\n```\n\n在ozone中查看参数，并实时修改发送数据的数值，发现接收数据也会实时修改，板载灯反馈正常\n\n若不能使用ozone，也可以在代码中修改发送的数值，重新烧录，查看板载灯的情况\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/b9f8c4761d6f417087f7213b0a7d41ca.png\n    width=60% \n    />\n</center>\n\n回环测试正常，我们可以进行下一步的了解\n\n## CAN的熟练掌握\n\n在囫囵吞枣地走通过一遍流程后，我们遇到很很多**复杂的模式和结构体**，这些需要根据实际情况来酌情配置","updated":"2024-05-28T16:26:13.248Z","path":"can-tutorial/index.html","comments":1,"layout":"page","_id":"clx6hajmk0015i9605xunbs1x","content":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>现在是2024年1月18号晚上零点半，电路工数等困难科目已经考完，只是剩一门马原</p>\n<p>临近寒假的这一段时间颇为闲暇，于是在工作室寻得一些 <strong>M2006无刷电机</strong>和 <strong>C610电调</strong> ，加上手头上的 <strong>C板</strong>，试着组一台个人未来比赛用的四驱底盘</p>\n<p>依据大疆资料来看，电调需要使用CAN通信来控制，正中知识盲区，于是放下手中的马原教材（其实根本没有拿起来过），学习一下CAN</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><ul>\n<li>STM32CubeMX的使用</li>\n<li>一定的C语言使用经验</li>\n</ul>\n<h3 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h3><ul>\n<li>代码生成 <code>STM32CubeMX</code></li>\n<li>编译工具 <code>arm-none-eabi工具链</code></li>\n<li>编写环境 <code>VSCode</code>+<code>Embedded IDE</code></li>\n<li>调试工具 <code>Ozone</code></li>\n</ul>\n<h3 id=\"硬件环境\"><a href=\"#硬件环境\" class=\"headerlink\" title=\"硬件环境\"></a>硬件环境</h3><ul>\n<li>主控芯片 <code>大疆C板-STM32F407IG</code></li>\n<li>烧录工具 <code>JLink</code></li>\n<li>通讯目标 <code>C610电调</code></li>\n</ul>\n<h2 id=\"CAN的初印象\"><a href=\"#CAN的初印象\" class=\"headerlink\" title=\"CAN的初印象\"></a>CAN的初印象</h2><h3 id=\"何为CAN？\"><a href=\"#何为CAN？\" class=\"headerlink\" title=\"何为CAN？\"></a>何为CAN？</h3><p>在查阅了很多资料后，我提取了几个关键词：<code>总线结构</code>，<code>串行通讯</code>，<code>标准协议</code>，只需要两条线，即可解决沿途中设备的通信需求，例如，使用一块主控板加上CAN总线就可以很轻松的控制多个电机，极大缓解了布线带给我们的<code>焦虑</code></p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/0334eb74241d49979182c2ec0562302b.jpeg \n    width=80% \n    />\n</center>\n<center>\n布线地狱\n</center>\n</br>\n\n<p>至于书面，准确，乃至于繁缛的官方定义，我便不写入文章里，百度看看就好</p>\n<h3 id=\"CAN的硬件组成\"><a href=\"#CAN的硬件组成\" class=\"headerlink\" title=\"CAN的硬件组成\"></a>CAN的硬件组成</h3><p>我们可以称一个通讯单元为<strong>节点</strong>，一个节点一般有三个部分：<strong>微控制器</strong>， <strong>CAN控制器</strong>，<strong>CAN收发器</strong>，总线两端须串上120Ω的电阻，以模拟无限远传输线的特性阻抗，通过开关等手段来选择是否使用这个电阻</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/fc40ed4d25ce4e14b155bb0b385efd73.png\n    width=80% \n    />\n</center>\n<center>\nCAN总线结构\n</center>\n</br>\n\n<p>STM32芯片会自带CAN外设拓展，名为<strong>bxCAN</strong> <code>(Basic Extended CAN  - 基本拓展CAN)</code>，详细内容此处不展开</p>\n<h2 id=\"CAN通信初试\"><a href=\"#CAN通信初试\" class=\"headerlink\" title=\"CAN通信初试\"></a>CAN通信初试</h2><p>姑且暂停理论部分的讲解，<strong>繁杂的原理</strong>总是令人头大，使人望而却步，我们先<strong>启动</strong>开发软件，走通一个通讯的流程，再来细细分析其中的缘由，或者跳过理论，只掌握软件层的流程也是可以的</p>\n<p>基本步骤：<code>配置STM32CubeMX</code> &gt; <code>配置CAN过滤器</code> &gt; <code>发送接收报文</code></p>\n<h3 id=\"配置STM32CubeMX\"><a href=\"#配置STM32CubeMX\" class=\"headerlink\" title=\"配置STM32CubeMX\"></a>配置STM32CubeMX</h3><p>启动CubeMX，选好芯片类型创建项目，首先把<strong>常规设置</strong>搞定</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/5c952ce9d3e74729bef9badd88baf38f.png\n    width=80% \n    />\n</center>\n<center>\nRCC设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/14c833c93c1a4343911d8267e5a1948c.png\n    width=80% \n    />\n</center>\n<center>\nSWD设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/62a9fa51e5ad40258de9884d6d7edf0d.png\n    width=80% \n    />\n</center>\n<center>\n时钟设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/5ce51f07fb40420098f0e63340972fea.png\n    width=80% \n    />\n</center>\n<center>\n.c文件和.h文件分开生成\n</center>\n</br>\n\n<p>项目管理类型之类的根据<strong>自己使用的开发环境</strong>来设置即可</p>\n<p>简单写一个点灯测试一下</p>\n<p>这是板载灯的连线</p>\n<ul>\n<li><code>TIM5_CH1</code> - <code>LED_BLUE</code></li>\n<li><code>TIM5_CH2</code> - <code>LED_GREEN</code></li>\n<li><code>TIM5_CH3</code> - <code>LED_RED</code></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">breath_led</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_2, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_3, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">100</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_2, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_3, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将其放入主循环中运行，理所应当地成功了</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/1d9fc725662a4a28b4bf8b925585b0fc.jpeg\n    width=80% \n    />\n</center>\n<center>\n呼吸灯测试\n</center>\n</br>\n\n<p>现在开始配置<strong>CAN通信</strong></p>\n<p>CubeMX界面中，在<code>CAN1</code>的<strong>Parameter Settings</strong>我们可以看到</p>\n<ul>\n<li><strong>Bit Timings Parameters</strong> - 配置传输速度<ul>\n<li><strong>Prescaler (for Time Quantum)</strong> - 分频，调整TQ（Time Quantum）大小</li>\n<li>Time Quantum - 最小时间单位</li>\n<li><strong>Time Quanta in Bit Segment 1</strong> - 相位缓冲段1段占几个TQ</li>\n<li><strong>Time Quanta in Bit Segment 2</strong> - 相位缓冲段2段占几个TQ</li>\n<li>Time for one Bit</li>\n<li>Baud Rate - 波特率</li>\n<li><strong>ReSynchronization Jump Width</strong> - 再同步补偿宽度</li>\n</ul>\n</li>\n<li><strong>Basic Parameters</strong> - 基本参数<ul>\n<li>Time Triggered Communication Mode - 时间触发模式</li>\n<li>Automatic Bus-off Management - 自动离线管理</li>\n<li>Automatic Wake-Up Mode - 自动唤醒</li>\n<li>Automatic Retransmission - 自动重传</li>\n<li>Receive Fifo Locked Mode - 锁定模式</li>\n<li>Transmit Fifo Priority - 报文发送优先级</li>\n</ul>\n</li>\n<li><strong>Advanced Parameters</strong> - 高级参数<ul>\n<li><strong>Operating Mode</strong> -*运行模式：<code>正常模式</code> <code>静默模式</code> <code>回环模式</code> <code>回环静默模式</code></li>\n</ul>\n</li>\n</ul>\n<p>而 <strong>NVIC Interrupt Table</strong> 中有</p>\n<ul>\n<li>CAN1 TX interrupts</li>\n<li>CAN1 RX0 interrupts</li>\n<li>CAN1 RX1 interrupt</li>\n<li>CAN1 SCE interrupt</li>\n</ul>\n<p>这是我们初期需要关注的配置列表</p>\n<p><strong>1. 设置波特率</strong></p>\n<p>以我的需求为例，查阅大疆官方资料可以得知</p>\n<blockquote>\n<p>将 CAN 信号线连接到控制板接收 CAN 控制指令，CAN 总线比特率为 1Mbps。</p>\n</blockquote>\n<p>所以我们需要将CAN通讯的比特率 <code>baud rate</code> 设置为 <code>1000000 bit/s</code></p>\n<p>根据波特率计算公式 baud rate &#x3D; TQ * ( TBS1 + TBS2 + SJY) , 我们得到如下设置</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/bac1aba73d1040cfa061ecc028c35bfa.png\n    width=80% \n    />\n</center>\n<center>\nTQ * ( 11 + 2 + 1) = 1000ns\n</center>\n\n<p>根据实际情况计算一下即可，也可以多选几个选项，把正确的波特率尝试出来，<strong>灰色的选项</strong>就是CubeMX帮我们计算好的数值</p>\n<p><strong>2. 打开中断</strong></p>\n<p>处理电调发送的电机信息，需要中断来调用回调函数，于是打开<strong>接收中断</strong></p>\n<p>这里我使用的单片机中，CAN外设具有两个用于接收信息的<strong>邮箱</strong>，我们命其为 <code>FIFO0</code>和<code>FIFO0</code>，每个邮箱都有<strong>一个过滤器</strong>，用于筛选报文，可以存放<strong>三条报文</strong>，在<strong>中断设置</strong>中对应 <code>CAN1 RX0 interrupt</code>和<code>CAN1 RX1 interrupt</code>，我们打开需要使用的那一个就可以</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/f3a40ac4efe94be79b876c875cedbbf1.png\n    width=80% \n    />\n</center>\n\n<p>既然存在接收邮箱，相应的，就有<strong>发送邮箱</strong>，我们现在只要知道发送邮箱存在<strong>发送优先级</strong>且每个邮箱只能存放<strong>一条报文</strong></p>\n<p>现在，我们已经在CubeMX中配置好了CAN，下一步就是要配置<strong>CAN过滤器</strong></p>\n<h3 id=\"配置CAN过滤器\"><a href=\"#配置CAN过滤器\" class=\"headerlink\" title=\"配置CAN过滤器\"></a>配置CAN过滤器</h3><p>前面我们说到，STM32上有两个<strong>邮箱</strong>用于接收报文，为了接收我们想要的报文，我们需要配置一下过滤器，把不想接受的报文过滤掉，只放行想要的报文</p>\n<p>配置过滤器需要我们自己手写，并未提前生成，但HAL库提供了过滤器配置参数的结构体类型，我们只需要<strong>给这个结构体赋值</strong>，然后<strong>调用HAL提供的初始化函数</strong>即可完成配置</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 过滤器结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterIdHigh;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterIdLow;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMaskIdHigh;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMaskIdLow; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterFIFOAssignment; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterBank;        </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMode;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterScale;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterActivation; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> SlaveStartFilterBank; </span><br><span class=\"line\">&#125; CAN_FilterTypeDef;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置函数</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_ConfigFilter</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_FilterTypeDef *sFilterConfig</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>具体的使用和结构体的定义随后再讲，我们只需要对这个结构体和函数有一个<strong>大概的印象</strong>即可</p>\n<h3 id=\"发送接收报文\"><a href=\"#发送接收报文\" class=\"headerlink\" title=\"发送接收报文\"></a>发送接收报文</h3><p>首先是<strong>发送</strong></p>\n<p>我预期使用一块主控与四个电机通信，那么在发送报文时，就需要指定<strong>发送给哪一个电机</strong>，以及<strong>其他一些信息</strong>，比如发送<code>信息的长度</code>，<code>信息的类型</code>，<code>信息ID类型</code>等等，HAL把这些发送需要的信息定义成了一个结构体 <code>CAN_TxHeaderTypeDef</code>,我们只需要为每一个电机声明一个 CAN_TxHeaderTypeDef 结构体，再确定好发送的数据内容，就可以将数据发送到指定的电机中</p>\n<p>我们回想一下，在设置接收中断时，是不是提到了<strong>邮箱</strong>的概念？<strong>STM32F407IGHx</strong>为我们提供了三个<strong>发送邮箱</strong>，在发送时，需要指定使用哪一个邮箱</p>\n<p>HAL库理所应当地帮我们写好了发送的函数，只要传入<code>can的句柄</code>，<code>报文头结构体</code>，<code>数据信息</code>和<code>邮箱编号</code>即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送函数的声明</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_AddTxMessage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_TxHeaderTypeDef *pHeader, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint8_t</span> aData[], </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint32_t</span> *pTxMailbox</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span>；</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 邮箱编号的定义</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX0             (0x00000001U)  <span class=\"comment\">/*!&lt; Tx Mailbox 0  */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX1             (0x00000002U)  <span class=\"comment\">/*!&lt; Tx Mailbox 1  */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX2             (0x00000004U)  <span class=\"comment\">/*!&lt; Tx Mailbox 2  */</span></span></span></span><br></pre></td></tr></table></figure>\n<p>在实际使用中，我们可以对邮箱进行轮询，使用<strong>空闲的那一个邮箱</strong></p>\n<p>然后是<strong>接收</strong></p>\n<p>总线上的报文在经过了我们设置的<strong>过滤器</strong>后，正确的报文会<strong>触发</strong>我们设置的<strong>中断</strong>，我们便可以在中断的<strong>回调函数</strong>中对收到的数据进行处理了</p>\n<p>我们只需要找到HAL库为我们提供的中断函数，对其进行覆写即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一种使用情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(hcan-&gt;Instance ==CAN1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;RxHeader, date_CAN1); </span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个函数可以从报文中分离出我们想要的信息</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_GetRxMessage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan,            <span class=\"comment\">// can句柄</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint32_t</span> RxFifo,                    <span class=\"comment\">// 接收邮箱编号</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_RxHeaderTypeDef *pHeader,       <span class=\"comment\">// 接收报文头</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint8_t</span> aData[]                     <span class=\"comment\">// 数据</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span>；</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 接收邮箱编号的定义</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_RX_FIFO0                (0x00000000U)  <span class=\"comment\">/*!&lt; CAN receive FIFO 0 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_RX_FIFO1                (0x00000001U)  <span class=\"comment\">/*!&lt; CAN receive FIFO 1 */</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们配置过滤器和发送接收这两个流程应该是有了一个<strong>大概的认知</strong>，来做一个简单的测试吧</p>\n<p>将运行模式设置为<strong>回环发送</strong>，我们就可以收到自己发送的报文，前提是能通过邮箱过滤，其他配置依照上文即可</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/9662f70acc644e3897a03f64c5d34d2b.png\n    width=80% \n    />\n</center>\n\n<p>记得重新生成代码</p>\n<p>然后我们写一个过滤器的配置</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CAN_FilterTypeDef filter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 报文头结构体的赋值</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处配置为接收全部报文，以便于测试</span></span><br><span class=\"line\">    filter.FilterActivation     = ENABLE;                   <span class=\"comment\">// 启用过滤器</span></span><br><span class=\"line\">    filter.FilterBank           = <span class=\"number\">0</span>;                        <span class=\"comment\">// 过滤器编码</span></span><br><span class=\"line\">    filter.FilterMode           = CAN_FILTERMODE_IDMASK;    <span class=\"comment\">// 掩码模式</span></span><br><span class=\"line\">    filter.FilterScale          = CAN_FILTERSCALE_32BIT;    <span class=\"comment\">// 32位宽</span></span><br><span class=\"line\">    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         <span class=\"comment\">// 配置邮箱0</span></span><br><span class=\"line\">    filter.FilterIdHigh         = <span class=\"number\">0x0000</span>;                   <span class=\"comment\">// 高位0</span></span><br><span class=\"line\">    filter.FilterIdLow          = <span class=\"number\">0x0000</span>;                   <span class=\"comment\">// 低位0</span></span><br><span class=\"line\">    filter.FilterMaskIdHigh     = <span class=\"number\">0x0000</span>;                   <span class=\"comment\">// 掩码高位不检测</span></span><br><span class=\"line\">    filter.FilterMaskIdLow      = <span class=\"number\">0x0000</span>;                   <span class=\"comment\">// 掩码低位不检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将配置加载进CAN 1中</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ConfigFilter</span>(&amp;hcan1, &amp;filter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化CAN</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">can_filter_init</span>();                                                  <span class=\"comment\">// 过滤器</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_Start</span>(&amp;hcan1);                                              <span class=\"comment\">// 开启CAN通讯</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ActivateNotification</span>(&amp;hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  <span class=\"comment\">// 开启接收中断</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明一些必要的变量</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_rx[<span class=\"number\">8</span>];    <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_tx[<span class=\"number\">8</span>];    <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">CAN_RxHeaderTypeDef can_1_rx_header;    <span class=\"comment\">// 接收报文头</span></span><br><span class=\"line\">CAN_TxHeaderTypeDef can_1_tx_header;    <span class=\"comment\">// 发送报文头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> mail_tx = CAN_TX_MAILBOX0;     <span class=\"comment\">// 发送邮箱编号</span></span><br></pre></td></tr></table></figure>\n\n<p>初始化一些参数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 随便创建一种发送报文头结构体</span></span><br><span class=\"line\">can_1_tx_header.StdId              = <span class=\"number\">0x00000000</span>;</span><br><span class=\"line\">can_1_tx_header.ExtId              = <span class=\"number\">0x12345000</span>;</span><br><span class=\"line\">can_1_tx_header.IDE                = CAN_ID_EXT;</span><br><span class=\"line\">can_1_tx_header.RTR                = CAN_RTR_DATA;</span><br><span class=\"line\">can_1_tx_header.DLC                = <span class=\"number\">8</span>;</span><br><span class=\"line\">can_1_tx_header.TransmitGlobalTime = DISABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化一些发送的数据</span></span><br><span class=\"line\">can_1_tx[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 要使用的灯记得开启，根据自己的板子写即可</span></span><br><span class=\"line\"><span class=\"built_in\">HAL_TIM_PWM_Start</span>(&amp;htim5, TIM_CHANNEL_1);</span><br><span class=\"line\"><span class=\"comment\">// 刚才写的初始化函数用上</span></span><br><span class=\"line\"><span class=\"built_in\">can_init</span>();</span><br></pre></td></tr></table></figure>\n\n<p>回调函数的覆写</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hcan-&gt;Instance == CAN1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;can_1_rx_header, can_1_rx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据自己的板子替换一下点灯的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在主循环中不断发送报文</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">HAL_CAN_AddTxMessage</span>(&amp;hcan1, &amp;can_1_tx_header, can_1_tx, &amp;mail_tx);</span><br></pre></td></tr></table></figure>\n\n<p>这是 main.c ，注意根据自己使用的板子情况<strong>进行修改</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN Header */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * @file           : main.c</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief          : Main program body</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * @attention</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2024 STMicroelectronics.</span></span><br><span class=\"line\"><span class=\"comment\"> * All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This software is licensed under terms that can be found in the LICENSE file</span></span><br><span class=\"line\"><span class=\"comment\"> * in the root directory of this software component.</span></span><br><span class=\"line\"><span class=\"comment\"> * If no LICENSE file comes with this software, it is provided AS-IS.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END Header */</span></span><br><span class=\"line\"><span class=\"comment\">/* Includes ------------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;main.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;can.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tim.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;gpio.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private includes ----------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN Includes */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END Includes */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PTD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PTD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private define ------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private macro -------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PM */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PM */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private variables ---------------------------------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PV */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_rx[<span class=\"number\">8</span>]; <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_tx[<span class=\"number\">8</span>]; <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">CAN_RxHeaderTypeDef can_1_rx_header; <span class=\"comment\">// 接收保报文头</span></span><br><span class=\"line\">CAN_TxHeaderTypeDef can_1_tx_header; <span class=\"comment\">// 发送报文头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> mail_tx = CAN_TX_MAILBOX0; <span class=\"comment\">// 发送邮箱编号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PV */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SystemClock_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PFP */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PFP */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private user code ---------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CAN_FilterTypeDef filter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 报文头结构体的赋值</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处配置为接收全部报文，以便于测试</span></span><br><span class=\"line\">    filter.FilterActivation     = ENABLE;                <span class=\"comment\">// 启用过滤器</span></span><br><span class=\"line\">    filter.FilterBank           = <span class=\"number\">0</span>;                     <span class=\"comment\">// 过滤器编码</span></span><br><span class=\"line\">    filter.FilterMode           = CAN_FILTERMODE_IDMASK; <span class=\"comment\">// 掩码模式</span></span><br><span class=\"line\">    filter.FilterScale          = CAN_FILTERSCALE_32BIT; <span class=\"comment\">// 32位宽</span></span><br><span class=\"line\">    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      <span class=\"comment\">// 配置邮箱0</span></span><br><span class=\"line\">    filter.FilterIdHigh         = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 高位0</span></span><br><span class=\"line\">    filter.FilterIdLow          = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 低位0</span></span><br><span class=\"line\">    filter.FilterMaskIdHigh     = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码高位不检测</span></span><br><span class=\"line\">    filter.FilterMaskIdLow      = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码低位不检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将配置加载进CAN 1中</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ConfigFilter</span>(&amp;hcan1, &amp;filter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">can_filter_init</span>();                                                 <span class=\"comment\">// 过滤器</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_Start</span>(&amp;hcan1);                                             <span class=\"comment\">// 开启CAN通讯</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ActivateNotification</span>(&amp;hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); <span class=\"comment\">// 开启接收中断</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hcan-&gt;Instance == CAN1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;can_1_rx_header, can_1_rx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据自己的板子替换一下点灯的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  The application entry point.</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_Init</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN Init */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END Init */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Configure the system clock */</span></span><br><span class=\"line\">    <span class=\"built_in\">SystemClock_Config</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN SysInit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END SysInit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Initialize all configured peripherals */</span></span><br><span class=\"line\">    <span class=\"built_in\">MX_GPIO_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_TIM4_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_TIM5_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_CAN1_Init</span>();</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 随便创建一种发送报文头结构体</span></span><br><span class=\"line\">    can_1_tx_header.StdId              = <span class=\"number\">0x00000000</span>;</span><br><span class=\"line\">    can_1_tx_header.ExtId              = <span class=\"number\">0x12345000</span>;</span><br><span class=\"line\">    can_1_tx_header.IDE                = CAN_ID_EXT;</span><br><span class=\"line\">    can_1_tx_header.RTR                = CAN_RTR_DATA;</span><br><span class=\"line\">    can_1_tx_header.DLC                = <span class=\"number\">8</span>;</span><br><span class=\"line\">    can_1_tx_header.TransmitGlobalTime = DISABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">    can_1_tx[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">HAL_TIM_PWM_Start</span>(&amp;htim5, TIM_CHANNEL_1);</span><br><span class=\"line\">    <span class=\"built_in\">can_init</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Infinite loop */</span></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN WHILE */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_AddTxMessage</span>(&amp;hcan1, &amp;can_1_tx_header, can_1_tx, &amp;mail_tx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* USER CODE END WHILE */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* USER CODE BEGIN 3 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 3 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief System Clock Configuration</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SystemClock_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Configure the main internal regulator output voltage</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    __HAL_RCC_PWR_CLK_ENABLE();</span><br><span class=\"line\">    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initializes the RCC Oscillators according to the specified parameters</span></span><br><span class=\"line\"><span class=\"comment\">     * in the RCC_OscInitTypeDef structure.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;</span><br><span class=\"line\">    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;</span><br><span class=\"line\">    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLM            = <span class=\"number\">8</span>;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLN            = <span class=\"number\">168</span>;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLQ            = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_RCC_OscConfig</span>(&amp;RCC_OscInitStruct) != HAL_OK) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initializes the CPU, AHB and APB buses clocks</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;</span><br><span class=\"line\">    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class=\"line\">    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;</span><br><span class=\"line\">    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;</span><br><span class=\"line\">    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_RCC_ClockConfig</span>(&amp;RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 4 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 4 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  This function is executed in case of error occurrence.</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Error_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN Error_Handler_Debug */</span></span><br><span class=\"line\">    <span class=\"comment\">/* User can add his own implementation to report the HAL error return state */</span></span><br><span class=\"line\">    __disable_irq();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END Error_Handler_Debug */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> USE_FULL_ASSERT</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  Reports the name of the source file and the source line number</span></span><br><span class=\"line\"><span class=\"comment\"> *         where the assert_param error has occurred.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  file: pointer to the source file name</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  line: assert_param error line source number</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">assert_failed</span><span class=\"params\">(<span class=\"type\">uint8_t</span> *file, <span class=\"type\">uint32_t</span> line)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 6 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* User can add his own implementation to report the file name and line number,</span></span><br><span class=\"line\"><span class=\"comment\">       ex: printf(&quot;Wrong parameters value: file %s on line %d\\r\\n&quot;, file, line) */</span></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 6 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* USE_FULL_ASSERT */</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在ozone中查看参数，并实时修改发送数据的数值，发现接收数据也会实时修改，板载灯反馈正常</p>\n<p>若不能使用ozone，也可以在代码中修改发送的数值，重新烧录，查看板载灯的情况</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/b9f8c4761d6f417087f7213b0a7d41ca.png\n    width=60% \n    />\n</center>\n\n<p>回环测试正常，我们可以进行下一步的了解</p>\n<h2 id=\"CAN的熟练掌握\"><a href=\"#CAN的熟练掌握\" class=\"headerlink\" title=\"CAN的熟练掌握\"></a>CAN的熟练掌握</h2><p>在囫囵吞枣地走通过一遍流程后，我们遇到很很多<strong>复杂的模式和结构体</strong>，这些需要根据实际情况来酌情配置</p>\n","excerpt":"","more":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>现在是2024年1月18号晚上零点半，电路工数等困难科目已经考完，只是剩一门马原</p>\n<p>临近寒假的这一段时间颇为闲暇，于是在工作室寻得一些 <strong>M2006无刷电机</strong>和 <strong>C610电调</strong> ，加上手头上的 <strong>C板</strong>，试着组一台个人未来比赛用的四驱底盘</p>\n<p>依据大疆资料来看，电调需要使用CAN通信来控制，正中知识盲区，于是放下手中的马原教材（其实根本没有拿起来过），学习一下CAN</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><ul>\n<li>STM32CubeMX的使用</li>\n<li>一定的C语言使用经验</li>\n</ul>\n<h3 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h3><ul>\n<li>代码生成 <code>STM32CubeMX</code></li>\n<li>编译工具 <code>arm-none-eabi工具链</code></li>\n<li>编写环境 <code>VSCode</code>+<code>Embedded IDE</code></li>\n<li>调试工具 <code>Ozone</code></li>\n</ul>\n<h3 id=\"硬件环境\"><a href=\"#硬件环境\" class=\"headerlink\" title=\"硬件环境\"></a>硬件环境</h3><ul>\n<li>主控芯片 <code>大疆C板-STM32F407IG</code></li>\n<li>烧录工具 <code>JLink</code></li>\n<li>通讯目标 <code>C610电调</code></li>\n</ul>\n<h2 id=\"CAN的初印象\"><a href=\"#CAN的初印象\" class=\"headerlink\" title=\"CAN的初印象\"></a>CAN的初印象</h2><h3 id=\"何为CAN？\"><a href=\"#何为CAN？\" class=\"headerlink\" title=\"何为CAN？\"></a>何为CAN？</h3><p>在查阅了很多资料后，我提取了几个关键词：<code>总线结构</code>，<code>串行通讯</code>，<code>标准协议</code>，只需要两条线，即可解决沿途中设备的通信需求，例如，使用一块主控板加上CAN总线就可以很轻松的控制多个电机，极大缓解了布线带给我们的<code>焦虑</code></p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/0334eb74241d49979182c2ec0562302b.jpeg \n    width=80% \n    />\n</center>\n<center>\n布线地狱\n</center>\n</br>\n\n<p>至于书面，准确，乃至于繁缛的官方定义，我便不写入文章里，百度看看就好</p>\n<h3 id=\"CAN的硬件组成\"><a href=\"#CAN的硬件组成\" class=\"headerlink\" title=\"CAN的硬件组成\"></a>CAN的硬件组成</h3><p>我们可以称一个通讯单元为<strong>节点</strong>，一个节点一般有三个部分：<strong>微控制器</strong>， <strong>CAN控制器</strong>，<strong>CAN收发器</strong>，总线两端须串上120Ω的电阻，以模拟无限远传输线的特性阻抗，通过开关等手段来选择是否使用这个电阻</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/fc40ed4d25ce4e14b155bb0b385efd73.png\n    width=80% \n    />\n</center>\n<center>\nCAN总线结构\n</center>\n</br>\n\n<p>STM32芯片会自带CAN外设拓展，名为<strong>bxCAN</strong> <code>(Basic Extended CAN  - 基本拓展CAN)</code>，详细内容此处不展开</p>\n<h2 id=\"CAN通信初试\"><a href=\"#CAN通信初试\" class=\"headerlink\" title=\"CAN通信初试\"></a>CAN通信初试</h2><p>姑且暂停理论部分的讲解，<strong>繁杂的原理</strong>总是令人头大，使人望而却步，我们先<strong>启动</strong>开发软件，走通一个通讯的流程，再来细细分析其中的缘由，或者跳过理论，只掌握软件层的流程也是可以的</p>\n<p>基本步骤：<code>配置STM32CubeMX</code> &gt; <code>配置CAN过滤器</code> &gt; <code>发送接收报文</code></p>\n<h3 id=\"配置STM32CubeMX\"><a href=\"#配置STM32CubeMX\" class=\"headerlink\" title=\"配置STM32CubeMX\"></a>配置STM32CubeMX</h3><p>启动CubeMX，选好芯片类型创建项目，首先把<strong>常规设置</strong>搞定</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/5c952ce9d3e74729bef9badd88baf38f.png\n    width=80% \n    />\n</center>\n<center>\nRCC设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/14c833c93c1a4343911d8267e5a1948c.png\n    width=80% \n    />\n</center>\n<center>\nSWD设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/62a9fa51e5ad40258de9884d6d7edf0d.png\n    width=80% \n    />\n</center>\n<center>\n时钟设置\n</center>\n</br>\n\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/5ce51f07fb40420098f0e63340972fea.png\n    width=80% \n    />\n</center>\n<center>\n.c文件和.h文件分开生成\n</center>\n</br>\n\n<p>项目管理类型之类的根据<strong>自己使用的开发环境</strong>来设置即可</p>\n<p>简单写一个点灯测试一下</p>\n<p>这是板载灯的连线</p>\n<ul>\n<li><code>TIM5_CH1</code> - <code>LED_BLUE</code></li>\n<li><code>TIM5_CH2</code> - <code>LED_GREEN</code></li>\n<li><code>TIM5_CH3</code> - <code>LED_RED</code></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">breath_led</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_2, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_3, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">100</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_2, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_3, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将其放入主循环中运行，理所应当地成功了</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/1d9fc725662a4a28b4bf8b925585b0fc.jpeg\n    width=80% \n    />\n</center>\n<center>\n呼吸灯测试\n</center>\n</br>\n\n<p>现在开始配置<strong>CAN通信</strong></p>\n<p>CubeMX界面中，在<code>CAN1</code>的<strong>Parameter Settings</strong>我们可以看到</p>\n<ul>\n<li><strong>Bit Timings Parameters</strong> - 配置传输速度<ul>\n<li><strong>Prescaler (for Time Quantum)</strong> - 分频，调整TQ（Time Quantum）大小</li>\n<li>Time Quantum - 最小时间单位</li>\n<li><strong>Time Quanta in Bit Segment 1</strong> - 相位缓冲段1段占几个TQ</li>\n<li><strong>Time Quanta in Bit Segment 2</strong> - 相位缓冲段2段占几个TQ</li>\n<li>Time for one Bit</li>\n<li>Baud Rate - 波特率</li>\n<li><strong>ReSynchronization Jump Width</strong> - 再同步补偿宽度</li>\n</ul>\n</li>\n<li><strong>Basic Parameters</strong> - 基本参数<ul>\n<li>Time Triggered Communication Mode - 时间触发模式</li>\n<li>Automatic Bus-off Management - 自动离线管理</li>\n<li>Automatic Wake-Up Mode - 自动唤醒</li>\n<li>Automatic Retransmission - 自动重传</li>\n<li>Receive Fifo Locked Mode - 锁定模式</li>\n<li>Transmit Fifo Priority - 报文发送优先级</li>\n</ul>\n</li>\n<li><strong>Advanced Parameters</strong> - 高级参数<ul>\n<li><strong>Operating Mode</strong> -*运行模式：<code>正常模式</code> <code>静默模式</code> <code>回环模式</code> <code>回环静默模式</code></li>\n</ul>\n</li>\n</ul>\n<p>而 <strong>NVIC Interrupt Table</strong> 中有</p>\n<ul>\n<li>CAN1 TX interrupts</li>\n<li>CAN1 RX0 interrupts</li>\n<li>CAN1 RX1 interrupt</li>\n<li>CAN1 SCE interrupt</li>\n</ul>\n<p>这是我们初期需要关注的配置列表</p>\n<p><strong>1. 设置波特率</strong></p>\n<p>以我的需求为例，查阅大疆官方资料可以得知</p>\n<blockquote>\n<p>将 CAN 信号线连接到控制板接收 CAN 控制指令，CAN 总线比特率为 1Mbps。</p>\n</blockquote>\n<p>所以我们需要将CAN通讯的比特率 <code>baud rate</code> 设置为 <code>1000000 bit/s</code></p>\n<p>根据波特率计算公式 baud rate &#x3D; TQ * ( TBS1 + TBS2 + SJY) , 我们得到如下设置</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/bac1aba73d1040cfa061ecc028c35bfa.png\n    width=80% \n    />\n</center>\n<center>\nTQ * ( 11 + 2 + 1) = 1000ns\n</center>\n\n<p>根据实际情况计算一下即可，也可以多选几个选项，把正确的波特率尝试出来，<strong>灰色的选项</strong>就是CubeMX帮我们计算好的数值</p>\n<p><strong>2. 打开中断</strong></p>\n<p>处理电调发送的电机信息，需要中断来调用回调函数，于是打开<strong>接收中断</strong></p>\n<p>这里我使用的单片机中，CAN外设具有两个用于接收信息的<strong>邮箱</strong>，我们命其为 <code>FIFO0</code>和<code>FIFO0</code>，每个邮箱都有<strong>一个过滤器</strong>，用于筛选报文，可以存放<strong>三条报文</strong>，在<strong>中断设置</strong>中对应 <code>CAN1 RX0 interrupt</code>和<code>CAN1 RX1 interrupt</code>，我们打开需要使用的那一个就可以</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/f3a40ac4efe94be79b876c875cedbbf1.png\n    width=80% \n    />\n</center>\n\n<p>既然存在接收邮箱，相应的，就有<strong>发送邮箱</strong>，我们现在只要知道发送邮箱存在<strong>发送优先级</strong>且每个邮箱只能存放<strong>一条报文</strong></p>\n<p>现在，我们已经在CubeMX中配置好了CAN，下一步就是要配置<strong>CAN过滤器</strong></p>\n<h3 id=\"配置CAN过滤器\"><a href=\"#配置CAN过滤器\" class=\"headerlink\" title=\"配置CAN过滤器\"></a>配置CAN过滤器</h3><p>前面我们说到，STM32上有两个<strong>邮箱</strong>用于接收报文，为了接收我们想要的报文，我们需要配置一下过滤器，把不想接受的报文过滤掉，只放行想要的报文</p>\n<p>配置过滤器需要我们自己手写，并未提前生成，但HAL库提供了过滤器配置参数的结构体类型，我们只需要<strong>给这个结构体赋值</strong>，然后<strong>调用HAL提供的初始化函数</strong>即可完成配置</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 过滤器结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterIdHigh;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterIdLow;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMaskIdHigh;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMaskIdLow; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterFIFOAssignment; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterBank;        </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMode;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterScale;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterActivation; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> SlaveStartFilterBank; </span><br><span class=\"line\">&#125; CAN_FilterTypeDef;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置函数</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_ConfigFilter</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_FilterTypeDef *sFilterConfig</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>具体的使用和结构体的定义随后再讲，我们只需要对这个结构体和函数有一个<strong>大概的印象</strong>即可</p>\n<h3 id=\"发送接收报文\"><a href=\"#发送接收报文\" class=\"headerlink\" title=\"发送接收报文\"></a>发送接收报文</h3><p>首先是<strong>发送</strong></p>\n<p>我预期使用一块主控与四个电机通信，那么在发送报文时，就需要指定<strong>发送给哪一个电机</strong>，以及<strong>其他一些信息</strong>，比如发送<code>信息的长度</code>，<code>信息的类型</code>，<code>信息ID类型</code>等等，HAL把这些发送需要的信息定义成了一个结构体 <code>CAN_TxHeaderTypeDef</code>,我们只需要为每一个电机声明一个 CAN_TxHeaderTypeDef 结构体，再确定好发送的数据内容，就可以将数据发送到指定的电机中</p>\n<p>我们回想一下，在设置接收中断时，是不是提到了<strong>邮箱</strong>的概念？<strong>STM32F407IGHx</strong>为我们提供了三个<strong>发送邮箱</strong>，在发送时，需要指定使用哪一个邮箱</p>\n<p>HAL库理所应当地帮我们写好了发送的函数，只要传入<code>can的句柄</code>，<code>报文头结构体</code>，<code>数据信息</code>和<code>邮箱编号</code>即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送函数的声明</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_AddTxMessage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_TxHeaderTypeDef *pHeader, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint8_t</span> aData[], </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint32_t</span> *pTxMailbox</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span>；</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 邮箱编号的定义</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX0             (0x00000001U)  <span class=\"comment\">/*!&lt; Tx Mailbox 0  */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX1             (0x00000002U)  <span class=\"comment\">/*!&lt; Tx Mailbox 1  */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX2             (0x00000004U)  <span class=\"comment\">/*!&lt; Tx Mailbox 2  */</span></span></span></span><br></pre></td></tr></table></figure>\n<p>在实际使用中，我们可以对邮箱进行轮询，使用<strong>空闲的那一个邮箱</strong></p>\n<p>然后是<strong>接收</strong></p>\n<p>总线上的报文在经过了我们设置的<strong>过滤器</strong>后，正确的报文会<strong>触发</strong>我们设置的<strong>中断</strong>，我们便可以在中断的<strong>回调函数</strong>中对收到的数据进行处理了</p>\n<p>我们只需要找到HAL库为我们提供的中断函数，对其进行覆写即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一种使用情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(hcan-&gt;Instance ==CAN1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;RxHeader, date_CAN1); </span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个函数可以从报文中分离出我们想要的信息</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_GetRxMessage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan,            <span class=\"comment\">// can句柄</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint32_t</span> RxFifo,                    <span class=\"comment\">// 接收邮箱编号</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_RxHeaderTypeDef *pHeader,       <span class=\"comment\">// 接收报文头</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint8_t</span> aData[]                     <span class=\"comment\">// 数据</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span>；</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 接收邮箱编号的定义</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_RX_FIFO0                (0x00000000U)  <span class=\"comment\">/*!&lt; CAN receive FIFO 0 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_RX_FIFO1                (0x00000001U)  <span class=\"comment\">/*!&lt; CAN receive FIFO 1 */</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们配置过滤器和发送接收这两个流程应该是有了一个<strong>大概的认知</strong>，来做一个简单的测试吧</p>\n<p>将运行模式设置为<strong>回环发送</strong>，我们就可以收到自己发送的报文，前提是能通过邮箱过滤，其他配置依照上文即可</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/9662f70acc644e3897a03f64c5d34d2b.png\n    width=80% \n    />\n</center>\n\n<p>记得重新生成代码</p>\n<p>然后我们写一个过滤器的配置</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CAN_FilterTypeDef filter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 报文头结构体的赋值</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处配置为接收全部报文，以便于测试</span></span><br><span class=\"line\">    filter.FilterActivation     = ENABLE;                   <span class=\"comment\">// 启用过滤器</span></span><br><span class=\"line\">    filter.FilterBank           = <span class=\"number\">0</span>;                        <span class=\"comment\">// 过滤器编码</span></span><br><span class=\"line\">    filter.FilterMode           = CAN_FILTERMODE_IDMASK;    <span class=\"comment\">// 掩码模式</span></span><br><span class=\"line\">    filter.FilterScale          = CAN_FILTERSCALE_32BIT;    <span class=\"comment\">// 32位宽</span></span><br><span class=\"line\">    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         <span class=\"comment\">// 配置邮箱0</span></span><br><span class=\"line\">    filter.FilterIdHigh         = <span class=\"number\">0x0000</span>;                   <span class=\"comment\">// 高位0</span></span><br><span class=\"line\">    filter.FilterIdLow          = <span class=\"number\">0x0000</span>;                   <span class=\"comment\">// 低位0</span></span><br><span class=\"line\">    filter.FilterMaskIdHigh     = <span class=\"number\">0x0000</span>;                   <span class=\"comment\">// 掩码高位不检测</span></span><br><span class=\"line\">    filter.FilterMaskIdLow      = <span class=\"number\">0x0000</span>;                   <span class=\"comment\">// 掩码低位不检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将配置加载进CAN 1中</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ConfigFilter</span>(&amp;hcan1, &amp;filter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化CAN</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">can_filter_init</span>();                                                  <span class=\"comment\">// 过滤器</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_Start</span>(&amp;hcan1);                                              <span class=\"comment\">// 开启CAN通讯</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ActivateNotification</span>(&amp;hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  <span class=\"comment\">// 开启接收中断</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明一些必要的变量</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_rx[<span class=\"number\">8</span>];    <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_tx[<span class=\"number\">8</span>];    <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">CAN_RxHeaderTypeDef can_1_rx_header;    <span class=\"comment\">// 接收报文头</span></span><br><span class=\"line\">CAN_TxHeaderTypeDef can_1_tx_header;    <span class=\"comment\">// 发送报文头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> mail_tx = CAN_TX_MAILBOX0;     <span class=\"comment\">// 发送邮箱编号</span></span><br></pre></td></tr></table></figure>\n\n<p>初始化一些参数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 随便创建一种发送报文头结构体</span></span><br><span class=\"line\">can_1_tx_header.StdId              = <span class=\"number\">0x00000000</span>;</span><br><span class=\"line\">can_1_tx_header.ExtId              = <span class=\"number\">0x12345000</span>;</span><br><span class=\"line\">can_1_tx_header.IDE                = CAN_ID_EXT;</span><br><span class=\"line\">can_1_tx_header.RTR                = CAN_RTR_DATA;</span><br><span class=\"line\">can_1_tx_header.DLC                = <span class=\"number\">8</span>;</span><br><span class=\"line\">can_1_tx_header.TransmitGlobalTime = DISABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化一些发送的数据</span></span><br><span class=\"line\">can_1_tx[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 要使用的灯记得开启，根据自己的板子写即可</span></span><br><span class=\"line\"><span class=\"built_in\">HAL_TIM_PWM_Start</span>(&amp;htim5, TIM_CHANNEL_1);</span><br><span class=\"line\"><span class=\"comment\">// 刚才写的初始化函数用上</span></span><br><span class=\"line\"><span class=\"built_in\">can_init</span>();</span><br></pre></td></tr></table></figure>\n\n<p>回调函数的覆写</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hcan-&gt;Instance == CAN1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;can_1_rx_header, can_1_rx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据自己的板子替换一下点灯的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在主循环中不断发送报文</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">HAL_CAN_AddTxMessage</span>(&amp;hcan1, &amp;can_1_tx_header, can_1_tx, &amp;mail_tx);</span><br></pre></td></tr></table></figure>\n\n<p>这是 main.c ，注意根据自己使用的板子情况<strong>进行修改</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN Header */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * @file           : main.c</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief          : Main program body</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * @attention</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2024 STMicroelectronics.</span></span><br><span class=\"line\"><span class=\"comment\"> * All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This software is licensed under terms that can be found in the LICENSE file</span></span><br><span class=\"line\"><span class=\"comment\"> * in the root directory of this software component.</span></span><br><span class=\"line\"><span class=\"comment\"> * If no LICENSE file comes with this software, it is provided AS-IS.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END Header */</span></span><br><span class=\"line\"><span class=\"comment\">/* Includes ------------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;main.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;can.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tim.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;gpio.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private includes ----------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN Includes */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END Includes */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PTD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PTD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private define ------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private macro -------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PM */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PM */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private variables ---------------------------------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PV */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_rx[<span class=\"number\">8</span>]; <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_tx[<span class=\"number\">8</span>]; <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">CAN_RxHeaderTypeDef can_1_rx_header; <span class=\"comment\">// 接收保报文头</span></span><br><span class=\"line\">CAN_TxHeaderTypeDef can_1_tx_header; <span class=\"comment\">// 发送报文头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> mail_tx = CAN_TX_MAILBOX0; <span class=\"comment\">// 发送邮箱编号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PV */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SystemClock_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PFP */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PFP */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private user code ---------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CAN_FilterTypeDef filter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 报文头结构体的赋值</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处配置为接收全部报文，以便于测试</span></span><br><span class=\"line\">    filter.FilterActivation     = ENABLE;                <span class=\"comment\">// 启用过滤器</span></span><br><span class=\"line\">    filter.FilterBank           = <span class=\"number\">0</span>;                     <span class=\"comment\">// 过滤器编码</span></span><br><span class=\"line\">    filter.FilterMode           = CAN_FILTERMODE_IDMASK; <span class=\"comment\">// 掩码模式</span></span><br><span class=\"line\">    filter.FilterScale          = CAN_FILTERSCALE_32BIT; <span class=\"comment\">// 32位宽</span></span><br><span class=\"line\">    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      <span class=\"comment\">// 配置邮箱0</span></span><br><span class=\"line\">    filter.FilterIdHigh         = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 高位0</span></span><br><span class=\"line\">    filter.FilterIdLow          = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 低位0</span></span><br><span class=\"line\">    filter.FilterMaskIdHigh     = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码高位不检测</span></span><br><span class=\"line\">    filter.FilterMaskIdLow      = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码低位不检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将配置加载进CAN 1中</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ConfigFilter</span>(&amp;hcan1, &amp;filter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">can_filter_init</span>();                                                 <span class=\"comment\">// 过滤器</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_Start</span>(&amp;hcan1);                                             <span class=\"comment\">// 开启CAN通讯</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ActivateNotification</span>(&amp;hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); <span class=\"comment\">// 开启接收中断</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hcan-&gt;Instance == CAN1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;can_1_rx_header, can_1_rx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据自己的板子替换一下点灯的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  The application entry point.</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_Init</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN Init */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END Init */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Configure the system clock */</span></span><br><span class=\"line\">    <span class=\"built_in\">SystemClock_Config</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN SysInit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END SysInit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Initialize all configured peripherals */</span></span><br><span class=\"line\">    <span class=\"built_in\">MX_GPIO_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_TIM4_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_TIM5_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_CAN1_Init</span>();</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 随便创建一种发送报文头结构体</span></span><br><span class=\"line\">    can_1_tx_header.StdId              = <span class=\"number\">0x00000000</span>;</span><br><span class=\"line\">    can_1_tx_header.ExtId              = <span class=\"number\">0x12345000</span>;</span><br><span class=\"line\">    can_1_tx_header.IDE                = CAN_ID_EXT;</span><br><span class=\"line\">    can_1_tx_header.RTR                = CAN_RTR_DATA;</span><br><span class=\"line\">    can_1_tx_header.DLC                = <span class=\"number\">8</span>;</span><br><span class=\"line\">    can_1_tx_header.TransmitGlobalTime = DISABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">    can_1_tx[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">HAL_TIM_PWM_Start</span>(&amp;htim5, TIM_CHANNEL_1);</span><br><span class=\"line\">    <span class=\"built_in\">can_init</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Infinite loop */</span></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN WHILE */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_AddTxMessage</span>(&amp;hcan1, &amp;can_1_tx_header, can_1_tx, &amp;mail_tx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* USER CODE END WHILE */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* USER CODE BEGIN 3 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 3 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief System Clock Configuration</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SystemClock_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Configure the main internal regulator output voltage</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    __HAL_RCC_PWR_CLK_ENABLE();</span><br><span class=\"line\">    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initializes the RCC Oscillators according to the specified parameters</span></span><br><span class=\"line\"><span class=\"comment\">     * in the RCC_OscInitTypeDef structure.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;</span><br><span class=\"line\">    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;</span><br><span class=\"line\">    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLM            = <span class=\"number\">8</span>;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLN            = <span class=\"number\">168</span>;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLQ            = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_RCC_OscConfig</span>(&amp;RCC_OscInitStruct) != HAL_OK) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initializes the CPU, AHB and APB buses clocks</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;</span><br><span class=\"line\">    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class=\"line\">    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;</span><br><span class=\"line\">    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;</span><br><span class=\"line\">    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_RCC_ClockConfig</span>(&amp;RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 4 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 4 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  This function is executed in case of error occurrence.</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Error_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN Error_Handler_Debug */</span></span><br><span class=\"line\">    <span class=\"comment\">/* User can add his own implementation to report the HAL error return state */</span></span><br><span class=\"line\">    __disable_irq();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END Error_Handler_Debug */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> USE_FULL_ASSERT</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  Reports the name of the source file and the source line number</span></span><br><span class=\"line\"><span class=\"comment\"> *         where the assert_param error has occurred.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  file: pointer to the source file name</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  line: assert_param error line source number</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">assert_failed</span><span class=\"params\">(<span class=\"type\">uint8_t</span> *file, <span class=\"type\">uint32_t</span> line)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 6 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* User can add his own implementation to report the file name and line number,</span></span><br><span class=\"line\"><span class=\"comment\">       ex: printf(&quot;Wrong parameters value: file %s on line %d\\r\\n&quot;, file, line) */</span></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 6 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* USE_FULL_ASSERT */</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在ozone中查看参数，并实时修改发送数据的数值，发现接收数据也会实时修改，板载灯反馈正常</p>\n<p>若不能使用ozone，也可以在代码中修改发送的数值，重新烧录，查看板载灯的情况</p>\n<center>\n<img src=https://img-blog.csdnimg.cn/direct/b9f8c4761d6f417087f7213b0a7d41ca.png\n    width=60% \n    />\n</center>\n\n<p>回环测试正常，我们可以进行下一步的了解</p>\n<h2 id=\"CAN的熟练掌握\"><a href=\"#CAN的熟练掌握\" class=\"headerlink\" title=\"CAN的熟练掌握\"></a>CAN的熟练掌握</h2><p>在囫囵吞枣地走通过一遍流程后，我们遇到很很多<strong>复杂的模式和结构体</strong>，这些需要根据实际情况来酌情配置</p>\n"}],"Post":[{"layout":"port","title":"Ubuntu Server网络设置","date":"2024-05-13T15:46:32.000Z","_content":"","source":"_posts/about-ubuntu-server-network.md","raw":"---\nlayout: port\ntitle: Ubuntu Server网络设置\ndate: 2024-05-13 15:46:32\ntags:\n- ubuntu\n- server\n- netplan\ncategories:\n- ubuntu\n---\n","slug":"about-ubuntu-server-network","published":1,"updated":"2024-05-28T16:26:13.248Z","comments":1,"photos":[],"_id":"clx6hajm10001i960b1qv0ubu","content":"","excerpt":"","more":""},{"layout":"port","title":"替代Rviz的Foxglove可视化及调参平台","date":"2024-05-13T16:09:37.000Z","_content":"\n### 准备工作\n1. 在NUC环境中下载`Foxglove Bridge`，此为[文档连接](https://docs.foxglove.dev/docs/connecting-to-data/ros-foxglove-bridge/)，在`Linux`环境中使用下面指令下载\n```sh\nsudo apt install ros-$ROS_DISTRO-foxglove-bridge\n```\n\n2. 在调试用电脑中下载`Foxglove Studio`，此为[下载链接](https://foxglove.dev/download)，亦可使用[`Webview`](https://app.foxglove.dev/)，注意，`Webview` 在消息负载较大时会卡顿崩溃\n\n3. 与 `NUC` 构建网络连接，可以通过Wifi或者网线使调试电脑和 NUC 在同一局域网段，不推荐使用 Wifi 进行调试，卡顿是常有的事\n\n### 启动 Foxglove Bridge\n\n在你的**车载 NUC** 中进行\n```sh\n# terminal in nuc, then topics will be forwarded to your pc\nros2 launch foxglove_bridge foxglove_bridge_launch.xml\n```\n\n### 启动 Foxglove Studio\n\n在你的**调试用电脑**中进行\n1. 打开 `Webview` 或者 `Application`\n2. 登陆账户`(optional)`\n\n### 使用 Foxglove Studio 查看可视化消息\n### 使用 Foxglove Studio 查看参数曲线\n### 使用 Foxglove Studio 调节参数，发布消息","source":"_posts/debug-ros2-with-foxglove.md","raw":"---\nlayout: port\ntitle: 替代Rviz的Foxglove可视化及调参平台\ndate: 2024-05-13 16:09:37\ntags:\n- ros2\n- foxglove\n- c/cpp\ncategories:\n- ros2\n---\n\n### 准备工作\n1. 在NUC环境中下载`Foxglove Bridge`，此为[文档连接](https://docs.foxglove.dev/docs/connecting-to-data/ros-foxglove-bridge/)，在`Linux`环境中使用下面指令下载\n```sh\nsudo apt install ros-$ROS_DISTRO-foxglove-bridge\n```\n\n2. 在调试用电脑中下载`Foxglove Studio`，此为[下载链接](https://foxglove.dev/download)，亦可使用[`Webview`](https://app.foxglove.dev/)，注意，`Webview` 在消息负载较大时会卡顿崩溃\n\n3. 与 `NUC` 构建网络连接，可以通过Wifi或者网线使调试电脑和 NUC 在同一局域网段，不推荐使用 Wifi 进行调试，卡顿是常有的事\n\n### 启动 Foxglove Bridge\n\n在你的**车载 NUC** 中进行\n```sh\n# terminal in nuc, then topics will be forwarded to your pc\nros2 launch foxglove_bridge foxglove_bridge_launch.xml\n```\n\n### 启动 Foxglove Studio\n\n在你的**调试用电脑**中进行\n1. 打开 `Webview` 或者 `Application`\n2. 登陆账户`(optional)`\n\n### 使用 Foxglove Studio 查看可视化消息\n### 使用 Foxglove Studio 查看参数曲线\n### 使用 Foxglove Studio 调节参数，发布消息","slug":"debug-ros2-with-foxglove","published":1,"updated":"2024-05-28T16:26:40.938Z","comments":1,"photos":[],"_id":"clx6hajm40002i960af1t3ku3","content":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><p>在NUC环境中下载<code>Foxglove Bridge</code>，此为<a href=\"https://docs.foxglove.dev/docs/connecting-to-data/ros-foxglove-bridge/\">文档连接</a>，在<code>Linux</code>环境中使用下面指令下载</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install ros-<span class=\"variable\">$ROS_DISTRO</span>-foxglove-bridge</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在调试用电脑中下载<code>Foxglove Studio</code>，此为<a href=\"https://foxglove.dev/download\">下载链接</a>，亦可使用<a href=\"https://app.foxglove.dev/\"><code>Webview</code></a>，注意，<code>Webview</code> 在消息负载较大时会卡顿崩溃</p>\n</li>\n<li><p>与 <code>NUC</code> 构建网络连接，可以通过Wifi或者网线使调试电脑和 NUC 在同一局域网段，不推荐使用 Wifi 进行调试，卡顿是常有的事</p>\n</li>\n</ol>\n<h3 id=\"启动-Foxglove-Bridge\"><a href=\"#启动-Foxglove-Bridge\" class=\"headerlink\" title=\"启动 Foxglove Bridge\"></a>启动 Foxglove Bridge</h3><p>在你的<strong>车载 NUC</strong> 中进行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># terminal in nuc, then topics will be forwarded to your pc</span></span><br><span class=\"line\">ros2 launch foxglove_bridge foxglove_bridge_launch.xml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-Foxglove-Studio\"><a href=\"#启动-Foxglove-Studio\" class=\"headerlink\" title=\"启动 Foxglove Studio\"></a>启动 Foxglove Studio</h3><p>在你的<strong>调试用电脑</strong>中进行</p>\n<ol>\n<li>打开 <code>Webview</code> 或者 <code>Application</code></li>\n<li>登陆账户<code>(optional)</code></li>\n</ol>\n<h3 id=\"使用-Foxglove-Studio-查看可视化消息\"><a href=\"#使用-Foxglove-Studio-查看可视化消息\" class=\"headerlink\" title=\"使用 Foxglove Studio 查看可视化消息\"></a>使用 Foxglove Studio 查看可视化消息</h3><h3 id=\"使用-Foxglove-Studio-查看参数曲线\"><a href=\"#使用-Foxglove-Studio-查看参数曲线\" class=\"headerlink\" title=\"使用 Foxglove Studio 查看参数曲线\"></a>使用 Foxglove Studio 查看参数曲线</h3><h3 id=\"使用-Foxglove-Studio-调节参数，发布消息\"><a href=\"#使用-Foxglove-Studio-调节参数，发布消息\" class=\"headerlink\" title=\"使用 Foxglove Studio 调节参数，发布消息\"></a>使用 Foxglove Studio 调节参数，发布消息</h3>","excerpt":"","more":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><p>在NUC环境中下载<code>Foxglove Bridge</code>，此为<a href=\"https://docs.foxglove.dev/docs/connecting-to-data/ros-foxglove-bridge/\">文档连接</a>，在<code>Linux</code>环境中使用下面指令下载</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install ros-<span class=\"variable\">$ROS_DISTRO</span>-foxglove-bridge</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在调试用电脑中下载<code>Foxglove Studio</code>，此为<a href=\"https://foxglove.dev/download\">下载链接</a>，亦可使用<a href=\"https://app.foxglove.dev/\"><code>Webview</code></a>，注意，<code>Webview</code> 在消息负载较大时会卡顿崩溃</p>\n</li>\n<li><p>与 <code>NUC</code> 构建网络连接，可以通过Wifi或者网线使调试电脑和 NUC 在同一局域网段，不推荐使用 Wifi 进行调试，卡顿是常有的事</p>\n</li>\n</ol>\n<h3 id=\"启动-Foxglove-Bridge\"><a href=\"#启动-Foxglove-Bridge\" class=\"headerlink\" title=\"启动 Foxglove Bridge\"></a>启动 Foxglove Bridge</h3><p>在你的<strong>车载 NUC</strong> 中进行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># terminal in nuc, then topics will be forwarded to your pc</span></span><br><span class=\"line\">ros2 launch foxglove_bridge foxglove_bridge_launch.xml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-Foxglove-Studio\"><a href=\"#启动-Foxglove-Studio\" class=\"headerlink\" title=\"启动 Foxglove Studio\"></a>启动 Foxglove Studio</h3><p>在你的<strong>调试用电脑</strong>中进行</p>\n<ol>\n<li>打开 <code>Webview</code> 或者 <code>Application</code></li>\n<li>登陆账户<code>(optional)</code></li>\n</ol>\n<h3 id=\"使用-Foxglove-Studio-查看可视化消息\"><a href=\"#使用-Foxglove-Studio-查看可视化消息\" class=\"headerlink\" title=\"使用 Foxglove Studio 查看可视化消息\"></a>使用 Foxglove Studio 查看可视化消息</h3><h3 id=\"使用-Foxglove-Studio-查看参数曲线\"><a href=\"#使用-Foxglove-Studio-查看参数曲线\" class=\"headerlink\" title=\"使用 Foxglove Studio 查看参数曲线\"></a>使用 Foxglove Studio 查看参数曲线</h3><h3 id=\"使用-Foxglove-Studio-调节参数，发布消息\"><a href=\"#使用-Foxglove-Studio-调节参数，发布消息\" class=\"headerlink\" title=\"使用 Foxglove Studio 调节参数，发布消息\"></a>使用 Foxglove Studio 调节参数，发布消息</h3>"},{"title":"ROS2开发环境配置","date":"2024-06-08T18:48:51.000Z","_content":"","source":"_posts/develop-prepare.md","raw":"---\ntitle: ROS2开发环境配置\ndate: 2024-06-08 18:48:51\ntags:\n- ubuntu\n- ros2\ncategories:\n- ros2\n---\n","slug":"develop-prepare","published":1,"updated":"2024-06-08T18:51:08.810Z","comments":1,"layout":"post","photos":[],"_id":"clx6hajm80005i9607hb5hpne","content":"","excerpt":"","more":""},{"layout":"port","title":"经济与体验的权衡，使用云服务器和Frp的本地服务穿透方案","date":"2024-05-13T16:06:33.000Z","_content":"\n## 起因\n\n我想大学生都是**需要一个服务器**的，既然有了服务器，那域名也是必不可少的，奈何云服务器资源昂贵，性能普遍不如本地设备\n\n正好之前购买的腾讯云学生优惠服务器即将到期，（反复提醒了我几十遍资源马上要释放了，宛若催命），便想着找出一个解决方案，兼顾云服务器的公网IP资源和本地服务器的性能，几番思索，最终决定使用Frp搭桥，穿透网络端口，搞台NUC作为本地服务器平台\n\n## 本地平台系统准备\n### Ubuntu Server安装\n### 网络连接\n### Docker配置\n\n## 云服务器系统准备\n### Ubuntu Server安装\n### 基础软件安装\n### 设置流量监控\n### 设置安全组，保证网络安全\n\n## Vscode 工作流\n### 远程连接云服务器和本地设备\n### 常用使用方法\n\n## 架设Frp服务，穿透网络端口\n### Frps（服务端）配置\n### Frpc（客户端）配置\n\n## 暴露SSH端口，通过云服务器连接本地设备\n### 取消密码登陆，使用ssh-key登陆（Optional）\n### ssh登陆云服务器和本地服务器\n\n## Nginx反向代理，转发服务\n\n## 案例参考\n### Hexo博客架设\n### 静态资源代理","source":"_posts/server-based-on-frp-and-nginx.md","raw":"---\nlayout: port\ntitle: 经济与体验的权衡，使用云服务器和Frp的本地服务穿透方案\ndate: 2024-05-13 16:06:33\ntags:\n- ubuntu\n- server\n- nginx\n- frp\n- web\ncategories:\n- web\n---\n\n## 起因\n\n我想大学生都是**需要一个服务器**的，既然有了服务器，那域名也是必不可少的，奈何云服务器资源昂贵，性能普遍不如本地设备\n\n正好之前购买的腾讯云学生优惠服务器即将到期，（反复提醒了我几十遍资源马上要释放了，宛若催命），便想着找出一个解决方案，兼顾云服务器的公网IP资源和本地服务器的性能，几番思索，最终决定使用Frp搭桥，穿透网络端口，搞台NUC作为本地服务器平台\n\n## 本地平台系统准备\n### Ubuntu Server安装\n### 网络连接\n### Docker配置\n\n## 云服务器系统准备\n### Ubuntu Server安装\n### 基础软件安装\n### 设置流量监控\n### 设置安全组，保证网络安全\n\n## Vscode 工作流\n### 远程连接云服务器和本地设备\n### 常用使用方法\n\n## 架设Frp服务，穿透网络端口\n### Frps（服务端）配置\n### Frpc（客户端）配置\n\n## 暴露SSH端口，通过云服务器连接本地设备\n### 取消密码登陆，使用ssh-key登陆（Optional）\n### ssh登陆云服务器和本地服务器\n\n## Nginx反向代理，转发服务\n\n## 案例参考\n### Hexo博客架设\n### 静态资源代理","slug":"server-based-on-frp-and-nginx","published":1,"updated":"2024-05-28T16:26:13.248Z","comments":1,"photos":[],"_id":"clx6hajm90006i960g7q2e8oo","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>我想大学生都是<strong>需要一个服务器</strong>的，既然有了服务器，那域名也是必不可少的，奈何云服务器资源昂贵，性能普遍不如本地设备</p>\n<p>正好之前购买的腾讯云学生优惠服务器即将到期，（反复提醒了我几十遍资源马上要释放了，宛若催命），便想着找出一个解决方案，兼顾云服务器的公网IP资源和本地服务器的性能，几番思索，最终决定使用Frp搭桥，穿透网络端口，搞台NUC作为本地服务器平台</p>\n<h2 id=\"本地平台系统准备\"><a href=\"#本地平台系统准备\" class=\"headerlink\" title=\"本地平台系统准备\"></a>本地平台系统准备</h2><h3 id=\"Ubuntu-Server安装\"><a href=\"#Ubuntu-Server安装\" class=\"headerlink\" title=\"Ubuntu Server安装\"></a>Ubuntu Server安装</h3><h3 id=\"网络连接\"><a href=\"#网络连接\" class=\"headerlink\" title=\"网络连接\"></a>网络连接</h3><h3 id=\"Docker配置\"><a href=\"#Docker配置\" class=\"headerlink\" title=\"Docker配置\"></a>Docker配置</h3><h2 id=\"云服务器系统准备\"><a href=\"#云服务器系统准备\" class=\"headerlink\" title=\"云服务器系统准备\"></a>云服务器系统准备</h2><h3 id=\"Ubuntu-Server安装-1\"><a href=\"#Ubuntu-Server安装-1\" class=\"headerlink\" title=\"Ubuntu Server安装\"></a>Ubuntu Server安装</h3><h3 id=\"基础软件安装\"><a href=\"#基础软件安装\" class=\"headerlink\" title=\"基础软件安装\"></a>基础软件安装</h3><h3 id=\"设置流量监控\"><a href=\"#设置流量监控\" class=\"headerlink\" title=\"设置流量监控\"></a>设置流量监控</h3><h3 id=\"设置安全组，保证网络安全\"><a href=\"#设置安全组，保证网络安全\" class=\"headerlink\" title=\"设置安全组，保证网络安全\"></a>设置安全组，保证网络安全</h3><h2 id=\"Vscode-工作流\"><a href=\"#Vscode-工作流\" class=\"headerlink\" title=\"Vscode 工作流\"></a>Vscode 工作流</h2><h3 id=\"远程连接云服务器和本地设备\"><a href=\"#远程连接云服务器和本地设备\" class=\"headerlink\" title=\"远程连接云服务器和本地设备\"></a>远程连接云服务器和本地设备</h3><h3 id=\"常用使用方法\"><a href=\"#常用使用方法\" class=\"headerlink\" title=\"常用使用方法\"></a>常用使用方法</h3><h2 id=\"架设Frp服务，穿透网络端口\"><a href=\"#架设Frp服务，穿透网络端口\" class=\"headerlink\" title=\"架设Frp服务，穿透网络端口\"></a>架设Frp服务，穿透网络端口</h2><h3 id=\"Frps（服务端）配置\"><a href=\"#Frps（服务端）配置\" class=\"headerlink\" title=\"Frps（服务端）配置\"></a>Frps（服务端）配置</h3><h3 id=\"Frpc（客户端）配置\"><a href=\"#Frpc（客户端）配置\" class=\"headerlink\" title=\"Frpc（客户端）配置\"></a>Frpc（客户端）配置</h3><h2 id=\"暴露SSH端口，通过云服务器连接本地设备\"><a href=\"#暴露SSH端口，通过云服务器连接本地设备\" class=\"headerlink\" title=\"暴露SSH端口，通过云服务器连接本地设备\"></a>暴露SSH端口，通过云服务器连接本地设备</h2><h3 id=\"取消密码登陆，使用ssh-key登陆（Optional）\"><a href=\"#取消密码登陆，使用ssh-key登陆（Optional）\" class=\"headerlink\" title=\"取消密码登陆，使用ssh-key登陆（Optional）\"></a>取消密码登陆，使用ssh-key登陆（Optional）</h3><h3 id=\"ssh登陆云服务器和本地服务器\"><a href=\"#ssh登陆云服务器和本地服务器\" class=\"headerlink\" title=\"ssh登陆云服务器和本地服务器\"></a>ssh登陆云服务器和本地服务器</h3><h2 id=\"Nginx反向代理，转发服务\"><a href=\"#Nginx反向代理，转发服务\" class=\"headerlink\" title=\"Nginx反向代理，转发服务\"></a>Nginx反向代理，转发服务</h2><h2 id=\"案例参考\"><a href=\"#案例参考\" class=\"headerlink\" title=\"案例参考\"></a>案例参考</h2><h3 id=\"Hexo博客架设\"><a href=\"#Hexo博客架设\" class=\"headerlink\" title=\"Hexo博客架设\"></a>Hexo博客架设</h3><h3 id=\"静态资源代理\"><a href=\"#静态资源代理\" class=\"headerlink\" title=\"静态资源代理\"></a>静态资源代理</h3>","excerpt":"","more":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>我想大学生都是<strong>需要一个服务器</strong>的，既然有了服务器，那域名也是必不可少的，奈何云服务器资源昂贵，性能普遍不如本地设备</p>\n<p>正好之前购买的腾讯云学生优惠服务器即将到期，（反复提醒了我几十遍资源马上要释放了，宛若催命），便想着找出一个解决方案，兼顾云服务器的公网IP资源和本地服务器的性能，几番思索，最终决定使用Frp搭桥，穿透网络端口，搞台NUC作为本地服务器平台</p>\n<h2 id=\"本地平台系统准备\"><a href=\"#本地平台系统准备\" class=\"headerlink\" title=\"本地平台系统准备\"></a>本地平台系统准备</h2><h3 id=\"Ubuntu-Server安装\"><a href=\"#Ubuntu-Server安装\" class=\"headerlink\" title=\"Ubuntu Server安装\"></a>Ubuntu Server安装</h3><h3 id=\"网络连接\"><a href=\"#网络连接\" class=\"headerlink\" title=\"网络连接\"></a>网络连接</h3><h3 id=\"Docker配置\"><a href=\"#Docker配置\" class=\"headerlink\" title=\"Docker配置\"></a>Docker配置</h3><h2 id=\"云服务器系统准备\"><a href=\"#云服务器系统准备\" class=\"headerlink\" title=\"云服务器系统准备\"></a>云服务器系统准备</h2><h3 id=\"Ubuntu-Server安装-1\"><a href=\"#Ubuntu-Server安装-1\" class=\"headerlink\" title=\"Ubuntu Server安装\"></a>Ubuntu Server安装</h3><h3 id=\"基础软件安装\"><a href=\"#基础软件安装\" class=\"headerlink\" title=\"基础软件安装\"></a>基础软件安装</h3><h3 id=\"设置流量监控\"><a href=\"#设置流量监控\" class=\"headerlink\" title=\"设置流量监控\"></a>设置流量监控</h3><h3 id=\"设置安全组，保证网络安全\"><a href=\"#设置安全组，保证网络安全\" class=\"headerlink\" title=\"设置安全组，保证网络安全\"></a>设置安全组，保证网络安全</h3><h2 id=\"Vscode-工作流\"><a href=\"#Vscode-工作流\" class=\"headerlink\" title=\"Vscode 工作流\"></a>Vscode 工作流</h2><h3 id=\"远程连接云服务器和本地设备\"><a href=\"#远程连接云服务器和本地设备\" class=\"headerlink\" title=\"远程连接云服务器和本地设备\"></a>远程连接云服务器和本地设备</h3><h3 id=\"常用使用方法\"><a href=\"#常用使用方法\" class=\"headerlink\" title=\"常用使用方法\"></a>常用使用方法</h3><h2 id=\"架设Frp服务，穿透网络端口\"><a href=\"#架设Frp服务，穿透网络端口\" class=\"headerlink\" title=\"架设Frp服务，穿透网络端口\"></a>架设Frp服务，穿透网络端口</h2><h3 id=\"Frps（服务端）配置\"><a href=\"#Frps（服务端）配置\" class=\"headerlink\" title=\"Frps（服务端）配置\"></a>Frps（服务端）配置</h3><h3 id=\"Frpc（客户端）配置\"><a href=\"#Frpc（客户端）配置\" class=\"headerlink\" title=\"Frpc（客户端）配置\"></a>Frpc（客户端）配置</h3><h2 id=\"暴露SSH端口，通过云服务器连接本地设备\"><a href=\"#暴露SSH端口，通过云服务器连接本地设备\" class=\"headerlink\" title=\"暴露SSH端口，通过云服务器连接本地设备\"></a>暴露SSH端口，通过云服务器连接本地设备</h2><h3 id=\"取消密码登陆，使用ssh-key登陆（Optional）\"><a href=\"#取消密码登陆，使用ssh-key登陆（Optional）\" class=\"headerlink\" title=\"取消密码登陆，使用ssh-key登陆（Optional）\"></a>取消密码登陆，使用ssh-key登陆（Optional）</h3><h3 id=\"ssh登陆云服务器和本地服务器\"><a href=\"#ssh登陆云服务器和本地服务器\" class=\"headerlink\" title=\"ssh登陆云服务器和本地服务器\"></a>ssh登陆云服务器和本地服务器</h3><h2 id=\"Nginx反向代理，转发服务\"><a href=\"#Nginx反向代理，转发服务\" class=\"headerlink\" title=\"Nginx反向代理，转发服务\"></a>Nginx反向代理，转发服务</h2><h2 id=\"案例参考\"><a href=\"#案例参考\" class=\"headerlink\" title=\"案例参考\"></a>案例参考</h2><h3 id=\"Hexo博客架设\"><a href=\"#Hexo博客架设\" class=\"headerlink\" title=\"Hexo博客架设\"></a>Hexo博客架设</h3><h3 id=\"静态资源代理\"><a href=\"#静态资源代理\" class=\"headerlink\" title=\"静态资源代理\"></a>静态资源代理</h3>"},{"title":"如何安稳地安装ubuntu系统","date":"2024-06-08T11:27:54.000Z","_content":"## 前言\n\nubuntu一直对驱动安装不是很友好，特别是一些比较老的版本，每次安装Nvidia驱动都是一场豪赌，顺利安装，或是**重装系统**。\n\n有一段时间，我几乎是把能够下载到的所有版本的linux发行版试了个遍（`Redmi G 2021 骁龙版`），最终发现最为稳定的版本是最新的`ubuntu 24.04`\n\n对于开发，我需要在`ubuntu`上运行`ros2`系统，编写`C/Cpp`程序，开发嵌入式，`ros2`的版本是和`ubuntu`版本强耦合的，但使用`docker`可以较为完美的解决这个问题，所以使用`ubuntu 24.04`对我的开发需求是没有什么阻碍的\n\n## 准备工作\n### 制作Ventoy启动盘\n\nVentoy是比较优雅的多系统装机方案，其安装较为简单，可以看看[这个教程](https://www.appinn.com/ventoy/)\n\n### 下载ubuntu镜像\n\n[Ubuntu Desktop Download Page](https://ubuntu.com/download/desktop)\n\n## 安装系统\n\n查询自己电脑如何进入Bios，**关闭安全启动**，选择从**U盘**启动，随后看到下面这个界面，选择正确的镜像，回车进入安装，启动方式**默认**即可\n\n![ec1bf6dc99ba06a89ee1c8f51e6e8688.png](https://i2.mjj.rip/2024/06/08/ec1bf6dc99ba06a89ee1c8f51e6e8688.png)\n\n![7b893de671032292bfe433437d5fe4f0.png](https://i2.mjj.rip/2024/06/08/7b893de671032292bfe433437d5fe4f0.png)\n\n等待Ubuntu安装程序启动，随后你会看到这样一个界面，默认使用English即可\n\n![18a688f82399d5d9abcd3ea6efcdce42.png](https://i2.mjj.rip/2024/06/08/18a688f82399d5d9abcd3ea6efcdce42.png)\n\n一路默认下一步，到选择网络的界面，点击 `Connect to a WiFi network` 连接网络，当然，使用有线网络也是可以的\n\n之后没有提及的界面默认下一步即可\n\n![c9c4af26cd5468a89b9b059579f122ab.png](https://i2.mjj.rip/2024/06/08/c9c4af26cd5468a89b9b059579f122ab.png)\n\n![c2cca4f755c49e028f19b5da9e007a19.png](https://i2.mjj.rip/2024/06/08/c2cca4f755c49e028f19b5da9e007a19.png)\n\n随后到达 ``Install recommended proprietary sofrware?`` 界面，把两个推荐选项都勾选上，第一个选项是自动安装一些驱动，诸如nvidia驱动，第二个是额外安装一些视频的解码格式及其他的媒体格式解码，这样就不需要体验手动安装nvidia驱动的痛苦了\n\n![33c8aa4b0dbb31969fcbde5fa705c204.png](https://i2.mjj.rip/2024/06/08/33c8aa4b0dbb31969fcbde5fa705c204.png)\n\n下面到达 `How do you want to install Ubuntu?` 界面，选择安装ubuntu的位置，`Erase disk and install Ubuntu` 表示覆盖一整块硬盘安装，`Manual installation` 是自己指定安装的位置，可以指定在哪块硬盘分区安装\n\n这里我们选择手动安装，即第二个选项\n\n![e57f633ca700a2056a4d46378543ad73.png](https://i2.mjj.rip/2024/06/08/e57f633ca700a2056a4d46378543ad73.png)\n\n在 `Manual partitioning` 界面我们可以对分区进行一些操作，从下面这张图可以看到有两块盘，第一块是U盘，62.06GB，第二块就是电脑上的固态硬盘了，鼠标点击分区，再点击左下角的 `-` ，就可以删除那块分区，删除后的分区会合并在 `Free space` 里面，这里我们不需要保留分区，如果别的分区装了系统，可以手动保留，注意仔细检查删除的分区是不需要使用的\n\n![cfbe428dc4eb0cd2a1c247a61e68ea17.png](https://i2.mjj.rip/2024/06/09/cfbe428dc4eb0cd2a1c247a61e68ea17.png)\n\n![8ddb4dfedb2e5def40dbaa472cc01468.png](https://i2.mjj.rip/2024/06/09/8ddb4dfedb2e5def40dbaa472cc01468.png)\n\n接着点击空闲分区，再点击左下角的 `+`，进入 `create partition` 界面，Size默认最大值即可，`Used as` 表示要使用的文件系统，这里推荐 **Ext4** ，保留默认选项即可，接下来的 `Mount Point` 选择 `/`，即挂载根目录，三个选项都完成后点击 `OK` 即可，然后再点击右下角的 `Next` 进入下一步\n\n![e848b37006c5299a41762028c59cdbd8.png](https://i2.mjj.rip/2024/06/09/e848b37006c5299a41762028c59cdbd8.png)\n\n![46f0168b6e25207048766964d3e389c7.png](https://i2.mjj.rip/2024/06/09/46f0168b6e25207048766964d3e389c7.png)\n\n创建账户，按照界面给出的信息填写即可，设置账户名字，密码，记住最好不要使用**中文**，时刻防范**编码问题**\n\n随后选择时区(Time Zone)选择中国上海，也只能选择这个，都选完后到确认选项界面确认即可\n\n![1095ad777a5edd9fa5e7dc78db95b46c.png](https://i2.mjj.rip/2024/06/09/1095ad777a5edd9fa5e7dc78db95b46c.png)\n\n接着等待安装完成\n\n![7e9f8a3326782c93443e97f2f32737d5.png](https://i2.mjj.rip/2024/06/09/7e9f8a3326782c93443e97f2f32737d5.png)\n\n重启，拔出U盘，按Enter进入系统\n\n![374731a787dc31c2a9d492ec969047ad.png](https://i2.mjj.rip/2024/06/09/374731a787dc31c2a9d492ec969047ad.png)\n\n开机有一个 `Welcome Ubuntu` 界面卡，跳过就行，如果有信息洁癖可以拒绝`分享信息帮助Ubuntu`\n\n![5e0f81975c685551a6e08e508bc1ca6a.png](https://i2.mjj.rip/2024/06/09/5e0f81975c685551a6e08e508bc1ca6a.png)\n\n![a3f6109d08923f726a256f4b1c7b74e9.png](https://i2.mjj.rip/2024/06/09/a3f6109d08923f726a256f4b1c7b74e9.png)\n\n## 系统设置\n\n### 设置中文\n\n打开设置界面，点击右上角的三个图标可以打开一个面板，在那里你可以找到齿轮图表，那就是设置\n\n在左边一栏找到 `System` ，点击后在右边选择 `Region & Language` 选项\n\n![af372e82c777d43181b4a67d4d0e87ab.png](https://i2.mjj.rip/2024/06/09/af372e82c777d43181b4a67d4d0e87ab.png)\n\n接着点击第一个选项 `Manage installed Languages` ，点击后在弹出来的选项卡中选择 `install`\n\n![2b9f955ccd7bb8b311bf07670c4c7c5a.png](https://i2.mjj.rip/2024/06/09/2b9f955ccd7bb8b311bf07670c4c7c5a.png)\n\n等待下载完成后，在界面中找到 `Install/Remove Languages...` ，点击\n\n![a5429cfe0c4a0e835bc9371965dfc216.png](https://i2.mjj.rip/2024/06/09/a5429cfe0c4a0e835bc9371965dfc216.png)\n\n找到并勾选 `Chinese(simplified)` ，点击右下角的 `Apply`\n\n![094f964f1be5fc412ca09827b26bd68b.png](https://i2.mjj.rip/2024/06/09/094f964f1be5fc412ca09827b26bd68b.png)\n\n完成后，选项卡上出现`汉语(中国)`选项，把它拖到第一个\n\n![d5e27cb120cc03a6691e5c500a04db43.png](https://i2.mjj.rip/2024/06/09/d5e27cb120cc03a6691e5c500a04db43.png)\n\n完成后关掉设置，注销账户或者重新登陆，这几个操作都在右上角三个图标点出的卡片中完成，Logout 即可，然后重新登陆系统，会弹出一个警告，选择 `保留旧的名称(K)`（中文文件夹是不可接受的！）\n\n![b70b12009fc3b5519f212740b4202adc.png](https://i2.mjj.rip/2024/06/09/b70b12009fc3b5519f212740b4202adc.png)\n\n不出意外的话，你的Ubuntu已经是中文了，除了意外，就重启一下，重新加载系统即可\n\n### 设置中文输入法\n\n还是找到设置界面，在左边找到 `键盘` ，点击右边的 `+ 添加输入源(A)...`\n\n![b0e40a83a6ad757646a705ecd5fd958d.png](https://i2.mjj.rip/2024/06/09/b0e40a83a6ad757646a705ecd5fd958d.png)\n\n然后选择 `中文(智能拼音)` ，点击 `添加(A)`\n\n![31c0c8046947ca7544cd6b667d22e8d4.png](https://i2.mjj.rip/2024/06/09/31c0c8046947ca7544cd6b667d22e8d4.png)\n\n添加完成后把界面拉到最下面，找到修改快捷键，在 `打字` 那一选项中可以修改切换中英文的快捷键，按自己喜好设置即可\n\n![0b6fc8f34b6051941e22562c6c4b2087.png](https://i2.mjj.rip/2024/06/09/0b6fc8f34b6051941e22562c6c4b2087.png)\n\n到这里，Ubuntu基本上就安装好了\n\n\n### 美化\n\n在设置的 `外观` 选项中可以修改侧栏的形态，主题颜色等设置，按 `ctrl+alt+t` 可以唤出终端，右键终端面板选择 `配置文件首选项(P)` 可以修改终端的背景颜色，字体等设置，这里晒一下我的外观设置\n\n![5f1cb5602945cb67d20afb3a87c084a8.png](https://i2.mjj.rip/2024/06/09/5f1cb5602945cb67d20afb3a87c084a8.png)","source":"_posts/ubuntu-installation.md","raw":"---\ntitle: 如何安稳地安装ubuntu系统\ndate: 2024-06-08 11:27:54\ntags:\n- ubuntu\ncategories:\n- ubuntu\n---\n## 前言\n\nubuntu一直对驱动安装不是很友好，特别是一些比较老的版本，每次安装Nvidia驱动都是一场豪赌，顺利安装，或是**重装系统**。\n\n有一段时间，我几乎是把能够下载到的所有版本的linux发行版试了个遍（`Redmi G 2021 骁龙版`），最终发现最为稳定的版本是最新的`ubuntu 24.04`\n\n对于开发，我需要在`ubuntu`上运行`ros2`系统，编写`C/Cpp`程序，开发嵌入式，`ros2`的版本是和`ubuntu`版本强耦合的，但使用`docker`可以较为完美的解决这个问题，所以使用`ubuntu 24.04`对我的开发需求是没有什么阻碍的\n\n## 准备工作\n### 制作Ventoy启动盘\n\nVentoy是比较优雅的多系统装机方案，其安装较为简单，可以看看[这个教程](https://www.appinn.com/ventoy/)\n\n### 下载ubuntu镜像\n\n[Ubuntu Desktop Download Page](https://ubuntu.com/download/desktop)\n\n## 安装系统\n\n查询自己电脑如何进入Bios，**关闭安全启动**，选择从**U盘**启动，随后看到下面这个界面，选择正确的镜像，回车进入安装，启动方式**默认**即可\n\n![ec1bf6dc99ba06a89ee1c8f51e6e8688.png](https://i2.mjj.rip/2024/06/08/ec1bf6dc99ba06a89ee1c8f51e6e8688.png)\n\n![7b893de671032292bfe433437d5fe4f0.png](https://i2.mjj.rip/2024/06/08/7b893de671032292bfe433437d5fe4f0.png)\n\n等待Ubuntu安装程序启动，随后你会看到这样一个界面，默认使用English即可\n\n![18a688f82399d5d9abcd3ea6efcdce42.png](https://i2.mjj.rip/2024/06/08/18a688f82399d5d9abcd3ea6efcdce42.png)\n\n一路默认下一步，到选择网络的界面，点击 `Connect to a WiFi network` 连接网络，当然，使用有线网络也是可以的\n\n之后没有提及的界面默认下一步即可\n\n![c9c4af26cd5468a89b9b059579f122ab.png](https://i2.mjj.rip/2024/06/08/c9c4af26cd5468a89b9b059579f122ab.png)\n\n![c2cca4f755c49e028f19b5da9e007a19.png](https://i2.mjj.rip/2024/06/08/c2cca4f755c49e028f19b5da9e007a19.png)\n\n随后到达 ``Install recommended proprietary sofrware?`` 界面，把两个推荐选项都勾选上，第一个选项是自动安装一些驱动，诸如nvidia驱动，第二个是额外安装一些视频的解码格式及其他的媒体格式解码，这样就不需要体验手动安装nvidia驱动的痛苦了\n\n![33c8aa4b0dbb31969fcbde5fa705c204.png](https://i2.mjj.rip/2024/06/08/33c8aa4b0dbb31969fcbde5fa705c204.png)\n\n下面到达 `How do you want to install Ubuntu?` 界面，选择安装ubuntu的位置，`Erase disk and install Ubuntu` 表示覆盖一整块硬盘安装，`Manual installation` 是自己指定安装的位置，可以指定在哪块硬盘分区安装\n\n这里我们选择手动安装，即第二个选项\n\n![e57f633ca700a2056a4d46378543ad73.png](https://i2.mjj.rip/2024/06/08/e57f633ca700a2056a4d46378543ad73.png)\n\n在 `Manual partitioning` 界面我们可以对分区进行一些操作，从下面这张图可以看到有两块盘，第一块是U盘，62.06GB，第二块就是电脑上的固态硬盘了，鼠标点击分区，再点击左下角的 `-` ，就可以删除那块分区，删除后的分区会合并在 `Free space` 里面，这里我们不需要保留分区，如果别的分区装了系统，可以手动保留，注意仔细检查删除的分区是不需要使用的\n\n![cfbe428dc4eb0cd2a1c247a61e68ea17.png](https://i2.mjj.rip/2024/06/09/cfbe428dc4eb0cd2a1c247a61e68ea17.png)\n\n![8ddb4dfedb2e5def40dbaa472cc01468.png](https://i2.mjj.rip/2024/06/09/8ddb4dfedb2e5def40dbaa472cc01468.png)\n\n接着点击空闲分区，再点击左下角的 `+`，进入 `create partition` 界面，Size默认最大值即可，`Used as` 表示要使用的文件系统，这里推荐 **Ext4** ，保留默认选项即可，接下来的 `Mount Point` 选择 `/`，即挂载根目录，三个选项都完成后点击 `OK` 即可，然后再点击右下角的 `Next` 进入下一步\n\n![e848b37006c5299a41762028c59cdbd8.png](https://i2.mjj.rip/2024/06/09/e848b37006c5299a41762028c59cdbd8.png)\n\n![46f0168b6e25207048766964d3e389c7.png](https://i2.mjj.rip/2024/06/09/46f0168b6e25207048766964d3e389c7.png)\n\n创建账户，按照界面给出的信息填写即可，设置账户名字，密码，记住最好不要使用**中文**，时刻防范**编码问题**\n\n随后选择时区(Time Zone)选择中国上海，也只能选择这个，都选完后到确认选项界面确认即可\n\n![1095ad777a5edd9fa5e7dc78db95b46c.png](https://i2.mjj.rip/2024/06/09/1095ad777a5edd9fa5e7dc78db95b46c.png)\n\n接着等待安装完成\n\n![7e9f8a3326782c93443e97f2f32737d5.png](https://i2.mjj.rip/2024/06/09/7e9f8a3326782c93443e97f2f32737d5.png)\n\n重启，拔出U盘，按Enter进入系统\n\n![374731a787dc31c2a9d492ec969047ad.png](https://i2.mjj.rip/2024/06/09/374731a787dc31c2a9d492ec969047ad.png)\n\n开机有一个 `Welcome Ubuntu` 界面卡，跳过就行，如果有信息洁癖可以拒绝`分享信息帮助Ubuntu`\n\n![5e0f81975c685551a6e08e508bc1ca6a.png](https://i2.mjj.rip/2024/06/09/5e0f81975c685551a6e08e508bc1ca6a.png)\n\n![a3f6109d08923f726a256f4b1c7b74e9.png](https://i2.mjj.rip/2024/06/09/a3f6109d08923f726a256f4b1c7b74e9.png)\n\n## 系统设置\n\n### 设置中文\n\n打开设置界面，点击右上角的三个图标可以打开一个面板，在那里你可以找到齿轮图表，那就是设置\n\n在左边一栏找到 `System` ，点击后在右边选择 `Region & Language` 选项\n\n![af372e82c777d43181b4a67d4d0e87ab.png](https://i2.mjj.rip/2024/06/09/af372e82c777d43181b4a67d4d0e87ab.png)\n\n接着点击第一个选项 `Manage installed Languages` ，点击后在弹出来的选项卡中选择 `install`\n\n![2b9f955ccd7bb8b311bf07670c4c7c5a.png](https://i2.mjj.rip/2024/06/09/2b9f955ccd7bb8b311bf07670c4c7c5a.png)\n\n等待下载完成后，在界面中找到 `Install/Remove Languages...` ，点击\n\n![a5429cfe0c4a0e835bc9371965dfc216.png](https://i2.mjj.rip/2024/06/09/a5429cfe0c4a0e835bc9371965dfc216.png)\n\n找到并勾选 `Chinese(simplified)` ，点击右下角的 `Apply`\n\n![094f964f1be5fc412ca09827b26bd68b.png](https://i2.mjj.rip/2024/06/09/094f964f1be5fc412ca09827b26bd68b.png)\n\n完成后，选项卡上出现`汉语(中国)`选项，把它拖到第一个\n\n![d5e27cb120cc03a6691e5c500a04db43.png](https://i2.mjj.rip/2024/06/09/d5e27cb120cc03a6691e5c500a04db43.png)\n\n完成后关掉设置，注销账户或者重新登陆，这几个操作都在右上角三个图标点出的卡片中完成，Logout 即可，然后重新登陆系统，会弹出一个警告，选择 `保留旧的名称(K)`（中文文件夹是不可接受的！）\n\n![b70b12009fc3b5519f212740b4202adc.png](https://i2.mjj.rip/2024/06/09/b70b12009fc3b5519f212740b4202adc.png)\n\n不出意外的话，你的Ubuntu已经是中文了，除了意外，就重启一下，重新加载系统即可\n\n### 设置中文输入法\n\n还是找到设置界面，在左边找到 `键盘` ，点击右边的 `+ 添加输入源(A)...`\n\n![b0e40a83a6ad757646a705ecd5fd958d.png](https://i2.mjj.rip/2024/06/09/b0e40a83a6ad757646a705ecd5fd958d.png)\n\n然后选择 `中文(智能拼音)` ，点击 `添加(A)`\n\n![31c0c8046947ca7544cd6b667d22e8d4.png](https://i2.mjj.rip/2024/06/09/31c0c8046947ca7544cd6b667d22e8d4.png)\n\n添加完成后把界面拉到最下面，找到修改快捷键，在 `打字` 那一选项中可以修改切换中英文的快捷键，按自己喜好设置即可\n\n![0b6fc8f34b6051941e22562c6c4b2087.png](https://i2.mjj.rip/2024/06/09/0b6fc8f34b6051941e22562c6c4b2087.png)\n\n到这里，Ubuntu基本上就安装好了\n\n\n### 美化\n\n在设置的 `外观` 选项中可以修改侧栏的形态，主题颜色等设置，按 `ctrl+alt+t` 可以唤出终端，右键终端面板选择 `配置文件首选项(P)` 可以修改终端的背景颜色，字体等设置，这里晒一下我的外观设置\n\n![5f1cb5602945cb67d20afb3a87c084a8.png](https://i2.mjj.rip/2024/06/09/5f1cb5602945cb67d20afb3a87c084a8.png)","slug":"ubuntu-installation","published":1,"updated":"2024-06-08T18:58:14.404Z","comments":1,"layout":"post","photos":[],"_id":"clx6hajma0007i960c9ehfz69","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>ubuntu一直对驱动安装不是很友好，特别是一些比较老的版本，每次安装Nvidia驱动都是一场豪赌，顺利安装，或是<strong>重装系统</strong>。</p>\n<p>有一段时间，我几乎是把能够下载到的所有版本的linux发行版试了个遍（<code>Redmi G 2021 骁龙版</code>），最终发现最为稳定的版本是最新的<code>ubuntu 24.04</code></p>\n<p>对于开发，我需要在<code>ubuntu</code>上运行<code>ros2</code>系统，编写<code>C/Cpp</code>程序，开发嵌入式，<code>ros2</code>的版本是和<code>ubuntu</code>版本强耦合的，但使用<code>docker</code>可以较为完美的解决这个问题，所以使用<code>ubuntu 24.04</code>对我的开发需求是没有什么阻碍的</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"制作Ventoy启动盘\"><a href=\"#制作Ventoy启动盘\" class=\"headerlink\" title=\"制作Ventoy启动盘\"></a>制作Ventoy启动盘</h3><p>Ventoy是比较优雅的多系统装机方案，其安装较为简单，可以看看<a href=\"https://www.appinn.com/ventoy/\">这个教程</a></p>\n<h3 id=\"下载ubuntu镜像\"><a href=\"#下载ubuntu镜像\" class=\"headerlink\" title=\"下载ubuntu镜像\"></a>下载ubuntu镜像</h3><p><a href=\"https://ubuntu.com/download/desktop\">Ubuntu Desktop Download Page</a></p>\n<h2 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h2><p>查询自己电脑如何进入Bios，<strong>关闭安全启动</strong>，选择从<strong>U盘</strong>启动，随后看到下面这个界面，选择正确的镜像，回车进入安装，启动方式<strong>默认</strong>即可</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/ec1bf6dc99ba06a89ee1c8f51e6e8688.png\" alt=\"ec1bf6dc99ba06a89ee1c8f51e6e8688.png\"></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/7b893de671032292bfe433437d5fe4f0.png\" alt=\"7b893de671032292bfe433437d5fe4f0.png\"></p>\n<p>等待Ubuntu安装程序启动，随后你会看到这样一个界面，默认使用English即可</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/18a688f82399d5d9abcd3ea6efcdce42.png\" alt=\"18a688f82399d5d9abcd3ea6efcdce42.png\"></p>\n<p>一路默认下一步，到选择网络的界面，点击 <code>Connect to a WiFi network</code> 连接网络，当然，使用有线网络也是可以的</p>\n<p>之后没有提及的界面默认下一步即可</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/c9c4af26cd5468a89b9b059579f122ab.png\" alt=\"c9c4af26cd5468a89b9b059579f122ab.png\"></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/c2cca4f755c49e028f19b5da9e007a19.png\" alt=\"c2cca4f755c49e028f19b5da9e007a19.png\"></p>\n<p>随后到达 <code>Install recommended proprietary sofrware?</code> 界面，把两个推荐选项都勾选上，第一个选项是自动安装一些驱动，诸如nvidia驱动，第二个是额外安装一些视频的解码格式及其他的媒体格式解码，这样就不需要体验手动安装nvidia驱动的痛苦了</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/33c8aa4b0dbb31969fcbde5fa705c204.png\" alt=\"33c8aa4b0dbb31969fcbde5fa705c204.png\"></p>\n<p>下面到达 <code>How do you want to install Ubuntu?</code> 界面，选择安装ubuntu的位置，<code>Erase disk and install Ubuntu</code> 表示覆盖一整块硬盘安装，<code>Manual installation</code> 是自己指定安装的位置，可以指定在哪块硬盘分区安装</p>\n<p>这里我们选择手动安装，即第二个选项</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/e57f633ca700a2056a4d46378543ad73.png\" alt=\"e57f633ca700a2056a4d46378543ad73.png\"></p>\n<p>在 <code>Manual partitioning</code> 界面我们可以对分区进行一些操作，从下面这张图可以看到有两块盘，第一块是U盘，62.06GB，第二块就是电脑上的固态硬盘了，鼠标点击分区，再点击左下角的 <code>-</code> ，就可以删除那块分区，删除后的分区会合并在 <code>Free space</code> 里面，这里我们不需要保留分区，如果别的分区装了系统，可以手动保留，注意仔细检查删除的分区是不需要使用的</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/cfbe428dc4eb0cd2a1c247a61e68ea17.png\" alt=\"cfbe428dc4eb0cd2a1c247a61e68ea17.png\"></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/8ddb4dfedb2e5def40dbaa472cc01468.png\" alt=\"8ddb4dfedb2e5def40dbaa472cc01468.png\"></p>\n<p>接着点击空闲分区，再点击左下角的 <code>+</code>，进入 <code>create partition</code> 界面，Size默认最大值即可，<code>Used as</code> 表示要使用的文件系统，这里推荐 <strong>Ext4</strong> ，保留默认选项即可，接下来的 <code>Mount Point</code> 选择 <code>/</code>，即挂载根目录，三个选项都完成后点击 <code>OK</code> 即可，然后再点击右下角的 <code>Next</code> 进入下一步</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/e848b37006c5299a41762028c59cdbd8.png\" alt=\"e848b37006c5299a41762028c59cdbd8.png\"></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/46f0168b6e25207048766964d3e389c7.png\" alt=\"46f0168b6e25207048766964d3e389c7.png\"></p>\n<p>创建账户，按照界面给出的信息填写即可，设置账户名字，密码，记住最好不要使用<strong>中文</strong>，时刻防范<strong>编码问题</strong></p>\n<p>随后选择时区(Time Zone)选择中国上海，也只能选择这个，都选完后到确认选项界面确认即可</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/1095ad777a5edd9fa5e7dc78db95b46c.png\" alt=\"1095ad777a5edd9fa5e7dc78db95b46c.png\"></p>\n<p>接着等待安装完成</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/7e9f8a3326782c93443e97f2f32737d5.png\" alt=\"7e9f8a3326782c93443e97f2f32737d5.png\"></p>\n<p>重启，拔出U盘，按Enter进入系统</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/374731a787dc31c2a9d492ec969047ad.png\" alt=\"374731a787dc31c2a9d492ec969047ad.png\"></p>\n<p>开机有一个 <code>Welcome Ubuntu</code> 界面卡，跳过就行，如果有信息洁癖可以拒绝<code>分享信息帮助Ubuntu</code></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/5e0f81975c685551a6e08e508bc1ca6a.png\" alt=\"5e0f81975c685551a6e08e508bc1ca6a.png\"></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/a3f6109d08923f726a256f4b1c7b74e9.png\" alt=\"a3f6109d08923f726a256f4b1c7b74e9.png\"></p>\n<h2 id=\"系统设置\"><a href=\"#系统设置\" class=\"headerlink\" title=\"系统设置\"></a>系统设置</h2><h3 id=\"设置中文\"><a href=\"#设置中文\" class=\"headerlink\" title=\"设置中文\"></a>设置中文</h3><p>打开设置界面，点击右上角的三个图标可以打开一个面板，在那里你可以找到齿轮图表，那就是设置</p>\n<p>在左边一栏找到 <code>System</code> ，点击后在右边选择 <code>Region &amp; Language</code> 选项</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/af372e82c777d43181b4a67d4d0e87ab.png\" alt=\"af372e82c777d43181b4a67d4d0e87ab.png\"></p>\n<p>接着点击第一个选项 <code>Manage installed Languages</code> ，点击后在弹出来的选项卡中选择 <code>install</code></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/2b9f955ccd7bb8b311bf07670c4c7c5a.png\" alt=\"2b9f955ccd7bb8b311bf07670c4c7c5a.png\"></p>\n<p>等待下载完成后，在界面中找到 <code>Install/Remove Languages...</code> ，点击</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/a5429cfe0c4a0e835bc9371965dfc216.png\" alt=\"a5429cfe0c4a0e835bc9371965dfc216.png\"></p>\n<p>找到并勾选 <code>Chinese(simplified)</code> ，点击右下角的 <code>Apply</code></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/094f964f1be5fc412ca09827b26bd68b.png\" alt=\"094f964f1be5fc412ca09827b26bd68b.png\"></p>\n<p>完成后，选项卡上出现<code>汉语(中国)</code>选项，把它拖到第一个</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/d5e27cb120cc03a6691e5c500a04db43.png\" alt=\"d5e27cb120cc03a6691e5c500a04db43.png\"></p>\n<p>完成后关掉设置，注销账户或者重新登陆，这几个操作都在右上角三个图标点出的卡片中完成，Logout 即可，然后重新登陆系统，会弹出一个警告，选择 <code>保留旧的名称(K)</code>（中文文件夹是不可接受的！）</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/b70b12009fc3b5519f212740b4202adc.png\" alt=\"b70b12009fc3b5519f212740b4202adc.png\"></p>\n<p>不出意外的话，你的Ubuntu已经是中文了，除了意外，就重启一下，重新加载系统即可</p>\n<h3 id=\"设置中文输入法\"><a href=\"#设置中文输入法\" class=\"headerlink\" title=\"设置中文输入法\"></a>设置中文输入法</h3><p>还是找到设置界面，在左边找到 <code>键盘</code> ，点击右边的 <code>+ 添加输入源(A)...</code></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/b0e40a83a6ad757646a705ecd5fd958d.png\" alt=\"b0e40a83a6ad757646a705ecd5fd958d.png\"></p>\n<p>然后选择 <code>中文(智能拼音)</code> ，点击 <code>添加(A)</code></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/31c0c8046947ca7544cd6b667d22e8d4.png\" alt=\"31c0c8046947ca7544cd6b667d22e8d4.png\"></p>\n<p>添加完成后把界面拉到最下面，找到修改快捷键，在 <code>打字</code> 那一选项中可以修改切换中英文的快捷键，按自己喜好设置即可</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/0b6fc8f34b6051941e22562c6c4b2087.png\" alt=\"0b6fc8f34b6051941e22562c6c4b2087.png\"></p>\n<p>到这里，Ubuntu基本上就安装好了</p>\n<h3 id=\"美化\"><a href=\"#美化\" class=\"headerlink\" title=\"美化\"></a>美化</h3><p>在设置的 <code>外观</code> 选项中可以修改侧栏的形态，主题颜色等设置，按 <code>ctrl+alt+t</code> 可以唤出终端，右键终端面板选择 <code>配置文件首选项(P)</code> 可以修改终端的背景颜色，字体等设置，这里晒一下我的外观设置</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/5f1cb5602945cb67d20afb3a87c084a8.png\" alt=\"5f1cb5602945cb67d20afb3a87c084a8.png\"></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>ubuntu一直对驱动安装不是很友好，特别是一些比较老的版本，每次安装Nvidia驱动都是一场豪赌，顺利安装，或是<strong>重装系统</strong>。</p>\n<p>有一段时间，我几乎是把能够下载到的所有版本的linux发行版试了个遍（<code>Redmi G 2021 骁龙版</code>），最终发现最为稳定的版本是最新的<code>ubuntu 24.04</code></p>\n<p>对于开发，我需要在<code>ubuntu</code>上运行<code>ros2</code>系统，编写<code>C/Cpp</code>程序，开发嵌入式，<code>ros2</code>的版本是和<code>ubuntu</code>版本强耦合的，但使用<code>docker</code>可以较为完美的解决这个问题，所以使用<code>ubuntu 24.04</code>对我的开发需求是没有什么阻碍的</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"制作Ventoy启动盘\"><a href=\"#制作Ventoy启动盘\" class=\"headerlink\" title=\"制作Ventoy启动盘\"></a>制作Ventoy启动盘</h3><p>Ventoy是比较优雅的多系统装机方案，其安装较为简单，可以看看<a href=\"https://www.appinn.com/ventoy/\">这个教程</a></p>\n<h3 id=\"下载ubuntu镜像\"><a href=\"#下载ubuntu镜像\" class=\"headerlink\" title=\"下载ubuntu镜像\"></a>下载ubuntu镜像</h3><p><a href=\"https://ubuntu.com/download/desktop\">Ubuntu Desktop Download Page</a></p>\n<h2 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h2><p>查询自己电脑如何进入Bios，<strong>关闭安全启动</strong>，选择从<strong>U盘</strong>启动，随后看到下面这个界面，选择正确的镜像，回车进入安装，启动方式<strong>默认</strong>即可</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/ec1bf6dc99ba06a89ee1c8f51e6e8688.png\" alt=\"ec1bf6dc99ba06a89ee1c8f51e6e8688.png\"></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/7b893de671032292bfe433437d5fe4f0.png\" alt=\"7b893de671032292bfe433437d5fe4f0.png\"></p>\n<p>等待Ubuntu安装程序启动，随后你会看到这样一个界面，默认使用English即可</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/18a688f82399d5d9abcd3ea6efcdce42.png\" alt=\"18a688f82399d5d9abcd3ea6efcdce42.png\"></p>\n<p>一路默认下一步，到选择网络的界面，点击 <code>Connect to a WiFi network</code> 连接网络，当然，使用有线网络也是可以的</p>\n<p>之后没有提及的界面默认下一步即可</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/c9c4af26cd5468a89b9b059579f122ab.png\" alt=\"c9c4af26cd5468a89b9b059579f122ab.png\"></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/c2cca4f755c49e028f19b5da9e007a19.png\" alt=\"c2cca4f755c49e028f19b5da9e007a19.png\"></p>\n<p>随后到达 <code>Install recommended proprietary sofrware?</code> 界面，把两个推荐选项都勾选上，第一个选项是自动安装一些驱动，诸如nvidia驱动，第二个是额外安装一些视频的解码格式及其他的媒体格式解码，这样就不需要体验手动安装nvidia驱动的痛苦了</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/33c8aa4b0dbb31969fcbde5fa705c204.png\" alt=\"33c8aa4b0dbb31969fcbde5fa705c204.png\"></p>\n<p>下面到达 <code>How do you want to install Ubuntu?</code> 界面，选择安装ubuntu的位置，<code>Erase disk and install Ubuntu</code> 表示覆盖一整块硬盘安装，<code>Manual installation</code> 是自己指定安装的位置，可以指定在哪块硬盘分区安装</p>\n<p>这里我们选择手动安装，即第二个选项</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/08/e57f633ca700a2056a4d46378543ad73.png\" alt=\"e57f633ca700a2056a4d46378543ad73.png\"></p>\n<p>在 <code>Manual partitioning</code> 界面我们可以对分区进行一些操作，从下面这张图可以看到有两块盘，第一块是U盘，62.06GB，第二块就是电脑上的固态硬盘了，鼠标点击分区，再点击左下角的 <code>-</code> ，就可以删除那块分区，删除后的分区会合并在 <code>Free space</code> 里面，这里我们不需要保留分区，如果别的分区装了系统，可以手动保留，注意仔细检查删除的分区是不需要使用的</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/cfbe428dc4eb0cd2a1c247a61e68ea17.png\" alt=\"cfbe428dc4eb0cd2a1c247a61e68ea17.png\"></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/8ddb4dfedb2e5def40dbaa472cc01468.png\" alt=\"8ddb4dfedb2e5def40dbaa472cc01468.png\"></p>\n<p>接着点击空闲分区，再点击左下角的 <code>+</code>，进入 <code>create partition</code> 界面，Size默认最大值即可，<code>Used as</code> 表示要使用的文件系统，这里推荐 <strong>Ext4</strong> ，保留默认选项即可，接下来的 <code>Mount Point</code> 选择 <code>/</code>，即挂载根目录，三个选项都完成后点击 <code>OK</code> 即可，然后再点击右下角的 <code>Next</code> 进入下一步</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/e848b37006c5299a41762028c59cdbd8.png\" alt=\"e848b37006c5299a41762028c59cdbd8.png\"></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/46f0168b6e25207048766964d3e389c7.png\" alt=\"46f0168b6e25207048766964d3e389c7.png\"></p>\n<p>创建账户，按照界面给出的信息填写即可，设置账户名字，密码，记住最好不要使用<strong>中文</strong>，时刻防范<strong>编码问题</strong></p>\n<p>随后选择时区(Time Zone)选择中国上海，也只能选择这个，都选完后到确认选项界面确认即可</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/1095ad777a5edd9fa5e7dc78db95b46c.png\" alt=\"1095ad777a5edd9fa5e7dc78db95b46c.png\"></p>\n<p>接着等待安装完成</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/7e9f8a3326782c93443e97f2f32737d5.png\" alt=\"7e9f8a3326782c93443e97f2f32737d5.png\"></p>\n<p>重启，拔出U盘，按Enter进入系统</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/374731a787dc31c2a9d492ec969047ad.png\" alt=\"374731a787dc31c2a9d492ec969047ad.png\"></p>\n<p>开机有一个 <code>Welcome Ubuntu</code> 界面卡，跳过就行，如果有信息洁癖可以拒绝<code>分享信息帮助Ubuntu</code></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/5e0f81975c685551a6e08e508bc1ca6a.png\" alt=\"5e0f81975c685551a6e08e508bc1ca6a.png\"></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/a3f6109d08923f726a256f4b1c7b74e9.png\" alt=\"a3f6109d08923f726a256f4b1c7b74e9.png\"></p>\n<h2 id=\"系统设置\"><a href=\"#系统设置\" class=\"headerlink\" title=\"系统设置\"></a>系统设置</h2><h3 id=\"设置中文\"><a href=\"#设置中文\" class=\"headerlink\" title=\"设置中文\"></a>设置中文</h3><p>打开设置界面，点击右上角的三个图标可以打开一个面板，在那里你可以找到齿轮图表，那就是设置</p>\n<p>在左边一栏找到 <code>System</code> ，点击后在右边选择 <code>Region &amp; Language</code> 选项</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/af372e82c777d43181b4a67d4d0e87ab.png\" alt=\"af372e82c777d43181b4a67d4d0e87ab.png\"></p>\n<p>接着点击第一个选项 <code>Manage installed Languages</code> ，点击后在弹出来的选项卡中选择 <code>install</code></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/2b9f955ccd7bb8b311bf07670c4c7c5a.png\" alt=\"2b9f955ccd7bb8b311bf07670c4c7c5a.png\"></p>\n<p>等待下载完成后，在界面中找到 <code>Install/Remove Languages...</code> ，点击</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/a5429cfe0c4a0e835bc9371965dfc216.png\" alt=\"a5429cfe0c4a0e835bc9371965dfc216.png\"></p>\n<p>找到并勾选 <code>Chinese(simplified)</code> ，点击右下角的 <code>Apply</code></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/094f964f1be5fc412ca09827b26bd68b.png\" alt=\"094f964f1be5fc412ca09827b26bd68b.png\"></p>\n<p>完成后，选项卡上出现<code>汉语(中国)</code>选项，把它拖到第一个</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/d5e27cb120cc03a6691e5c500a04db43.png\" alt=\"d5e27cb120cc03a6691e5c500a04db43.png\"></p>\n<p>完成后关掉设置，注销账户或者重新登陆，这几个操作都在右上角三个图标点出的卡片中完成，Logout 即可，然后重新登陆系统，会弹出一个警告，选择 <code>保留旧的名称(K)</code>（中文文件夹是不可接受的！）</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/b70b12009fc3b5519f212740b4202adc.png\" alt=\"b70b12009fc3b5519f212740b4202adc.png\"></p>\n<p>不出意外的话，你的Ubuntu已经是中文了，除了意外，就重启一下，重新加载系统即可</p>\n<h3 id=\"设置中文输入法\"><a href=\"#设置中文输入法\" class=\"headerlink\" title=\"设置中文输入法\"></a>设置中文输入法</h3><p>还是找到设置界面，在左边找到 <code>键盘</code> ，点击右边的 <code>+ 添加输入源(A)...</code></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/b0e40a83a6ad757646a705ecd5fd958d.png\" alt=\"b0e40a83a6ad757646a705ecd5fd958d.png\"></p>\n<p>然后选择 <code>中文(智能拼音)</code> ，点击 <code>添加(A)</code></p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/31c0c8046947ca7544cd6b667d22e8d4.png\" alt=\"31c0c8046947ca7544cd6b667d22e8d4.png\"></p>\n<p>添加完成后把界面拉到最下面，找到修改快捷键，在 <code>打字</code> 那一选项中可以修改切换中英文的快捷键，按自己喜好设置即可</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/0b6fc8f34b6051941e22562c6c4b2087.png\" alt=\"0b6fc8f34b6051941e22562c6c4b2087.png\"></p>\n<p>到这里，Ubuntu基本上就安装好了</p>\n<h3 id=\"美化\"><a href=\"#美化\" class=\"headerlink\" title=\"美化\"></a>美化</h3><p>在设置的 <code>外观</code> 选项中可以修改侧栏的形态，主题颜色等设置，按 <code>ctrl+alt+t</code> 可以唤出终端，右键终端面板选择 <code>配置文件首选项(P)</code> 可以修改终端的背景颜色，字体等设置，这里晒一下我的外观设置</p>\n<p><img src=\"https://i2.mjj.rip/2024/06/09/5f1cb5602945cb67d20afb3a87c084a8.png\" alt=\"5f1cb5602945cb67d20afb3a87c084a8.png\"></p>\n"},{"title":"简明CAN通讯驱动M2006电机指引","date":"2024-05-12T10:58:16.000Z","_content":"\n## 引子\n\n现在是2024年1月18号晚上零点半，电路工数等困难科目已经考完，只是剩一门马原\n\n临近寒假的这一段时间颇为闲暇，于是在工作室寻得一些 **M2006无刷电机**和 **C610电调** ，加上手头上的 **C板**，试着组一台个人未来比赛用的四驱底盘\n\n依据大疆资料来看，电调需要使用CAN通信来控制，正中知识盲区，于是放下手中的马原教材（其实根本没有拿起来过），学习一下CAN\n\n## 环境准备\n\n### 前置知识\n- STM32CubeMX的使用\n- 一定的C语言使用经验\n\n### 软件环境\n\n- 代码生成 `STM32CubeMX` （以HAL库为基础）\n- 编译工具 `arm-none-eabi工具链`（使用其他编译器亦可）\n- 编写环境 `VSCode`+`Embedded IDE` （Keil和CubeIDE亦可）\n- 调试工具 `Ozone`（本篇仅以此方法调试）\n\n### 硬件环境\n\n- 主控芯片 `大疆C板-STM32F407IGH6`\n- 烧录工具 `JLink`\n- 通讯目标 `C610电调`\n\n### 设备文档\n\n- [C610电调使用说明](https://rm-static.djicdn.com/tem/RM%20C610%E6%97%A0%E5%88%B7%E7%94%B5%E6%9C%BA%E8%B0%83%E9%80%9F%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%20%E5%8F%91%E5%B8%83%E7%89%88.pdf)\n\n- [RoboMaster 开发板C型](https://rm-static.djicdn.com/tem/35228/RoboMaster%20%20%E5%BC%80%E5%8F%91%E6%9D%BF%20C%20%E5%9E%8B%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C.pdf)\n\n- [C板原理图&位号图](https://rm-static.djicdn.com/tem/35228/RoboMaster%20%E5%BC%80%E5%8F%91%E6%9D%BFC%E5%9E%8B%E5%8E%9F%E7%90%86%E5%9B%BE&%E4%BD%8D%E5%8F%B7%E5%9B%BE.zip)\n\n## CAN的印象\n\n### 何为CAN？\n\n在查阅了很多资料后，我提取了几个关键词：`总线结构`，`串行通讯`，`标准协议`，只需要两条线，即可解决沿途中设备的通信需求，例如，使用一块主控板加上CAN总线就可以很轻松的控制多个电机，极大缓解了布线带给我们的`焦虑`\n\n<center>\n<img src=https://pic.imgdb.cn/item/66424bb50ea9cb1403870220.jpg\n    width=80% \n    />\n</center>\n<center>\n布线地狱\n</center>\n<br>\n\n至于书面，准确，乃至于繁缛的官方定义，我便不写入文章里，百度看看就好\n\n### CAN的硬件组成\n\n我们可以称一个通讯单元为**节点**，一个节点一般有三个部分：**微控制器**， **CAN控制器**，**CAN收发器**，总线两端须串上120Ω的电阻，以模拟无限远传输线的特性阻抗，通过开关等手段来选择是否使用这个**电阻**\n\n<center>\n<img src=https://pic.imgdb.cn/item/66424b9a0ea9cb140386e3ab.png width=80%/>\n</center>\n<center>\nCAN总线结构\n</center>\n<br>\n\nSTM32芯片会自带CAN外设拓展，名为**bxCAN** `(Basic Extended CAN  - 基本拓展CAN)`，详细内容此处不展开\n\n要注意，一般的STM32开发板是不带有CAN收发器的，需要自己另外购买，大疆C板是自带CAN收发器的，所以可以直接使用\n\n## CAN的回环测试\n\n姑且暂停理论部分的讲解，**繁杂的原理**总是令人头大，使人望而却步，我们先**启动**开发软件，走通一个通讯的流程，再来细细分析其中的缘由，或者跳过理论，只掌握软件层的流程也是可以的\n\n基本步骤：`配置STM32CubeMX` > `配置CAN过滤器` > `发送接收报文`\n\n### 配置STM32CubeMX\n\n启动CubeMX，选好芯片类型创建项目，首先把**常规设置**搞定\n\n关于C板的一些**注意点**\n\n- C板默认的`CAN1 PIN`不是原理图上的位置, 需要修改一下\n- 注意C板的晶振是**12MHz**，要把输入频率调整成12MHz\n- C板的外设电源和swd输入的**电源不在一条线路**，不能通过**swd口供电**，需要插上**24v电源**或者**usb口供电**，否则CAN的收发器将不工作，无法正常收发数据，当然，**回环模式**还是可以收到的，因为回环的数据不经过CAN收发器\n- 一对一连接C板和电调时，需要将电调上的电阻打开，一对多时，把最远端的电阻打开即可，保持CAN总线两端串着电阻\n\n\n<center><img src=https://pic.imgdb.cn/item/66424ba80ea9cb140386f69c.png width=80%/></center>\n<center>RCC设置</center>\n<br>\n\n<center><img src=https://pic.imgdb.cn/item/66424bb10ea9cb140386fee3.png width=80%/></center>\n<center>SWD设置</center>\n<br>\n\n\n<center><img src=https://pic.imgdb.cn/item/66424b9b0ea9cb140386e69c.png width=80%/></center>\n<center>时钟设置</center>\n<br>\n\n<center><img src=https://pic.imgdb.cn/item/66424b970ea9cb140386de39.png width=80%/></center>\n<center>.c文件和.h文件分开生成</center>\n<br>\n\n项目管理类型之类的根据**自己使用的开发环境**来设置即可\n\n简单写一个点灯测试一下\n\n这是板载灯的连线\n\n- `TIM5_CH1` - `LED_BLUE`\n- `TIM5_CH2` - `LED_GREEN`\n- `TIM5_CH3` - `LED_RED`\n\n```cpp\nvoid breath_led()\n{\n    for (int i = 0; i < 100; i++) {\n        HAL_Delay(10);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 20000 * i / 100);\n    }\n\n    for (int i = 100; i > 0; i--) {\n        HAL_Delay(10);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 20000 * i / 100);\n    }\n}\n```\n将其放入主循环中运行，理所应当地成功了\n\n\n现在开始配置**CAN通信**\n\nCubeMX界面中，在`CAN1`的**Parameter Settings**我们可以看到\n\n- **Bit Timings Parameters** - 配置传输速度\n    - **Prescaler (for Time Quantum)** - 分频，调整TQ（Time Quantum）大小\n    - Time Quantum - 最小时间单位\n    - **Time Quanta in Bit Segment 1** - 相位缓冲段1段占几个TQ\n    - **Time Quanta in Bit Segment 2** - 相位缓冲段2段占几个TQ\n    - Time for one Bit\n    - Baud Rate - 波特率\n    - **ReSynchronization Jump Width** - 再同步补偿宽度\n- **Basic Parameters** - 基本参数\n    - Time Triggered Communication Mode - 时间触发模式\n    - Automatic Bus-off Management - 自动离线管理\n    - Automatic Wake-Up Mode - 自动唤醒\n    - Automatic Retransmission - 自动重传\n    - Receive Fifo Locked Mode - 锁定模式\n    - Transmit Fifo Priority - 报文发送优先级\n- **Advanced Parameters** - 高级参数\n    - **Operating Mode** -*运行模式：`正常模式` `静默模式` `回环模式` `回环静默模式`\n\n而 **NVIC Interrupt Table** 中有\n\n- CAN1 TX interrupts\n- CAN1 RX0 interrupts\n- CAN1 RX1 interrupt\n- CAN1 SCE interrupt\n\n这是我们初期需要关注的配置列表\n\n**1. 设置波特率**\n\n先打开CAN1的`Activated`选项, 其他的选项才能显示出来\n\n<center><img src=https://pic.imgdb.cn/item/66424b930ea9cb140386dabf.png width=80%/></center>\n\n以我的需求为例，查阅大疆官方资料可以得知\n\n> 将 CAN 信号线连接到控制板接收 CAN 控制指令，CAN 总线比特率为 1Mbps \n\n所以我们需要将CAN通讯的比特率 `baud rate` 设置为 `1000000 bit/s`\n\n根据波特率计算公式 BaudRate = TQ * ( Sync + TBS1 + TBS2) , 我们得到如下设置\n\n<center><img src=https://pic.imgdb.cn/item/66424b950ea9cb140386dce8.png width=80%/></center>\n<center>TQ * ( 4 + 9 + 1 ) = 1000ns</center>\n\n根据实际情况计算一下即可，也可以多选几个选项，把正确的波特率尝试出来，**灰色的选项**就是CubeMX帮我们计算好的数值\n\n**别忘了修改CAN1的引脚**\n\n<center><img src=https://pic.imgdb.cn/item/66424b980ea9cb140386e0d0.png width=80%/></center>\n<center>CAN引脚设置</center>\n<br>\n\n**2. 打开中断**\n\n处理电调发送的电机信息，需要中断来调用回调函数，于是打开**接收中断**\n\n在接收和发送信息前，我们会遇到一个CAN通信的抽象概念 —— **邮箱**\n\n这里我使用的单片机中，CAN外设具有两个用于接收信息的**邮箱**，我们命其为 `FIFO0`和`FIFO1`，每个邮箱都有**一个过滤器**，用于筛选报文，可以存放**三条报文**，在**中断设置**中对应 `CAN1 RX0 interrupt`和`CAN1 RX1 interrupt`，我们打开需要使用的那一个就可以\n\n<center><img src=https://pic.imgdb.cn/item/66424b9d0ea9cb140386e883.png width=80%/></center>\n\n既然存在接收邮箱，相应的，就有**发送邮箱**，我们现在只要知道发送邮箱存在**发送优先级**且每个邮箱只能存放**一条报文**\n\n现在，我们已经在CubeMX中配置好了CAN，下一步就是要配置**CAN过滤器**\n\n### 配置CAN过滤器\n\n前面我们说到，STM32上有两个**邮箱**用于接收报文，为了接收我们想要的报文，我们需要配置一下过滤器，把不想接受的报文过滤掉，只放行想要的报文\n\n配置过滤器需要我们自己手写，并未提前生成，但HAL库提供了过滤器配置参数的结构体类型，我们只需要**给这个结构体赋值**，然后**调用HAL提供的初始化函数**即可完成配置, 下面的代码仅仅是**展示**, 还不需要写进项目里\n\n```cpp\n// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h\n\n// 过滤器结构体\ntypedef struct\n{\n  uint32_t FilterIdHigh;\n  uint32_t FilterIdLow;\n  uint32_t FilterMaskIdHigh;\n  uint32_t FilterMaskIdLow; \n  uint32_t FilterFIFOAssignment; \n  uint32_t FilterBank;        \n  uint32_t FilterMode;\n  uint32_t FilterScale;\n  uint32_t FilterActivation; \n  uint32_t SlaveStartFilterBank; \n} CAN_FilterTypeDef;\n\n// 配置函数\nHAL_StatusTypeDef HAL_CAN_ConfigFilter(\n    CAN_HandleTypeDef *hcan, \n    CAN_FilterTypeDef *sFilterConfig\n    );\n```\n\n具体的使用和结构体的定义随后再讲，我们只需要对这个结构体和函数有一个**大概的印象**即可\n\n### 发送接收报文\n\n首先是**发送**\n\n我预期使用一块主控与四个电机通信，那么在发送报文时，就需要指定**发送给哪一个电机**，以及**其他一些信息**，比如发送`信息的长度`，`信息的类型`，`信息ID类型`等等，HAL把这些发送需要的信息定义成了一个结构体 `CAN_TxHeaderTypeDef`,我们只需要为每一个电机声明一个 `CAN_TxHeaderTypeDef` 结构体，再确定好发送的数据内容，就可以将数据发送到指定的电机中\n\n我们回想一下，在设置接收中断时，是不是提到了**邮箱**的概念？**STM32F407IGHx**为我们提供了三个**发送邮箱**，在发送时，HAL库会自动选择空闲的邮箱，然后将**实际使用的邮箱**返回给我们，这也解释了我们传入函数的是指向邮箱的指针，而非一个邮箱编号的常量\n\nHAL库理所应当地帮我们写好了发送的函数，只要传入`can的句柄`，`报文头结构体`，`数据信息`和`邮箱`即可\n\n下面的代码同样不需要写进项目\n```cpp\n// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h\n\n// 发送函数的声明\nHAL_StatusTypeDef HAL_CAN_AddTxMessage(\n    CAN_HandleTypeDef *hcan, \n    CAN_TxHeaderTypeDef *pHeader, \n    uint8_t aData[], \n    uint32_t *pTxMailbox\n    )；\n\n// 邮箱编号的定义\n#define CAN_TX_MAILBOX0             (0x00000001U)  /*!< Tx Mailbox 0  */\n#define CAN_TX_MAILBOX1             (0x00000002U)  /*!< Tx Mailbox 1  */\n#define CAN_TX_MAILBOX2             (0x00000004U)  /*!< Tx Mailbox 2  */\n```\n\n然后是**接收**\n\n总线上的报文在经过了我们设置的**过滤器**后，正确的报文会**触发**我们设置的**中断**，我们便可以在中断的**回调函数**中对收到的数据进行处理了\n\n我们只需要找到HAL库为我们提供的中断函数，对其进行覆写即可\n\n以下是示例代码\n\n```cpp\n// 这是一种使用情况\n\n// 回调函数\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n\tif(hcan->Instance ==CAN1)\n\t{\n\t  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, date_CAN1); \n\t  return ;\n\t}\n}\n\n// 这个函数可以从报文中分离出我们想要的信息\nHAL_StatusTypeDef HAL_CAN_GetRxMessage(\n    CAN_HandleTypeDef *hcan,            // can句柄\n    uint32_t RxFifo,                    // 接收邮箱编号\n    CAN_RxHeaderTypeDef *pHeader,       // 接收报文头\n    uint8_t aData[]                     // 数据\n    )；\n\n// 接收邮箱编号的定义\n#define CAN_RX_FIFO0                (0x00000000U)  /*!< CAN receive FIFO 0 */\n#define CAN_RX_FIFO1                (0x00000001U)  /*!< CAN receive FIFO 1 */\n```\n\n现在我们配置过滤器和发送接收这两个流程应该是有了一个**大概的认知**，来做一个简单的测试吧\n\n将运行模式设置为**回环发送**，我们就可以收到自己发送的报文，前提是能通过邮箱过滤，其他配置依照上文即可\n\n<center><img src=https://pic.imgdb.cn/item/66424b9e0ea9cb140386eb23.png width=80%/></center>\n\n记得重新生成代码\n\n然后我们写一个过滤器的配置, 下面的代码按照定义函数的方式在某个地方写下, 我都写在了`main.c`中\n\n```cpp\nvoid can_filter_init()\n{\n    CAN_FilterTypeDef config;\n\n    // 报文头结构体的赋值\n    // 此处配置为接收全部报文，以便于测试\n    config.FilterActivation     = ENABLE;                // 启用过滤器\n    config.FilterBank           = 0;                     // 将要初始化的过滤器组\n    config.SlaveStartFilterBank = 0;                     // 从模式下的过滤器组\n    config.FilterMode           = CAN_FILTERMODE_IDMASK; // 掩码模式\n    config.FilterScale          = CAN_FILTERSCALE_32BIT; // 32位宽\n    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // 配置邮箱0\n    config.FilterIdHigh         = 0x0000;                // 高位0\n    config.FilterIdLow          = 0x0000;                // 低位0\n    config.FilterMaskIdHigh     = 0x0000;                // 掩码高位不检测\n    config.FilterMaskIdLow      = 0x0000;                // 掩码低位不检测\n\n    // 将配置加载进CAN 1中\n    HAL_CAN_ConfigFilter(&hcan1, &config);\n}\n```\n\n初始化CAN\n\n上面过滤器的配置中启用了邮箱0 `CAN_FILTER_FIFO0`，所以在初始化时，我们要打开邮箱0的中断\n\n```cpp\nvoid can_init()\n{\n    can_filter_init();                                                  // 过滤器\n    HAL_CAN_Start(&hcan1);                                              // 开启CAN通讯\n    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  // 开启接收中断\n}\n```\n\n下面这段不用抄, 只是看看中断的类型\n```cpp\n// Hal库中的邮箱接收中断类型\nCAN_IT_RX_FIFO0_MSG_PENDING     /*!< FIFO 0 message pending interrupt */\nCAN_IT_RX_FIFO0_FULL            /*!< FIFO 0 full interrupt            */\nCAN_IT_RX_FIFO0_OVERRUN         /*!< FIFO 0 overrun interrupt         */\nCAN_IT_RX_FIFO1_MSG_PENDING     /*!< FIFO 1 message pending interrupt */\nCAN_IT_RX_FIFO1_FULL            /*!< FIFO 1 full interrupt            */\nCAN_IT_RX_FIFO1_OVERRUN         /*!< FIFO 1 overrun interrupt \n```\n\n接着声明一些必要的变量, 这里就是在`main`函数里面写了\n\n```cpp\nuint8_t can_1_rx[8];    // 接收数据\nuint8_t can_1_tx[8];    // 发送数据\n\nCAN_RxHeaderTypeDef can_1_rx_header;    // 接收报文头\nCAN_TxHeaderTypeDef can_1_tx_header;    // 发送报文头\n\nuint32_t mail_tx = CAN_TX_MAILBOX0;     // 发送邮箱编号\n```\n\n初始化一些参数, 然后调用一些初始化的函数\n\n```cpp\n// 随便创建一种发送报文头结构体\ncan_1_tx_header.StdId              = 0x00000000;\ncan_1_tx_header.ExtId              = 0x12345000;\ncan_1_tx_header.IDE                = CAN_ID_EXT;\ncan_1_tx_header.RTR                = CAN_RTR_DATA;\ncan_1_tx_header.DLC                = 8;\ncan_1_tx_header.TransmitGlobalTime = DISABLE;\n\n// 初始化一些发送的数据\ncan_1_tx[0] = 1;\n\n// 要使用的灯记得开启，根据自己的板子写即可\nHAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);\n// 刚才写的初始化函数用上\ncan_init();\n```\n\n回调函数的覆写, 写在`main.c`中就行\n\n```cpp\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n    if (hcan->Instance == CAN1) {\n        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_1_rx_header, can_1_rx);\n\n        // 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯\n        // 根据自己的板子替换一下点灯的函数\n        if(can_1_rx[0] == 0)\n        {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000);\n        }\n        else if(can_1_rx[0] == 1)\n        {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 0);\n        }\n\n        return;\n    }\n}\n```\n\n在主循环中不断发送报文, 也就是 `while(1)`里面\n\n```cpp\nHAL_CAN_AddTxMessage(&hcan1, &can_1_tx_header, can_1_tx, &mail_tx);\n```\n\n这是我写好的 `main.c` ，注意根据自己使用的板子情况**进行修改**\n\n```cpp\n/* USER CODE BEGIN Header */\n/**\n ******************************************************************************\n * @file           : main.c\n * @brief          : Main program body\n ******************************************************************************\n * @attention\n *\n * Copyright (c) 2024 STMicroelectronics.\n * All rights reserved.\n *\n * This software is licensed under terms that can be found in the LICENSE file\n * in the root directory of this software component.\n * If no LICENSE file comes with this software, it is provided AS-IS.\n *\n ******************************************************************************\n */\n/* USER CODE END Header */\n/* Includes ------------------------------------------------------------------*/\n#include \"main.h\"\n#include \"can.h\"\n#include \"tim.h\"\n#include \"gpio.h\"\n\n/* Private includes ----------------------------------------------------------*/\n/* USER CODE BEGIN Includes */\n\n/* USER CODE END Includes */\n\n/* Private typedef -----------------------------------------------------------*/\n/* USER CODE BEGIN PTD */\n\n/* USER CODE END PTD */\n\n/* Private define ------------------------------------------------------------*/\n/* USER CODE BEGIN PD */\n\n/* USER CODE END PD */\n\n/* Private macro -------------------------------------------------------------*/\n/* USER CODE BEGIN PM */\n\n/* USER CODE END PM */\n\n/* Private variables ---------------------------------------------------------*/\n\n/* USER CODE BEGIN PV */\n\nuint8_t can_1_rx[8]; // 接收数据\nuint8_t can_1_tx[8]; // 发送数据\n\nCAN_RxHeaderTypeDef can_1_rx_header; // 接收保报文头\nCAN_TxHeaderTypeDef can_1_tx_header; // 发送报文头\n\nuint32_t mail_tx = CAN_TX_MAILBOX0; // 发送邮箱编号\n\n/* USER CODE END PV */\n\n/* Private function prototypes -----------------------------------------------*/\nvoid SystemClock_Config(void);\n/* USER CODE BEGIN PFP */\n\nvoid can_filter_init();\nvoid can_init();\n\n/* USER CODE END PFP */\n\n/* Private user code ---------------------------------------------------------*/\n/* USER CODE BEGIN 0 */\n\nvoid can_filter_init()\n{\n    CAN_FilterTypeDef config;\n\n    // 报文头结构体的赋值\n    // 此处配置为接收全部报文，以便于测试\n    config.FilterActivation     = ENABLE;                // 启用过滤器\n    config.FilterBank           = 0;                     // 将要初始化的过滤器组\n    config.SlaveStartFilterBank = 0;                     // 从模式下的过滤器组\n    config.FilterMode           = CAN_FILTERMODE_IDMASK; // 掩码模式\n    config.FilterScale          = CAN_FILTERSCALE_32BIT; // 32位宽\n    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // 配置邮箱0\n    config.FilterIdHigh         = 0x0000;                // 高位0\n    config.FilterIdLow          = 0x0000;                // 低位0\n    config.FilterMaskIdHigh     = 0x0000;                // 掩码高位不检测\n    config.FilterMaskIdLow      = 0x0000;                // 掩码低位不检测\n\n    // 将配置加载进CAN 1中\n    HAL_CAN_ConfigFilter(&hcan1, &config);\n}\n\nvoid can_init()\n{\n    can_filter_init();                                                 // 过滤器\n    HAL_CAN_Start(&hcan1);                                             // 开启CAN通讯\n    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // 开启接收中断\n}\n\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n    if (hcan->Instance == CAN1) {\n        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_1_rx_header, can_1_rx);\n\n        // 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯\n        // 根据自己的板子替换一下点灯的函数\n        if (can_1_rx[0] == 0) {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000);\n        } else if (can_1_rx[0] == 1) {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 0);\n        }\n\n        return;\n    }\n}\n\n/* USER CODE END 0 */\n\n/**\n * @brief  The application entry point.\n * @retval int\n */\nint main(void)\n{\n    /* USER CODE BEGIN 1 */\n\n    /* USER CODE END 1 */\n\n    /* MCU Configuration--------------------------------------------------------*/\n\n    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n    HAL_Init();\n\n    /* USER CODE BEGIN Init */\n\n    /* USER CODE END Init */\n\n    /* Configure the system clock */\n    SystemClock_Config();\n\n    /* USER CODE BEGIN SysInit */\n\n    /* USER CODE END SysInit */\n\n    /* Initialize all configured peripherals */\n    MX_GPIO_Init();\n    MX_TIM4_Init();\n    MX_TIM5_Init();\n    MX_CAN1_Init();\n    /* USER CODE BEGIN 2 */\n\n    // 随便创建一种发送报文头结构体\n    can_1_tx_header.StdId              = 0x00000000;\n    can_1_tx_header.ExtId              = 0x12345000;\n    can_1_tx_header.IDE                = CAN_ID_EXT;\n    can_1_tx_header.RTR                = CAN_RTR_DATA;\n    can_1_tx_header.DLC                = 8;\n    can_1_tx_header.TransmitGlobalTime = DISABLE;\n\n    can_1_tx[0] = 1;\n\n    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);\n    can_init();\n\n    /* USER CODE END 2 */\n\n    /* Infinite loop */\n    /* USER CODE BEGIN WHILE */\n    while (1) {\n\n        HAL_CAN_AddTxMessage(&hcan1, &can_1_tx_header, can_1_tx, &mail_tx);\n        HAL_Delay(10);\n\n        /* USER CODE END WHILE */\n\n        /* USER CODE BEGIN 3 */\n    }\n    /* USER CODE END 3 */\n}\n\n/**\n * @brief System Clock Configuration\n * @retval None\n */\nvoid SystemClock_Config(void)\n{\n    RCC_OscInitTypeDef RCC_OscInitStruct = {0};\n    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};\n\n    /** Configure the main internal regulator output voltage\n     */\n    __HAL_RCC_PWR_CLK_ENABLE();\n    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);\n\n    /** Initializes the RCC Oscillators according to the specified parameters\n     * in the RCC_OscInitTypeDef structure.\n     */\n    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;\n    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;\n    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;\n    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;\n    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;\n    RCC_OscInitStruct.PLL.PLLM            = 8;\n    RCC_OscInitStruct.PLL.PLLN            = 168;\n    RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;\n    RCC_OscInitStruct.PLL.PLLQ            = 4;\n    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {\n        Error_Handler();\n    }\n\n    /** Initializes the CPU, AHB and APB buses clocks\n     */\n    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;\n    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;\n    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;\n    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;\n\n    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {\n        Error_Handler();\n    }\n}\n\n/* USER CODE BEGIN 4 */\n\n/* USER CODE END 4 */\n\n/**\n * @brief  This function is executed in case of error occurrence.\n * @retval None\n */\nvoid Error_Handler(void)\n{\n    /* USER CODE BEGIN Error_Handler_Debug */\n    /* User can add his own implementation to report the HAL error return state */\n    __disable_irq();\n    while (1) {\n    }\n    /* USER CODE END Error_Handler_Debug */\n}\n\n#ifdef USE_FULL_ASSERT\n/**\n * @brief  Reports the name of the source file and the source line number\n *         where the assert_param error has occurred.\n * @param  file: pointer to the source file name\n * @param  line: assert_param error line source number\n * @retval None\n */\nvoid assert_failed(uint8_t *file, uint32_t line)\n{\n    /* USER CODE BEGIN 6 */\n    /* User can add his own implementation to report the file name and line number,\n       ex: printf(\"Wrong parameters value: file %s on line %d\\r\\n\", file, line) */\n    /* USER CODE END 6 */\n}\n#endif /* USE_FULL_ASSERT */\n\n```\n\n在ozone中查看参数，并实时修改**发送数据**的数值，发现**接收数据**也会实时修改，板载灯反馈正常\n\n若不能使用ozone，也可以在代码中修改发送的数值，重新烧录，查看板载灯的情况\n\n<center><img src=https://pic.imgdb.cn/item/66424ba00ea9cb140386edb5.png width=60%/></center>\n\n回环测试正常，我们可以进行下一步的了解\n\n## CAN与电调通讯\n\n在囫囵吞枣地走通过一遍流程后，我们遇到很很多**复杂的模式和结构体**，这些需要根据实际情况来酌情配置\n\n接下来我们尝试使用C板来与C610通讯，接收信息并发送信息来控制电机\n\n### 接收电机的回馈消息\n\n为了保持代码的可读性，我们将CAN相关代码分离开来\n\n大致结构是底层依赖`base-can`，在其基础上写一层`module-m2006`，在进程中调用这两个部分文件\n\n为了降低理解的难度，暂时不考虑使用其他设备的可能，只针对一个电调和一个电机的情况先写一份控制代码\n\n首先是base-can部分，它负责与底层的交互，直接使用HAL库提供的函数，将底层与应用层隔离\n\n```cpp\n// base-can.h\n\n#pragma once\n#include \"can.h\"\n\nvoid init_can(CAN_HandleTypeDef *hcan);\n\nvoid set_can_tx_header(CAN_TxHeaderTypeDef *header);\n```\n\n```cpp\n// base-can.c\n\n#include \"base-can.h\"\n\n// 仍然使用最简单的配置，接收所有报文\n// 为了统一初始化函数的调用模式，我们将HAL_CAN_ConfigFilter函数的返回值返回\nstatic HAL_StatusTypeDef configure_can_filter(CAN_HandleTypeDef *hcan)\n{\n    CAN_FilterTypeDef config;\n\n    config.FilterActivation     = CAN_FILTER_ENABLE;\n    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;\n    config.FilterMode           = CAN_FILTERMODE_IDMASK;\n    config.FilterScale          = CAN_FILTERSCALE_32BIT;\n    config.FilterIdHigh         = 0x00;\n    config.FilterIdLow          = 0x00;\n    config.FilterMaskIdHigh     = 0x00;\n    config.FilterMaskIdLow      = 0x00;\n    config.FilterBank           = 0;\n    config.SlaveStartFilterBank = 0;\n\n    return HAL_CAN_ConfigFilter(hcan, &config);\n}\n\n// 集中对CAN进行初始化\nvoid init_can(CAN_HandleTypeDef *hcan)\n{\n    if (configure_can_filter(hcan))\n        Error_Handler();\n\n    if (HAL_CAN_Start(hcan))\n        Error_Handler();\n\n    if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING))\n        Error_Handler();\n}\n\n// 根据C610手册，设置发送报文头的内容\nvoid set_can_tx_header(CAN_TxHeaderTypeDef *header)\n{\n    header->StdId              = 0x200;\n    header->IDE                = CAN_ID_STD;\n    header->RTR                = CAN_RTR_DATA;\n    header->DLC                = 8;\n    header->TransmitGlobalTime = DISABLE;\n}\n\n```\n\n上面代码写的十分地局限，没有考虑后期**可能不断变化的需求**，但对于现阶段来说，我们的首要目标是先以最简单的方式，驱动目标电机，现在接着往下写\n\n### 包装与电调通讯的代码\n\n为了方便我们 `get` 和 `control` 电机的状态，可以把对外暴露的api，即电机返回的状态值，用结构体包装，而对于控制电机需要使用到的 `句柄` ，或者说一些必要的 `上下文信息` ,我们也使用结构体将其包装起来，最后将两个结构体包装为电机完整的结构体，这样可以极大地方便函数的调用\n\n```cpp\n// module-m2006.h\n\n#pragma once\n#include \"base-can.h\"\n\ntypedef struct MotorStatus {\n    int16_t angle;\n    int16_t speed;\n    int16_t torque;\n} MotorStatus;\n\ntypedef struct MotorHandle {\n    CAN_HandleTypeDef *hcan;\n    CAN_RxHeaderTypeDef header_rx;\n    CAN_TxHeaderTypeDef header_tx;\n    uint32_t mail;\n} MotorHandle;\n\ntypedef struct Motor {\n    MotorHandle handle;\n    MotorStatus status;\n} Motor;\n\nvoid init_motor(Motor *motor);\n\nvoid get_motor_status(const uint8_t data[8], Motor *motor);\n\nvoid set_motor_current(const int16_t current, Motor *motor);\n```\n\n```cpp\n// module-m2006.c\n\n#include \"module-m2006.h\"\n\n// 初始化关于电机的所有信息\nvoid init_motor(Motor *motor)\n{\n    motor->handle.hcan = &hcan1;\n\n    init_can(motor->handle.hcan);\n    set_can_tx_header(&motor->handle.header_tx);\n}\n\n// 用于从回报文中提取状态信息\n// 按照C610用户手册上给出的高低位数据变换即可\nvoid get_motor_status(const uint8_t data[8], Motor *motor)\n{\n    motor->status.angle  = (data[0] << 8) | data[1];\n    motor->status.speed  = (data[2] << 8) | data[3];\n    motor->status.torque = (data[4] << 8) | data[5];\n}\n\n// 用于设置电机输出电流值\n// 由于目前只使用一个电机，为了方便，直接设置电机电调的ID为1\n// 那么第一位和第二位uint8_t数据就是第一个电机的电流值高低位\n// 依照文档，电流值的范围为 -10000 到 10000\nvoid set_motor_current(const int16_t current, Motor *motor)\n{\n    uint8_t data[8];\n\n    data[0] = current >> 8;\n    data[1] = current | 0xff00;\n\n    HAL_CAN_AddTxMessage(\n        motor->handle.hcan, &motor->handle.header_tx,\n        data, &motor->handle.mail);\n}\n\n```\n在做完前面的工作后，我们只需要调用最上层的`module-motor`提供的初始化函数，就可以对整个系统初始化，然后使用`get_motor_status`获取电机状态，使用`set_motor_current`控制电机电流值\n\n### 主要逻辑和CAN接收回调函数\n\n最后，为了与HAL库生成的文件分离地更彻底一点，我们在CubeMX生成的main.c中，加入我们自定义的进程入口\n\n```cpp\n// 前面代码省略\n\n\n/* USER CODE BEGIN PFP */\nextern void entrypoint();\n/* USER CODE END PFP */\n\n\n// 中间代码省略\n\n\n/* USER CODE BEGIN 2 */\nentrypoint();\n/* USER CODE END 2 */\n\n/* Infinite loop */\n/* USER CODE BEGIN WHILE */\nwhile (1) {\n\n    /* USER CODE END WHILE */\n\n    /* USER CODE BEGIN 3 */\n}\n/* USER CODE END 3 */\n\n\n// 后面代码省略\n```\n\n使用extern声明一个外部函数，接着在CubeMX提供的主循环前插入该函数，我们便可以创建一个entrypoint.c函数来实现`void entrypoint()`\n\n同时我们也可以把回调函数写在这里，保证变量作用域的统一，这样以后对代码增删改查都可以避免直接接触CubeMX直接生成的代码，贯彻了代码**高内聚低耦合**的原则（doge）\n\n\n```cpp\n// entrypoint.c\n\n#include \"main.h\"\n#include \"tim.h\"\n\n#include \"module-m2006.h\"\n\n// entrypoint function from main.h\nvoid entrypoint();\n\nstatic Motor motor;\nstatic int16_t current;\n\n// @brief the main loop function\n// @note control the current of motor every 1 ms\nvoid entrypoint()\n{\n    init_motor(&motor);\n    current = 0;\n\n    while (1) {\n        HAL_Delay(0);\n        set_motor_current(current, &motor);\n    }\n}\n\n// @brief callback when receiving message from motor\n// @note convert the uint8_t data to motor status\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n    if (hcan == &hcan1) {\n        uint8_t data[8];\n\n        HAL_CAN_GetRxMessage(\n            &hcan1, CAN_RX_FIFO0,\n            &motor.handle.header_rx, data);\n\n        get_motor_status(data, &motor);\n\n        return;\n    }\n}\n```\n\n这是代码结构，`activity`中是主要的进程，里面包含了程序自定义入口，也可以在使用实时系统的情况下将任务写在该文件夹下，`dependency`是包装后的库函数，供`activity`调用，`base`是与底层直接接触的库，一般会用到大量的HAL库，负责实现一些通讯协议，而`module`是更高级一层的，一般抽象成为某个外设的驱动库\n\n\n```\n// 注意HAL库生成的代码并没有被写出\n// 请将这些文件结构包含进项目目录中，以保证entrypoint函数能够被顺利链接\n-activity\n  entrypoint.c\n-dependency\n  -base\n    base-can.c\n    base-can.h\n  -module\n    module-m2006.c\n    module-m2006.h\n```\n\n### 连接设备与测试\n\n临时画一个M2006的电机架测试用，放上一张整体的连线图\n\n<center><img src=https://pic.imgdb.cn/item/66424bab0ea9cb140386f880.png width=80%/></center>\n\n<center><img src=https://pic.imgdb.cn/item/66424bad0ea9cb140386fb42.jpg width=80%/></center>\n\n修改`entrypoint.c`中`current`的值，主循环中就会以1000Hz的频率调整电机的电流值，同时可以查看电调发回来的三个状态信息，使用Ozone可以查看`motor`和`current`两个变量的情况\n\n<center><img src=https://pic.imgdb.cn/item/66424ba20ea9cb140386ef82.png width=80%/></center>\n\n使用绘图工具将`angle`的返回值绘制出来，旋转电机，可以发现角度值会随着旋转流畅地改变\n\n<center><img src=https://pic.imgdb.cn/item/66424ba40ea9cb140386f20f.png width=80%/></center>\n\n调整`current`的值，就可以控制电机的正反转动，由于没有写**控制算法**，运动总是**迟滞**于电流值的改变的\n\n倘若无法使用ozone，可以使用**串口**传递将需要查看的变量和需要修改的变量，或者修改`current`后查看电机转动状态亦可，各个参数的范围请参照官方提供的开发文档\n\n## CAN的各种配置与模式\n\n### HAL库关于CAN的说明\n\n想要深入了解Hal库提供的接口，最好的办法是直接查看**源码上的注释**\n\n这是 `stm32f4xx_hal_can.c` 中的注释，我翻译了一下\n\n---\n#### 如何使用该驱动\n\n- 通过执行 `HAL_CAN_MspInit()` 初始化 `CAN` 的底层资源\n    - 使用 `__HAL_RCC_CANx_CLK_ENABLE()` 启用 `CAN` 接口时钟\n    - 配置 `CAN` 引脚\n        - 启用 `CAN GPIOs` 时钟\n        - 将 `CAN` 引脚配置为可选的开漏型\n    - 如果使用中断（例如 `HAL_CAN_ActivateNotification()`）\n        - 使用 `HAL_NVIC_SetPriority()` 配置 `CAN` 中断优先级\n        - 使用 `HAL_NVIC_EnableIRQ()` 启用 `CAN IRQ handler`\n        - 在 `CAN IRQ handler` 中，调用 `HAL_CAN_IRQHandler()`\n- 使用 `HAL_CAN_Init()` 函数初始化 `CAN` 外设 该函数委托 `HAL_CAN_MspInit()` 进行初步的初始化\n- 使用以下函数配置接收过滤器\n    - `HAL_CAN_ConfigFilter()`\n- 使用 `HAL_CAN_Start()` 函数启动 CAN 模块 此后该节点在总线上便处于活动状态：接收报文，并能发送报文 \n- 为管理报文传输，可使用以下 Tx 控制函数\n    - `HAL_CAN_AddTxMessage()` 用于请求传输新的报文信息 \n    - `HAL_CAN_AbortTxRequest()` 用于中止待处理报文的传输 \n    - `HAL_CAN_GetTxMailboxesFreeLevel()` 用来获取空闲的 Tx 邮箱的数量 \n    - `HAL_CAN_IsTxMessagePending()` 用于检查 Tx 邮箱中是否有待处理的信息 \n    - `HAL_CAN_GetTxTimestamp()` 当 `Time triggered communication mode` 开启时，用来获取发送的 Tx 消息的时间戳 \n- 当 `CAN Rx FIFO` 收到报文时，可以使用 `HAL_CAN_GetRxMessage()` 获取，`HAL_CAN_GetRxFifoFillLevel()` 可以获取 `Rx FIFO` 中存储的报文数量\n- 调用 `HAL_CAN_Stop()` 函数可停止 CAN 模块 \n- 通过 `HAL_CAN_DeInit()` 函数实现去初始化 \n\n#### 轮询模式操作\n\n- 接收\n    - 使用 `HAL_CAN_GetRxFifoFillLevel()` 监控信息接收情况，至少收到一条信息后停止监控\n    - 然后使用 `HAL_CAN_GetRxMessage()` 获取信息\n- 传输\n    - 使用 `HAL_CAN_GetTxMailboxesFreeLevel()` 监控发送信箱的是否空闲，至少有一个发送信箱空闲后停止\n    - 然后使用 `HAL_CAN_AddTxMessage()` 请求发送\n\n#### 中断模式操作\n\n- 使用 `HAL_CAN_ActivateNotification()` 激活通知，然后可以使用`HAL_CAN_xxxCallback()`来控制接收消息通知，该回调也是使用 `HAL_CAN_GetRxMessage()` 和 `HAL_CAN_AddTxMessage()`来实现的\n- 可以使用 `HAL_CAN_DeactivateNotification()` 函数停用通知 \n\n- 应特别注意 `CAN_IT_RX_FIFO0_MSG_PENDING` 和 `CAN_IT_RX_FIFO1_MSG_PENDING` ，这些通知会触发回调`HAL_CAN_RxFIFO0MsgPendingCallback()` 和 `HAL_CAN_RxFIFO1MsgPendingCallback()` 用户有两种可选项\n    - 使用 `HAL_CAN_GetRxMessage()`在回调中直接获取 Rx 消息\n    - 或者在回调中停用通知，而不获取 Rx 消息，使用 `HAL_CAN_GetRxMessage()` 获取 Rx 消息后再次激活通知 \n---\n\n上面这一部分注释详细介绍了Hal库CAN通信的使用流程，而在**接收过滤器**初始化之前的步骤，均由CubeMX工具替我们完成，我们只需调用Hal提供的api来完成剩下的步骤\n\n同时，针对各个CAN通讯的时期，Hal库都提供了完备的回调函数，只要使用 `HAL_CAN_RegisterCallback()` 来注册对应的中断，然后覆写下面的回调函数即可，这些回调函数都会以 `__weak` 的类型声明，前面会加上 `HAL_CAN_`，他们都可以在`stm32f4xx_hal_can.c`中找到\n\n```cpp\n  The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1\n  allows the user to configure dynamically the driver callbacks.\n  Use Function HAL_CAN_RegisterCallback() to register an interrupt callback.\n\n  Function HAL_CAN_RegisterCallback() allows to register following callbacks:\n    (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.\n    (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.\n    (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.\n    (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.\n    (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.\n    (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.\n    (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.\n    (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.\n    (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.\n    (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.\n    (+) SleepCallback                : Sleep Callback.\n    (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.\n    (+) ErrorCallback                : Error Callback.\n    (+) MspInitCallback              : CAN MspInit.\n    (+) MspDeInitCallback            : CAN MspDeInit.\n  This function takes as parameters the HAL peripheral handle, the Callback ID\n  and a pointer to the user callback function.\n```\n\n需要注意的是，`HAL_CAN_ActivateNotification()` 本质是开启硬件中断，而 `HAL_CAN_RegisterCallback()` 本质是软件层面的回调，这在源代码中可以很清楚地看出\n\n```cpp\n// in HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)\n\n__HAL_CAN_ENABLE_IT(hcan, ActiveITs);\n\n// in HAL_CAN_RegisterCallback(\n//      CAN_HandleTypeDef *hcan, \n//      HAL_CAN_CallbackIDTypeDef CallbackID, \n//      void (* pCallback)(CAN_HandleTypeDef *_hcan)\n//      )\n\ncase HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :\n        hcan->TxMailbox0CompleteCallback = pCallback;\n        break;\n\n```\n\n上面我忽略了对于休眠模式的内容，感兴趣的可以去浏览器搜索相关api的使用\n\n### CubeMX 配置与过滤器\n\n囿于篇幅，这两个方面就不写在这篇文章，只是简单总结一下\n\n配置要点是波特率的设置，正常的收发模式可以满足大部分的场景，上面配置波特率我只是一笔带过，这里在重新讲一下\n\n波特率的计算参数主要有三个\n\n1. `Prescalar`\n2. `Time Quanta in Bit Segment 1`\n3. `Time Quanta in Bit Segment 2`\n\n记住几个常用的组合足以应对大部分需求，注意CubeMX会**判断**各个传播相位是否过小，倘若遇到无法设置的问题时，可以试试将另一个参数先调大，将之前的参数调到目标值后再调回另一个参数\n\n而关于过滤器，要想参透原理又是需要不短的篇幅，倘若CAN设备数量不多，先用着全开放的过滤器吧，在回调函数**判断回报文头结构体的ID**就可以实现分别处理，`C610`设置ID的方法在文档中有很详细的介绍\n\n## 文末\n\n这篇文章写了好几天，`电路`和`马原`成绩还没有出来，`工程数学`挂了，`大学物理`及格，一众`水课`平安度过，希望能过个好年吧\n\n<br>\n<br>\n<br>\n<p align=\"right\">2023年1月24日凌晨2点半结文</p>","source":"_posts/can-tutorial.md","raw":"---\ntitle: 简明CAN通讯驱动M2006电机指引\ndate: 2024-05-12 10:58:16\ntags:\n- embedded\n- can\n- c/cpp\ncategories:\n- embedded\n---\n\n## 引子\n\n现在是2024年1月18号晚上零点半，电路工数等困难科目已经考完，只是剩一门马原\n\n临近寒假的这一段时间颇为闲暇，于是在工作室寻得一些 **M2006无刷电机**和 **C610电调** ，加上手头上的 **C板**，试着组一台个人未来比赛用的四驱底盘\n\n依据大疆资料来看，电调需要使用CAN通信来控制，正中知识盲区，于是放下手中的马原教材（其实根本没有拿起来过），学习一下CAN\n\n## 环境准备\n\n### 前置知识\n- STM32CubeMX的使用\n- 一定的C语言使用经验\n\n### 软件环境\n\n- 代码生成 `STM32CubeMX` （以HAL库为基础）\n- 编译工具 `arm-none-eabi工具链`（使用其他编译器亦可）\n- 编写环境 `VSCode`+`Embedded IDE` （Keil和CubeIDE亦可）\n- 调试工具 `Ozone`（本篇仅以此方法调试）\n\n### 硬件环境\n\n- 主控芯片 `大疆C板-STM32F407IGH6`\n- 烧录工具 `JLink`\n- 通讯目标 `C610电调`\n\n### 设备文档\n\n- [C610电调使用说明](https://rm-static.djicdn.com/tem/RM%20C610%E6%97%A0%E5%88%B7%E7%94%B5%E6%9C%BA%E8%B0%83%E9%80%9F%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%20%E5%8F%91%E5%B8%83%E7%89%88.pdf)\n\n- [RoboMaster 开发板C型](https://rm-static.djicdn.com/tem/35228/RoboMaster%20%20%E5%BC%80%E5%8F%91%E6%9D%BF%20C%20%E5%9E%8B%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C.pdf)\n\n- [C板原理图&位号图](https://rm-static.djicdn.com/tem/35228/RoboMaster%20%E5%BC%80%E5%8F%91%E6%9D%BFC%E5%9E%8B%E5%8E%9F%E7%90%86%E5%9B%BE&%E4%BD%8D%E5%8F%B7%E5%9B%BE.zip)\n\n## CAN的印象\n\n### 何为CAN？\n\n在查阅了很多资料后，我提取了几个关键词：`总线结构`，`串行通讯`，`标准协议`，只需要两条线，即可解决沿途中设备的通信需求，例如，使用一块主控板加上CAN总线就可以很轻松的控制多个电机，极大缓解了布线带给我们的`焦虑`\n\n<center>\n<img src=https://pic.imgdb.cn/item/66424bb50ea9cb1403870220.jpg\n    width=80% \n    />\n</center>\n<center>\n布线地狱\n</center>\n<br>\n\n至于书面，准确，乃至于繁缛的官方定义，我便不写入文章里，百度看看就好\n\n### CAN的硬件组成\n\n我们可以称一个通讯单元为**节点**，一个节点一般有三个部分：**微控制器**， **CAN控制器**，**CAN收发器**，总线两端须串上120Ω的电阻，以模拟无限远传输线的特性阻抗，通过开关等手段来选择是否使用这个**电阻**\n\n<center>\n<img src=https://pic.imgdb.cn/item/66424b9a0ea9cb140386e3ab.png width=80%/>\n</center>\n<center>\nCAN总线结构\n</center>\n<br>\n\nSTM32芯片会自带CAN外设拓展，名为**bxCAN** `(Basic Extended CAN  - 基本拓展CAN)`，详细内容此处不展开\n\n要注意，一般的STM32开发板是不带有CAN收发器的，需要自己另外购买，大疆C板是自带CAN收发器的，所以可以直接使用\n\n## CAN的回环测试\n\n姑且暂停理论部分的讲解，**繁杂的原理**总是令人头大，使人望而却步，我们先**启动**开发软件，走通一个通讯的流程，再来细细分析其中的缘由，或者跳过理论，只掌握软件层的流程也是可以的\n\n基本步骤：`配置STM32CubeMX` > `配置CAN过滤器` > `发送接收报文`\n\n### 配置STM32CubeMX\n\n启动CubeMX，选好芯片类型创建项目，首先把**常规设置**搞定\n\n关于C板的一些**注意点**\n\n- C板默认的`CAN1 PIN`不是原理图上的位置, 需要修改一下\n- 注意C板的晶振是**12MHz**，要把输入频率调整成12MHz\n- C板的外设电源和swd输入的**电源不在一条线路**，不能通过**swd口供电**，需要插上**24v电源**或者**usb口供电**，否则CAN的收发器将不工作，无法正常收发数据，当然，**回环模式**还是可以收到的，因为回环的数据不经过CAN收发器\n- 一对一连接C板和电调时，需要将电调上的电阻打开，一对多时，把最远端的电阻打开即可，保持CAN总线两端串着电阻\n\n\n<center><img src=https://pic.imgdb.cn/item/66424ba80ea9cb140386f69c.png width=80%/></center>\n<center>RCC设置</center>\n<br>\n\n<center><img src=https://pic.imgdb.cn/item/66424bb10ea9cb140386fee3.png width=80%/></center>\n<center>SWD设置</center>\n<br>\n\n\n<center><img src=https://pic.imgdb.cn/item/66424b9b0ea9cb140386e69c.png width=80%/></center>\n<center>时钟设置</center>\n<br>\n\n<center><img src=https://pic.imgdb.cn/item/66424b970ea9cb140386de39.png width=80%/></center>\n<center>.c文件和.h文件分开生成</center>\n<br>\n\n项目管理类型之类的根据**自己使用的开发环境**来设置即可\n\n简单写一个点灯测试一下\n\n这是板载灯的连线\n\n- `TIM5_CH1` - `LED_BLUE`\n- `TIM5_CH2` - `LED_GREEN`\n- `TIM5_CH3` - `LED_RED`\n\n```cpp\nvoid breath_led()\n{\n    for (int i = 0; i < 100; i++) {\n        HAL_Delay(10);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 20000 * i / 100);\n    }\n\n    for (int i = 100; i > 0; i--) {\n        HAL_Delay(10);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2, 20000 * i / 100);\n        __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 20000 * i / 100);\n    }\n}\n```\n将其放入主循环中运行，理所应当地成功了\n\n\n现在开始配置**CAN通信**\n\nCubeMX界面中，在`CAN1`的**Parameter Settings**我们可以看到\n\n- **Bit Timings Parameters** - 配置传输速度\n    - **Prescaler (for Time Quantum)** - 分频，调整TQ（Time Quantum）大小\n    - Time Quantum - 最小时间单位\n    - **Time Quanta in Bit Segment 1** - 相位缓冲段1段占几个TQ\n    - **Time Quanta in Bit Segment 2** - 相位缓冲段2段占几个TQ\n    - Time for one Bit\n    - Baud Rate - 波特率\n    - **ReSynchronization Jump Width** - 再同步补偿宽度\n- **Basic Parameters** - 基本参数\n    - Time Triggered Communication Mode - 时间触发模式\n    - Automatic Bus-off Management - 自动离线管理\n    - Automatic Wake-Up Mode - 自动唤醒\n    - Automatic Retransmission - 自动重传\n    - Receive Fifo Locked Mode - 锁定模式\n    - Transmit Fifo Priority - 报文发送优先级\n- **Advanced Parameters** - 高级参数\n    - **Operating Mode** -*运行模式：`正常模式` `静默模式` `回环模式` `回环静默模式`\n\n而 **NVIC Interrupt Table** 中有\n\n- CAN1 TX interrupts\n- CAN1 RX0 interrupts\n- CAN1 RX1 interrupt\n- CAN1 SCE interrupt\n\n这是我们初期需要关注的配置列表\n\n**1. 设置波特率**\n\n先打开CAN1的`Activated`选项, 其他的选项才能显示出来\n\n<center><img src=https://pic.imgdb.cn/item/66424b930ea9cb140386dabf.png width=80%/></center>\n\n以我的需求为例，查阅大疆官方资料可以得知\n\n> 将 CAN 信号线连接到控制板接收 CAN 控制指令，CAN 总线比特率为 1Mbps \n\n所以我们需要将CAN通讯的比特率 `baud rate` 设置为 `1000000 bit/s`\n\n根据波特率计算公式 BaudRate = TQ * ( Sync + TBS1 + TBS2) , 我们得到如下设置\n\n<center><img src=https://pic.imgdb.cn/item/66424b950ea9cb140386dce8.png width=80%/></center>\n<center>TQ * ( 4 + 9 + 1 ) = 1000ns</center>\n\n根据实际情况计算一下即可，也可以多选几个选项，把正确的波特率尝试出来，**灰色的选项**就是CubeMX帮我们计算好的数值\n\n**别忘了修改CAN1的引脚**\n\n<center><img src=https://pic.imgdb.cn/item/66424b980ea9cb140386e0d0.png width=80%/></center>\n<center>CAN引脚设置</center>\n<br>\n\n**2. 打开中断**\n\n处理电调发送的电机信息，需要中断来调用回调函数，于是打开**接收中断**\n\n在接收和发送信息前，我们会遇到一个CAN通信的抽象概念 —— **邮箱**\n\n这里我使用的单片机中，CAN外设具有两个用于接收信息的**邮箱**，我们命其为 `FIFO0`和`FIFO1`，每个邮箱都有**一个过滤器**，用于筛选报文，可以存放**三条报文**，在**中断设置**中对应 `CAN1 RX0 interrupt`和`CAN1 RX1 interrupt`，我们打开需要使用的那一个就可以\n\n<center><img src=https://pic.imgdb.cn/item/66424b9d0ea9cb140386e883.png width=80%/></center>\n\n既然存在接收邮箱，相应的，就有**发送邮箱**，我们现在只要知道发送邮箱存在**发送优先级**且每个邮箱只能存放**一条报文**\n\n现在，我们已经在CubeMX中配置好了CAN，下一步就是要配置**CAN过滤器**\n\n### 配置CAN过滤器\n\n前面我们说到，STM32上有两个**邮箱**用于接收报文，为了接收我们想要的报文，我们需要配置一下过滤器，把不想接受的报文过滤掉，只放行想要的报文\n\n配置过滤器需要我们自己手写，并未提前生成，但HAL库提供了过滤器配置参数的结构体类型，我们只需要**给这个结构体赋值**，然后**调用HAL提供的初始化函数**即可完成配置, 下面的代码仅仅是**展示**, 还不需要写进项目里\n\n```cpp\n// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h\n\n// 过滤器结构体\ntypedef struct\n{\n  uint32_t FilterIdHigh;\n  uint32_t FilterIdLow;\n  uint32_t FilterMaskIdHigh;\n  uint32_t FilterMaskIdLow; \n  uint32_t FilterFIFOAssignment; \n  uint32_t FilterBank;        \n  uint32_t FilterMode;\n  uint32_t FilterScale;\n  uint32_t FilterActivation; \n  uint32_t SlaveStartFilterBank; \n} CAN_FilterTypeDef;\n\n// 配置函数\nHAL_StatusTypeDef HAL_CAN_ConfigFilter(\n    CAN_HandleTypeDef *hcan, \n    CAN_FilterTypeDef *sFilterConfig\n    );\n```\n\n具体的使用和结构体的定义随后再讲，我们只需要对这个结构体和函数有一个**大概的印象**即可\n\n### 发送接收报文\n\n首先是**发送**\n\n我预期使用一块主控与四个电机通信，那么在发送报文时，就需要指定**发送给哪一个电机**，以及**其他一些信息**，比如发送`信息的长度`，`信息的类型`，`信息ID类型`等等，HAL把这些发送需要的信息定义成了一个结构体 `CAN_TxHeaderTypeDef`,我们只需要为每一个电机声明一个 `CAN_TxHeaderTypeDef` 结构体，再确定好发送的数据内容，就可以将数据发送到指定的电机中\n\n我们回想一下，在设置接收中断时，是不是提到了**邮箱**的概念？**STM32F407IGHx**为我们提供了三个**发送邮箱**，在发送时，HAL库会自动选择空闲的邮箱，然后将**实际使用的邮箱**返回给我们，这也解释了我们传入函数的是指向邮箱的指针，而非一个邮箱编号的常量\n\nHAL库理所应当地帮我们写好了发送的函数，只要传入`can的句柄`，`报文头结构体`，`数据信息`和`邮箱`即可\n\n下面的代码同样不需要写进项目\n```cpp\n// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h\n\n// 发送函数的声明\nHAL_StatusTypeDef HAL_CAN_AddTxMessage(\n    CAN_HandleTypeDef *hcan, \n    CAN_TxHeaderTypeDef *pHeader, \n    uint8_t aData[], \n    uint32_t *pTxMailbox\n    )；\n\n// 邮箱编号的定义\n#define CAN_TX_MAILBOX0             (0x00000001U)  /*!< Tx Mailbox 0  */\n#define CAN_TX_MAILBOX1             (0x00000002U)  /*!< Tx Mailbox 1  */\n#define CAN_TX_MAILBOX2             (0x00000004U)  /*!< Tx Mailbox 2  */\n```\n\n然后是**接收**\n\n总线上的报文在经过了我们设置的**过滤器**后，正确的报文会**触发**我们设置的**中断**，我们便可以在中断的**回调函数**中对收到的数据进行处理了\n\n我们只需要找到HAL库为我们提供的中断函数，对其进行覆写即可\n\n以下是示例代码\n\n```cpp\n// 这是一种使用情况\n\n// 回调函数\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n\tif(hcan->Instance ==CAN1)\n\t{\n\t  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, date_CAN1); \n\t  return ;\n\t}\n}\n\n// 这个函数可以从报文中分离出我们想要的信息\nHAL_StatusTypeDef HAL_CAN_GetRxMessage(\n    CAN_HandleTypeDef *hcan,            // can句柄\n    uint32_t RxFifo,                    // 接收邮箱编号\n    CAN_RxHeaderTypeDef *pHeader,       // 接收报文头\n    uint8_t aData[]                     // 数据\n    )；\n\n// 接收邮箱编号的定义\n#define CAN_RX_FIFO0                (0x00000000U)  /*!< CAN receive FIFO 0 */\n#define CAN_RX_FIFO1                (0x00000001U)  /*!< CAN receive FIFO 1 */\n```\n\n现在我们配置过滤器和发送接收这两个流程应该是有了一个**大概的认知**，来做一个简单的测试吧\n\n将运行模式设置为**回环发送**，我们就可以收到自己发送的报文，前提是能通过邮箱过滤，其他配置依照上文即可\n\n<center><img src=https://pic.imgdb.cn/item/66424b9e0ea9cb140386eb23.png width=80%/></center>\n\n记得重新生成代码\n\n然后我们写一个过滤器的配置, 下面的代码按照定义函数的方式在某个地方写下, 我都写在了`main.c`中\n\n```cpp\nvoid can_filter_init()\n{\n    CAN_FilterTypeDef config;\n\n    // 报文头结构体的赋值\n    // 此处配置为接收全部报文，以便于测试\n    config.FilterActivation     = ENABLE;                // 启用过滤器\n    config.FilterBank           = 0;                     // 将要初始化的过滤器组\n    config.SlaveStartFilterBank = 0;                     // 从模式下的过滤器组\n    config.FilterMode           = CAN_FILTERMODE_IDMASK; // 掩码模式\n    config.FilterScale          = CAN_FILTERSCALE_32BIT; // 32位宽\n    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // 配置邮箱0\n    config.FilterIdHigh         = 0x0000;                // 高位0\n    config.FilterIdLow          = 0x0000;                // 低位0\n    config.FilterMaskIdHigh     = 0x0000;                // 掩码高位不检测\n    config.FilterMaskIdLow      = 0x0000;                // 掩码低位不检测\n\n    // 将配置加载进CAN 1中\n    HAL_CAN_ConfigFilter(&hcan1, &config);\n}\n```\n\n初始化CAN\n\n上面过滤器的配置中启用了邮箱0 `CAN_FILTER_FIFO0`，所以在初始化时，我们要打开邮箱0的中断\n\n```cpp\nvoid can_init()\n{\n    can_filter_init();                                                  // 过滤器\n    HAL_CAN_Start(&hcan1);                                              // 开启CAN通讯\n    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  // 开启接收中断\n}\n```\n\n下面这段不用抄, 只是看看中断的类型\n```cpp\n// Hal库中的邮箱接收中断类型\nCAN_IT_RX_FIFO0_MSG_PENDING     /*!< FIFO 0 message pending interrupt */\nCAN_IT_RX_FIFO0_FULL            /*!< FIFO 0 full interrupt            */\nCAN_IT_RX_FIFO0_OVERRUN         /*!< FIFO 0 overrun interrupt         */\nCAN_IT_RX_FIFO1_MSG_PENDING     /*!< FIFO 1 message pending interrupt */\nCAN_IT_RX_FIFO1_FULL            /*!< FIFO 1 full interrupt            */\nCAN_IT_RX_FIFO1_OVERRUN         /*!< FIFO 1 overrun interrupt \n```\n\n接着声明一些必要的变量, 这里就是在`main`函数里面写了\n\n```cpp\nuint8_t can_1_rx[8];    // 接收数据\nuint8_t can_1_tx[8];    // 发送数据\n\nCAN_RxHeaderTypeDef can_1_rx_header;    // 接收报文头\nCAN_TxHeaderTypeDef can_1_tx_header;    // 发送报文头\n\nuint32_t mail_tx = CAN_TX_MAILBOX0;     // 发送邮箱编号\n```\n\n初始化一些参数, 然后调用一些初始化的函数\n\n```cpp\n// 随便创建一种发送报文头结构体\ncan_1_tx_header.StdId              = 0x00000000;\ncan_1_tx_header.ExtId              = 0x12345000;\ncan_1_tx_header.IDE                = CAN_ID_EXT;\ncan_1_tx_header.RTR                = CAN_RTR_DATA;\ncan_1_tx_header.DLC                = 8;\ncan_1_tx_header.TransmitGlobalTime = DISABLE;\n\n// 初始化一些发送的数据\ncan_1_tx[0] = 1;\n\n// 要使用的灯记得开启，根据自己的板子写即可\nHAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);\n// 刚才写的初始化函数用上\ncan_init();\n```\n\n回调函数的覆写, 写在`main.c`中就行\n\n```cpp\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n    if (hcan->Instance == CAN1) {\n        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_1_rx_header, can_1_rx);\n\n        // 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯\n        // 根据自己的板子替换一下点灯的函数\n        if(can_1_rx[0] == 0)\n        {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000);\n        }\n        else if(can_1_rx[0] == 1)\n        {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 0);\n        }\n\n        return;\n    }\n}\n```\n\n在主循环中不断发送报文, 也就是 `while(1)`里面\n\n```cpp\nHAL_CAN_AddTxMessage(&hcan1, &can_1_tx_header, can_1_tx, &mail_tx);\n```\n\n这是我写好的 `main.c` ，注意根据自己使用的板子情况**进行修改**\n\n```cpp\n/* USER CODE BEGIN Header */\n/**\n ******************************************************************************\n * @file           : main.c\n * @brief          : Main program body\n ******************************************************************************\n * @attention\n *\n * Copyright (c) 2024 STMicroelectronics.\n * All rights reserved.\n *\n * This software is licensed under terms that can be found in the LICENSE file\n * in the root directory of this software component.\n * If no LICENSE file comes with this software, it is provided AS-IS.\n *\n ******************************************************************************\n */\n/* USER CODE END Header */\n/* Includes ------------------------------------------------------------------*/\n#include \"main.h\"\n#include \"can.h\"\n#include \"tim.h\"\n#include \"gpio.h\"\n\n/* Private includes ----------------------------------------------------------*/\n/* USER CODE BEGIN Includes */\n\n/* USER CODE END Includes */\n\n/* Private typedef -----------------------------------------------------------*/\n/* USER CODE BEGIN PTD */\n\n/* USER CODE END PTD */\n\n/* Private define ------------------------------------------------------------*/\n/* USER CODE BEGIN PD */\n\n/* USER CODE END PD */\n\n/* Private macro -------------------------------------------------------------*/\n/* USER CODE BEGIN PM */\n\n/* USER CODE END PM */\n\n/* Private variables ---------------------------------------------------------*/\n\n/* USER CODE BEGIN PV */\n\nuint8_t can_1_rx[8]; // 接收数据\nuint8_t can_1_tx[8]; // 发送数据\n\nCAN_RxHeaderTypeDef can_1_rx_header; // 接收保报文头\nCAN_TxHeaderTypeDef can_1_tx_header; // 发送报文头\n\nuint32_t mail_tx = CAN_TX_MAILBOX0; // 发送邮箱编号\n\n/* USER CODE END PV */\n\n/* Private function prototypes -----------------------------------------------*/\nvoid SystemClock_Config(void);\n/* USER CODE BEGIN PFP */\n\nvoid can_filter_init();\nvoid can_init();\n\n/* USER CODE END PFP */\n\n/* Private user code ---------------------------------------------------------*/\n/* USER CODE BEGIN 0 */\n\nvoid can_filter_init()\n{\n    CAN_FilterTypeDef config;\n\n    // 报文头结构体的赋值\n    // 此处配置为接收全部报文，以便于测试\n    config.FilterActivation     = ENABLE;                // 启用过滤器\n    config.FilterBank           = 0;                     // 将要初始化的过滤器组\n    config.SlaveStartFilterBank = 0;                     // 从模式下的过滤器组\n    config.FilterMode           = CAN_FILTERMODE_IDMASK; // 掩码模式\n    config.FilterScale          = CAN_FILTERSCALE_32BIT; // 32位宽\n    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // 配置邮箱0\n    config.FilterIdHigh         = 0x0000;                // 高位0\n    config.FilterIdLow          = 0x0000;                // 低位0\n    config.FilterMaskIdHigh     = 0x0000;                // 掩码高位不检测\n    config.FilterMaskIdLow      = 0x0000;                // 掩码低位不检测\n\n    // 将配置加载进CAN 1中\n    HAL_CAN_ConfigFilter(&hcan1, &config);\n}\n\nvoid can_init()\n{\n    can_filter_init();                                                 // 过滤器\n    HAL_CAN_Start(&hcan1);                                             // 开启CAN通讯\n    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // 开启接收中断\n}\n\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n    if (hcan->Instance == CAN1) {\n        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_1_rx_header, can_1_rx);\n\n        // 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯\n        // 根据自己的板子替换一下点灯的函数\n        if (can_1_rx[0] == 0) {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 20000);\n        } else if (can_1_rx[0] == 1) {\n            __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1, 0);\n        }\n\n        return;\n    }\n}\n\n/* USER CODE END 0 */\n\n/**\n * @brief  The application entry point.\n * @retval int\n */\nint main(void)\n{\n    /* USER CODE BEGIN 1 */\n\n    /* USER CODE END 1 */\n\n    /* MCU Configuration--------------------------------------------------------*/\n\n    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n    HAL_Init();\n\n    /* USER CODE BEGIN Init */\n\n    /* USER CODE END Init */\n\n    /* Configure the system clock */\n    SystemClock_Config();\n\n    /* USER CODE BEGIN SysInit */\n\n    /* USER CODE END SysInit */\n\n    /* Initialize all configured peripherals */\n    MX_GPIO_Init();\n    MX_TIM4_Init();\n    MX_TIM5_Init();\n    MX_CAN1_Init();\n    /* USER CODE BEGIN 2 */\n\n    // 随便创建一种发送报文头结构体\n    can_1_tx_header.StdId              = 0x00000000;\n    can_1_tx_header.ExtId              = 0x12345000;\n    can_1_tx_header.IDE                = CAN_ID_EXT;\n    can_1_tx_header.RTR                = CAN_RTR_DATA;\n    can_1_tx_header.DLC                = 8;\n    can_1_tx_header.TransmitGlobalTime = DISABLE;\n\n    can_1_tx[0] = 1;\n\n    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);\n    can_init();\n\n    /* USER CODE END 2 */\n\n    /* Infinite loop */\n    /* USER CODE BEGIN WHILE */\n    while (1) {\n\n        HAL_CAN_AddTxMessage(&hcan1, &can_1_tx_header, can_1_tx, &mail_tx);\n        HAL_Delay(10);\n\n        /* USER CODE END WHILE */\n\n        /* USER CODE BEGIN 3 */\n    }\n    /* USER CODE END 3 */\n}\n\n/**\n * @brief System Clock Configuration\n * @retval None\n */\nvoid SystemClock_Config(void)\n{\n    RCC_OscInitTypeDef RCC_OscInitStruct = {0};\n    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};\n\n    /** Configure the main internal regulator output voltage\n     */\n    __HAL_RCC_PWR_CLK_ENABLE();\n    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);\n\n    /** Initializes the RCC Oscillators according to the specified parameters\n     * in the RCC_OscInitTypeDef structure.\n     */\n    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;\n    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;\n    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;\n    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;\n    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;\n    RCC_OscInitStruct.PLL.PLLM            = 8;\n    RCC_OscInitStruct.PLL.PLLN            = 168;\n    RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;\n    RCC_OscInitStruct.PLL.PLLQ            = 4;\n    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {\n        Error_Handler();\n    }\n\n    /** Initializes the CPU, AHB and APB buses clocks\n     */\n    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;\n    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;\n    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;\n    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;\n\n    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {\n        Error_Handler();\n    }\n}\n\n/* USER CODE BEGIN 4 */\n\n/* USER CODE END 4 */\n\n/**\n * @brief  This function is executed in case of error occurrence.\n * @retval None\n */\nvoid Error_Handler(void)\n{\n    /* USER CODE BEGIN Error_Handler_Debug */\n    /* User can add his own implementation to report the HAL error return state */\n    __disable_irq();\n    while (1) {\n    }\n    /* USER CODE END Error_Handler_Debug */\n}\n\n#ifdef USE_FULL_ASSERT\n/**\n * @brief  Reports the name of the source file and the source line number\n *         where the assert_param error has occurred.\n * @param  file: pointer to the source file name\n * @param  line: assert_param error line source number\n * @retval None\n */\nvoid assert_failed(uint8_t *file, uint32_t line)\n{\n    /* USER CODE BEGIN 6 */\n    /* User can add his own implementation to report the file name and line number,\n       ex: printf(\"Wrong parameters value: file %s on line %d\\r\\n\", file, line) */\n    /* USER CODE END 6 */\n}\n#endif /* USE_FULL_ASSERT */\n\n```\n\n在ozone中查看参数，并实时修改**发送数据**的数值，发现**接收数据**也会实时修改，板载灯反馈正常\n\n若不能使用ozone，也可以在代码中修改发送的数值，重新烧录，查看板载灯的情况\n\n<center><img src=https://pic.imgdb.cn/item/66424ba00ea9cb140386edb5.png width=60%/></center>\n\n回环测试正常，我们可以进行下一步的了解\n\n## CAN与电调通讯\n\n在囫囵吞枣地走通过一遍流程后，我们遇到很很多**复杂的模式和结构体**，这些需要根据实际情况来酌情配置\n\n接下来我们尝试使用C板来与C610通讯，接收信息并发送信息来控制电机\n\n### 接收电机的回馈消息\n\n为了保持代码的可读性，我们将CAN相关代码分离开来\n\n大致结构是底层依赖`base-can`，在其基础上写一层`module-m2006`，在进程中调用这两个部分文件\n\n为了降低理解的难度，暂时不考虑使用其他设备的可能，只针对一个电调和一个电机的情况先写一份控制代码\n\n首先是base-can部分，它负责与底层的交互，直接使用HAL库提供的函数，将底层与应用层隔离\n\n```cpp\n// base-can.h\n\n#pragma once\n#include \"can.h\"\n\nvoid init_can(CAN_HandleTypeDef *hcan);\n\nvoid set_can_tx_header(CAN_TxHeaderTypeDef *header);\n```\n\n```cpp\n// base-can.c\n\n#include \"base-can.h\"\n\n// 仍然使用最简单的配置，接收所有报文\n// 为了统一初始化函数的调用模式，我们将HAL_CAN_ConfigFilter函数的返回值返回\nstatic HAL_StatusTypeDef configure_can_filter(CAN_HandleTypeDef *hcan)\n{\n    CAN_FilterTypeDef config;\n\n    config.FilterActivation     = CAN_FILTER_ENABLE;\n    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;\n    config.FilterMode           = CAN_FILTERMODE_IDMASK;\n    config.FilterScale          = CAN_FILTERSCALE_32BIT;\n    config.FilterIdHigh         = 0x00;\n    config.FilterIdLow          = 0x00;\n    config.FilterMaskIdHigh     = 0x00;\n    config.FilterMaskIdLow      = 0x00;\n    config.FilterBank           = 0;\n    config.SlaveStartFilterBank = 0;\n\n    return HAL_CAN_ConfigFilter(hcan, &config);\n}\n\n// 集中对CAN进行初始化\nvoid init_can(CAN_HandleTypeDef *hcan)\n{\n    if (configure_can_filter(hcan))\n        Error_Handler();\n\n    if (HAL_CAN_Start(hcan))\n        Error_Handler();\n\n    if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING))\n        Error_Handler();\n}\n\n// 根据C610手册，设置发送报文头的内容\nvoid set_can_tx_header(CAN_TxHeaderTypeDef *header)\n{\n    header->StdId              = 0x200;\n    header->IDE                = CAN_ID_STD;\n    header->RTR                = CAN_RTR_DATA;\n    header->DLC                = 8;\n    header->TransmitGlobalTime = DISABLE;\n}\n\n```\n\n上面代码写的十分地局限，没有考虑后期**可能不断变化的需求**，但对于现阶段来说，我们的首要目标是先以最简单的方式，驱动目标电机，现在接着往下写\n\n### 包装与电调通讯的代码\n\n为了方便我们 `get` 和 `control` 电机的状态，可以把对外暴露的api，即电机返回的状态值，用结构体包装，而对于控制电机需要使用到的 `句柄` ，或者说一些必要的 `上下文信息` ,我们也使用结构体将其包装起来，最后将两个结构体包装为电机完整的结构体，这样可以极大地方便函数的调用\n\n```cpp\n// module-m2006.h\n\n#pragma once\n#include \"base-can.h\"\n\ntypedef struct MotorStatus {\n    int16_t angle;\n    int16_t speed;\n    int16_t torque;\n} MotorStatus;\n\ntypedef struct MotorHandle {\n    CAN_HandleTypeDef *hcan;\n    CAN_RxHeaderTypeDef header_rx;\n    CAN_TxHeaderTypeDef header_tx;\n    uint32_t mail;\n} MotorHandle;\n\ntypedef struct Motor {\n    MotorHandle handle;\n    MotorStatus status;\n} Motor;\n\nvoid init_motor(Motor *motor);\n\nvoid get_motor_status(const uint8_t data[8], Motor *motor);\n\nvoid set_motor_current(const int16_t current, Motor *motor);\n```\n\n```cpp\n// module-m2006.c\n\n#include \"module-m2006.h\"\n\n// 初始化关于电机的所有信息\nvoid init_motor(Motor *motor)\n{\n    motor->handle.hcan = &hcan1;\n\n    init_can(motor->handle.hcan);\n    set_can_tx_header(&motor->handle.header_tx);\n}\n\n// 用于从回报文中提取状态信息\n// 按照C610用户手册上给出的高低位数据变换即可\nvoid get_motor_status(const uint8_t data[8], Motor *motor)\n{\n    motor->status.angle  = (data[0] << 8) | data[1];\n    motor->status.speed  = (data[2] << 8) | data[3];\n    motor->status.torque = (data[4] << 8) | data[5];\n}\n\n// 用于设置电机输出电流值\n// 由于目前只使用一个电机，为了方便，直接设置电机电调的ID为1\n// 那么第一位和第二位uint8_t数据就是第一个电机的电流值高低位\n// 依照文档，电流值的范围为 -10000 到 10000\nvoid set_motor_current(const int16_t current, Motor *motor)\n{\n    uint8_t data[8];\n\n    data[0] = current >> 8;\n    data[1] = current | 0xff00;\n\n    HAL_CAN_AddTxMessage(\n        motor->handle.hcan, &motor->handle.header_tx,\n        data, &motor->handle.mail);\n}\n\n```\n在做完前面的工作后，我们只需要调用最上层的`module-motor`提供的初始化函数，就可以对整个系统初始化，然后使用`get_motor_status`获取电机状态，使用`set_motor_current`控制电机电流值\n\n### 主要逻辑和CAN接收回调函数\n\n最后，为了与HAL库生成的文件分离地更彻底一点，我们在CubeMX生成的main.c中，加入我们自定义的进程入口\n\n```cpp\n// 前面代码省略\n\n\n/* USER CODE BEGIN PFP */\nextern void entrypoint();\n/* USER CODE END PFP */\n\n\n// 中间代码省略\n\n\n/* USER CODE BEGIN 2 */\nentrypoint();\n/* USER CODE END 2 */\n\n/* Infinite loop */\n/* USER CODE BEGIN WHILE */\nwhile (1) {\n\n    /* USER CODE END WHILE */\n\n    /* USER CODE BEGIN 3 */\n}\n/* USER CODE END 3 */\n\n\n// 后面代码省略\n```\n\n使用extern声明一个外部函数，接着在CubeMX提供的主循环前插入该函数，我们便可以创建一个entrypoint.c函数来实现`void entrypoint()`\n\n同时我们也可以把回调函数写在这里，保证变量作用域的统一，这样以后对代码增删改查都可以避免直接接触CubeMX直接生成的代码，贯彻了代码**高内聚低耦合**的原则（doge）\n\n\n```cpp\n// entrypoint.c\n\n#include \"main.h\"\n#include \"tim.h\"\n\n#include \"module-m2006.h\"\n\n// entrypoint function from main.h\nvoid entrypoint();\n\nstatic Motor motor;\nstatic int16_t current;\n\n// @brief the main loop function\n// @note control the current of motor every 1 ms\nvoid entrypoint()\n{\n    init_motor(&motor);\n    current = 0;\n\n    while (1) {\n        HAL_Delay(0);\n        set_motor_current(current, &motor);\n    }\n}\n\n// @brief callback when receiving message from motor\n// @note convert the uint8_t data to motor status\nvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)\n{\n    if (hcan == &hcan1) {\n        uint8_t data[8];\n\n        HAL_CAN_GetRxMessage(\n            &hcan1, CAN_RX_FIFO0,\n            &motor.handle.header_rx, data);\n\n        get_motor_status(data, &motor);\n\n        return;\n    }\n}\n```\n\n这是代码结构，`activity`中是主要的进程，里面包含了程序自定义入口，也可以在使用实时系统的情况下将任务写在该文件夹下，`dependency`是包装后的库函数，供`activity`调用，`base`是与底层直接接触的库，一般会用到大量的HAL库，负责实现一些通讯协议，而`module`是更高级一层的，一般抽象成为某个外设的驱动库\n\n\n```\n// 注意HAL库生成的代码并没有被写出\n// 请将这些文件结构包含进项目目录中，以保证entrypoint函数能够被顺利链接\n-activity\n  entrypoint.c\n-dependency\n  -base\n    base-can.c\n    base-can.h\n  -module\n    module-m2006.c\n    module-m2006.h\n```\n\n### 连接设备与测试\n\n临时画一个M2006的电机架测试用，放上一张整体的连线图\n\n<center><img src=https://pic.imgdb.cn/item/66424bab0ea9cb140386f880.png width=80%/></center>\n\n<center><img src=https://pic.imgdb.cn/item/66424bad0ea9cb140386fb42.jpg width=80%/></center>\n\n修改`entrypoint.c`中`current`的值，主循环中就会以1000Hz的频率调整电机的电流值，同时可以查看电调发回来的三个状态信息，使用Ozone可以查看`motor`和`current`两个变量的情况\n\n<center><img src=https://pic.imgdb.cn/item/66424ba20ea9cb140386ef82.png width=80%/></center>\n\n使用绘图工具将`angle`的返回值绘制出来，旋转电机，可以发现角度值会随着旋转流畅地改变\n\n<center><img src=https://pic.imgdb.cn/item/66424ba40ea9cb140386f20f.png width=80%/></center>\n\n调整`current`的值，就可以控制电机的正反转动，由于没有写**控制算法**，运动总是**迟滞**于电流值的改变的\n\n倘若无法使用ozone，可以使用**串口**传递将需要查看的变量和需要修改的变量，或者修改`current`后查看电机转动状态亦可，各个参数的范围请参照官方提供的开发文档\n\n## CAN的各种配置与模式\n\n### HAL库关于CAN的说明\n\n想要深入了解Hal库提供的接口，最好的办法是直接查看**源码上的注释**\n\n这是 `stm32f4xx_hal_can.c` 中的注释，我翻译了一下\n\n---\n#### 如何使用该驱动\n\n- 通过执行 `HAL_CAN_MspInit()` 初始化 `CAN` 的底层资源\n    - 使用 `__HAL_RCC_CANx_CLK_ENABLE()` 启用 `CAN` 接口时钟\n    - 配置 `CAN` 引脚\n        - 启用 `CAN GPIOs` 时钟\n        - 将 `CAN` 引脚配置为可选的开漏型\n    - 如果使用中断（例如 `HAL_CAN_ActivateNotification()`）\n        - 使用 `HAL_NVIC_SetPriority()` 配置 `CAN` 中断优先级\n        - 使用 `HAL_NVIC_EnableIRQ()` 启用 `CAN IRQ handler`\n        - 在 `CAN IRQ handler` 中，调用 `HAL_CAN_IRQHandler()`\n- 使用 `HAL_CAN_Init()` 函数初始化 `CAN` 外设 该函数委托 `HAL_CAN_MspInit()` 进行初步的初始化\n- 使用以下函数配置接收过滤器\n    - `HAL_CAN_ConfigFilter()`\n- 使用 `HAL_CAN_Start()` 函数启动 CAN 模块 此后该节点在总线上便处于活动状态：接收报文，并能发送报文 \n- 为管理报文传输，可使用以下 Tx 控制函数\n    - `HAL_CAN_AddTxMessage()` 用于请求传输新的报文信息 \n    - `HAL_CAN_AbortTxRequest()` 用于中止待处理报文的传输 \n    - `HAL_CAN_GetTxMailboxesFreeLevel()` 用来获取空闲的 Tx 邮箱的数量 \n    - `HAL_CAN_IsTxMessagePending()` 用于检查 Tx 邮箱中是否有待处理的信息 \n    - `HAL_CAN_GetTxTimestamp()` 当 `Time triggered communication mode` 开启时，用来获取发送的 Tx 消息的时间戳 \n- 当 `CAN Rx FIFO` 收到报文时，可以使用 `HAL_CAN_GetRxMessage()` 获取，`HAL_CAN_GetRxFifoFillLevel()` 可以获取 `Rx FIFO` 中存储的报文数量\n- 调用 `HAL_CAN_Stop()` 函数可停止 CAN 模块 \n- 通过 `HAL_CAN_DeInit()` 函数实现去初始化 \n\n#### 轮询模式操作\n\n- 接收\n    - 使用 `HAL_CAN_GetRxFifoFillLevel()` 监控信息接收情况，至少收到一条信息后停止监控\n    - 然后使用 `HAL_CAN_GetRxMessage()` 获取信息\n- 传输\n    - 使用 `HAL_CAN_GetTxMailboxesFreeLevel()` 监控发送信箱的是否空闲，至少有一个发送信箱空闲后停止\n    - 然后使用 `HAL_CAN_AddTxMessage()` 请求发送\n\n#### 中断模式操作\n\n- 使用 `HAL_CAN_ActivateNotification()` 激活通知，然后可以使用`HAL_CAN_xxxCallback()`来控制接收消息通知，该回调也是使用 `HAL_CAN_GetRxMessage()` 和 `HAL_CAN_AddTxMessage()`来实现的\n- 可以使用 `HAL_CAN_DeactivateNotification()` 函数停用通知 \n\n- 应特别注意 `CAN_IT_RX_FIFO0_MSG_PENDING` 和 `CAN_IT_RX_FIFO1_MSG_PENDING` ，这些通知会触发回调`HAL_CAN_RxFIFO0MsgPendingCallback()` 和 `HAL_CAN_RxFIFO1MsgPendingCallback()` 用户有两种可选项\n    - 使用 `HAL_CAN_GetRxMessage()`在回调中直接获取 Rx 消息\n    - 或者在回调中停用通知，而不获取 Rx 消息，使用 `HAL_CAN_GetRxMessage()` 获取 Rx 消息后再次激活通知 \n---\n\n上面这一部分注释详细介绍了Hal库CAN通信的使用流程，而在**接收过滤器**初始化之前的步骤，均由CubeMX工具替我们完成，我们只需调用Hal提供的api来完成剩下的步骤\n\n同时，针对各个CAN通讯的时期，Hal库都提供了完备的回调函数，只要使用 `HAL_CAN_RegisterCallback()` 来注册对应的中断，然后覆写下面的回调函数即可，这些回调函数都会以 `__weak` 的类型声明，前面会加上 `HAL_CAN_`，他们都可以在`stm32f4xx_hal_can.c`中找到\n\n```cpp\n  The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1\n  allows the user to configure dynamically the driver callbacks.\n  Use Function HAL_CAN_RegisterCallback() to register an interrupt callback.\n\n  Function HAL_CAN_RegisterCallback() allows to register following callbacks:\n    (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.\n    (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.\n    (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.\n    (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.\n    (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.\n    (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.\n    (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.\n    (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.\n    (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.\n    (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.\n    (+) SleepCallback                : Sleep Callback.\n    (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.\n    (+) ErrorCallback                : Error Callback.\n    (+) MspInitCallback              : CAN MspInit.\n    (+) MspDeInitCallback            : CAN MspDeInit.\n  This function takes as parameters the HAL peripheral handle, the Callback ID\n  and a pointer to the user callback function.\n```\n\n需要注意的是，`HAL_CAN_ActivateNotification()` 本质是开启硬件中断，而 `HAL_CAN_RegisterCallback()` 本质是软件层面的回调，这在源代码中可以很清楚地看出\n\n```cpp\n// in HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)\n\n__HAL_CAN_ENABLE_IT(hcan, ActiveITs);\n\n// in HAL_CAN_RegisterCallback(\n//      CAN_HandleTypeDef *hcan, \n//      HAL_CAN_CallbackIDTypeDef CallbackID, \n//      void (* pCallback)(CAN_HandleTypeDef *_hcan)\n//      )\n\ncase HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :\n        hcan->TxMailbox0CompleteCallback = pCallback;\n        break;\n\n```\n\n上面我忽略了对于休眠模式的内容，感兴趣的可以去浏览器搜索相关api的使用\n\n### CubeMX 配置与过滤器\n\n囿于篇幅，这两个方面就不写在这篇文章，只是简单总结一下\n\n配置要点是波特率的设置，正常的收发模式可以满足大部分的场景，上面配置波特率我只是一笔带过，这里在重新讲一下\n\n波特率的计算参数主要有三个\n\n1. `Prescalar`\n2. `Time Quanta in Bit Segment 1`\n3. `Time Quanta in Bit Segment 2`\n\n记住几个常用的组合足以应对大部分需求，注意CubeMX会**判断**各个传播相位是否过小，倘若遇到无法设置的问题时，可以试试将另一个参数先调大，将之前的参数调到目标值后再调回另一个参数\n\n而关于过滤器，要想参透原理又是需要不短的篇幅，倘若CAN设备数量不多，先用着全开放的过滤器吧，在回调函数**判断回报文头结构体的ID**就可以实现分别处理，`C610`设置ID的方法在文档中有很详细的介绍\n\n## 文末\n\n这篇文章写了好几天，`电路`和`马原`成绩还没有出来，`工程数学`挂了，`大学物理`及格，一众`水课`平安度过，希望能过个好年吧\n\n<br>\n<br>\n<br>\n<p align=\"right\">2023年1月24日凌晨2点半结文</p>","slug":"can-tutorial","published":1,"updated":"2024-05-28T16:26:13.248Z","comments":1,"layout":"post","photos":[],"_id":"clx6hajmk0016i960es6wa68l","content":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>现在是2024年1月18号晚上零点半，电路工数等困难科目已经考完，只是剩一门马原</p>\n<p>临近寒假的这一段时间颇为闲暇，于是在工作室寻得一些 <strong>M2006无刷电机</strong>和 <strong>C610电调</strong> ，加上手头上的 <strong>C板</strong>，试着组一台个人未来比赛用的四驱底盘</p>\n<p>依据大疆资料来看，电调需要使用CAN通信来控制，正中知识盲区，于是放下手中的马原教材（其实根本没有拿起来过），学习一下CAN</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><ul>\n<li>STM32CubeMX的使用</li>\n<li>一定的C语言使用经验</li>\n</ul>\n<h3 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h3><ul>\n<li>代码生成 <code>STM32CubeMX</code> （以HAL库为基础）</li>\n<li>编译工具 <code>arm-none-eabi工具链</code>（使用其他编译器亦可）</li>\n<li>编写环境 <code>VSCode</code>+<code>Embedded IDE</code> （Keil和CubeIDE亦可）</li>\n<li>调试工具 <code>Ozone</code>（本篇仅以此方法调试）</li>\n</ul>\n<h3 id=\"硬件环境\"><a href=\"#硬件环境\" class=\"headerlink\" title=\"硬件环境\"></a>硬件环境</h3><ul>\n<li>主控芯片 <code>大疆C板-STM32F407IGH6</code></li>\n<li>烧录工具 <code>JLink</code></li>\n<li>通讯目标 <code>C610电调</code></li>\n</ul>\n<h3 id=\"设备文档\"><a href=\"#设备文档\" class=\"headerlink\" title=\"设备文档\"></a>设备文档</h3><ul>\n<li><p><a href=\"https://rm-static.djicdn.com/tem/RM%20C610%E6%97%A0%E5%88%B7%E7%94%B5%E6%9C%BA%E8%B0%83%E9%80%9F%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%20%E5%8F%91%E5%B8%83%E7%89%88.pdf\">C610电调使用说明</a></p>\n</li>\n<li><p><a href=\"https://rm-static.djicdn.com/tem/35228/RoboMaster%20%20%E5%BC%80%E5%8F%91%E6%9D%BF%20C%20%E5%9E%8B%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C.pdf\">RoboMaster 开发板C型</a></p>\n</li>\n<li><p><a href=\"https://rm-static.djicdn.com/tem/35228/RoboMaster%20%E5%BC%80%E5%8F%91%E6%9D%BFC%E5%9E%8B%E5%8E%9F%E7%90%86%E5%9B%BE&%E4%BD%8D%E5%8F%B7%E5%9B%BE.zip\">C板原理图&amp;位号图</a></p>\n</li>\n</ul>\n<h2 id=\"CAN的印象\"><a href=\"#CAN的印象\" class=\"headerlink\" title=\"CAN的印象\"></a>CAN的印象</h2><h3 id=\"何为CAN？\"><a href=\"#何为CAN？\" class=\"headerlink\" title=\"何为CAN？\"></a>何为CAN？</h3><p>在查阅了很多资料后，我提取了几个关键词：<code>总线结构</code>，<code>串行通讯</code>，<code>标准协议</code>，只需要两条线，即可解决沿途中设备的通信需求，例如，使用一块主控板加上CAN总线就可以很轻松的控制多个电机，极大缓解了布线带给我们的<code>焦虑</code></p>\n<center>\n<img src=https://pic.imgdb.cn/item/66424bb50ea9cb1403870220.jpg\n    width=80% \n    />\n</center>\n<center>\n布线地狱\n</center>\n<br>\n\n<p>至于书面，准确，乃至于繁缛的官方定义，我便不写入文章里，百度看看就好</p>\n<h3 id=\"CAN的硬件组成\"><a href=\"#CAN的硬件组成\" class=\"headerlink\" title=\"CAN的硬件组成\"></a>CAN的硬件组成</h3><p>我们可以称一个通讯单元为<strong>节点</strong>，一个节点一般有三个部分：<strong>微控制器</strong>， <strong>CAN控制器</strong>，<strong>CAN收发器</strong>，总线两端须串上120Ω的电阻，以模拟无限远传输线的特性阻抗，通过开关等手段来选择是否使用这个<strong>电阻</strong></p>\n<center>\n<img src=https://pic.imgdb.cn/item/66424b9a0ea9cb140386e3ab.png width=80%/>\n</center>\n<center>\nCAN总线结构\n</center>\n<br>\n\n<p>STM32芯片会自带CAN外设拓展，名为<strong>bxCAN</strong> <code>(Basic Extended CAN  - 基本拓展CAN)</code>，详细内容此处不展开</p>\n<p>要注意，一般的STM32开发板是不带有CAN收发器的，需要自己另外购买，大疆C板是自带CAN收发器的，所以可以直接使用</p>\n<h2 id=\"CAN的回环测试\"><a href=\"#CAN的回环测试\" class=\"headerlink\" title=\"CAN的回环测试\"></a>CAN的回环测试</h2><p>姑且暂停理论部分的讲解，<strong>繁杂的原理</strong>总是令人头大，使人望而却步，我们先<strong>启动</strong>开发软件，走通一个通讯的流程，再来细细分析其中的缘由，或者跳过理论，只掌握软件层的流程也是可以的</p>\n<p>基本步骤：<code>配置STM32CubeMX</code> &gt; <code>配置CAN过滤器</code> &gt; <code>发送接收报文</code></p>\n<h3 id=\"配置STM32CubeMX\"><a href=\"#配置STM32CubeMX\" class=\"headerlink\" title=\"配置STM32CubeMX\"></a>配置STM32CubeMX</h3><p>启动CubeMX，选好芯片类型创建项目，首先把<strong>常规设置</strong>搞定</p>\n<p>关于C板的一些<strong>注意点</strong></p>\n<ul>\n<li>C板默认的<code>CAN1 PIN</code>不是原理图上的位置, 需要修改一下</li>\n<li>注意C板的晶振是<strong>12MHz</strong>，要把输入频率调整成12MHz</li>\n<li>C板的外设电源和swd输入的<strong>电源不在一条线路</strong>，不能通过<strong>swd口供电</strong>，需要插上<strong>24v电源</strong>或者<strong>usb口供电</strong>，否则CAN的收发器将不工作，无法正常收发数据，当然，<strong>回环模式</strong>还是可以收到的，因为回环的数据不经过CAN收发器</li>\n<li>一对一连接C板和电调时，需要将电调上的电阻打开，一对多时，把最远端的电阻打开即可，保持CAN总线两端串着电阻</li>\n</ul>\n<center><img src=https://pic.imgdb.cn/item/66424ba80ea9cb140386f69c.png width=80%/></center>\n<center>RCC设置</center>\n<br>\n\n<center><img src=https://pic.imgdb.cn/item/66424bb10ea9cb140386fee3.png width=80%/></center>\n<center>SWD设置</center>\n<br>\n\n\n<center><img src=https://pic.imgdb.cn/item/66424b9b0ea9cb140386e69c.png width=80%/></center>\n<center>时钟设置</center>\n<br>\n\n<center><img src=https://pic.imgdb.cn/item/66424b970ea9cb140386de39.png width=80%/></center>\n<center>.c文件和.h文件分开生成</center>\n<br>\n\n<p>项目管理类型之类的根据<strong>自己使用的开发环境</strong>来设置即可</p>\n<p>简单写一个点灯测试一下</p>\n<p>这是板载灯的连线</p>\n<ul>\n<li><code>TIM5_CH1</code> - <code>LED_BLUE</code></li>\n<li><code>TIM5_CH2</code> - <code>LED_GREEN</code></li>\n<li><code>TIM5_CH3</code> - <code>LED_RED</code></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">breath_led</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_2, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_3, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">100</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_2, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_3, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将其放入主循环中运行，理所应当地成功了</p>\n<p>现在开始配置<strong>CAN通信</strong></p>\n<p>CubeMX界面中，在<code>CAN1</code>的<strong>Parameter Settings</strong>我们可以看到</p>\n<ul>\n<li><strong>Bit Timings Parameters</strong> - 配置传输速度<ul>\n<li><strong>Prescaler (for Time Quantum)</strong> - 分频，调整TQ（Time Quantum）大小</li>\n<li>Time Quantum - 最小时间单位</li>\n<li><strong>Time Quanta in Bit Segment 1</strong> - 相位缓冲段1段占几个TQ</li>\n<li><strong>Time Quanta in Bit Segment 2</strong> - 相位缓冲段2段占几个TQ</li>\n<li>Time for one Bit</li>\n<li>Baud Rate - 波特率</li>\n<li><strong>ReSynchronization Jump Width</strong> - 再同步补偿宽度</li>\n</ul>\n</li>\n<li><strong>Basic Parameters</strong> - 基本参数<ul>\n<li>Time Triggered Communication Mode - 时间触发模式</li>\n<li>Automatic Bus-off Management - 自动离线管理</li>\n<li>Automatic Wake-Up Mode - 自动唤醒</li>\n<li>Automatic Retransmission - 自动重传</li>\n<li>Receive Fifo Locked Mode - 锁定模式</li>\n<li>Transmit Fifo Priority - 报文发送优先级</li>\n</ul>\n</li>\n<li><strong>Advanced Parameters</strong> - 高级参数<ul>\n<li><strong>Operating Mode</strong> -*运行模式：<code>正常模式</code> <code>静默模式</code> <code>回环模式</code> <code>回环静默模式</code></li>\n</ul>\n</li>\n</ul>\n<p>而 <strong>NVIC Interrupt Table</strong> 中有</p>\n<ul>\n<li>CAN1 TX interrupts</li>\n<li>CAN1 RX0 interrupts</li>\n<li>CAN1 RX1 interrupt</li>\n<li>CAN1 SCE interrupt</li>\n</ul>\n<p>这是我们初期需要关注的配置列表</p>\n<p><strong>1. 设置波特率</strong></p>\n<p>先打开CAN1的<code>Activated</code>选项, 其他的选项才能显示出来</p>\n<center><img src=https://pic.imgdb.cn/item/66424b930ea9cb140386dabf.png width=80%/></center>\n\n<p>以我的需求为例，查阅大疆官方资料可以得知</p>\n<blockquote>\n<p>将 CAN 信号线连接到控制板接收 CAN 控制指令，CAN 总线比特率为 1Mbps </p>\n</blockquote>\n<p>所以我们需要将CAN通讯的比特率 <code>baud rate</code> 设置为 <code>1000000 bit/s</code></p>\n<p>根据波特率计算公式 BaudRate &#x3D; TQ * ( Sync + TBS1 + TBS2) , 我们得到如下设置</p>\n<center><img src=https://pic.imgdb.cn/item/66424b950ea9cb140386dce8.png width=80%/></center>\n<center>TQ * ( 4 + 9 + 1 ) = 1000ns</center>\n\n<p>根据实际情况计算一下即可，也可以多选几个选项，把正确的波特率尝试出来，<strong>灰色的选项</strong>就是CubeMX帮我们计算好的数值</p>\n<p><strong>别忘了修改CAN1的引脚</strong></p>\n<center><img src=https://pic.imgdb.cn/item/66424b980ea9cb140386e0d0.png width=80%/></center>\n<center>CAN引脚设置</center>\n<br>\n\n<p><strong>2. 打开中断</strong></p>\n<p>处理电调发送的电机信息，需要中断来调用回调函数，于是打开<strong>接收中断</strong></p>\n<p>在接收和发送信息前，我们会遇到一个CAN通信的抽象概念 —— <strong>邮箱</strong></p>\n<p>这里我使用的单片机中，CAN外设具有两个用于接收信息的<strong>邮箱</strong>，我们命其为 <code>FIFO0</code>和<code>FIFO1</code>，每个邮箱都有<strong>一个过滤器</strong>，用于筛选报文，可以存放<strong>三条报文</strong>，在<strong>中断设置</strong>中对应 <code>CAN1 RX0 interrupt</code>和<code>CAN1 RX1 interrupt</code>，我们打开需要使用的那一个就可以</p>\n<center><img src=https://pic.imgdb.cn/item/66424b9d0ea9cb140386e883.png width=80%/></center>\n\n<p>既然存在接收邮箱，相应的，就有<strong>发送邮箱</strong>，我们现在只要知道发送邮箱存在<strong>发送优先级</strong>且每个邮箱只能存放<strong>一条报文</strong></p>\n<p>现在，我们已经在CubeMX中配置好了CAN，下一步就是要配置<strong>CAN过滤器</strong></p>\n<h3 id=\"配置CAN过滤器\"><a href=\"#配置CAN过滤器\" class=\"headerlink\" title=\"配置CAN过滤器\"></a>配置CAN过滤器</h3><p>前面我们说到，STM32上有两个<strong>邮箱</strong>用于接收报文，为了接收我们想要的报文，我们需要配置一下过滤器，把不想接受的报文过滤掉，只放行想要的报文</p>\n<p>配置过滤器需要我们自己手写，并未提前生成，但HAL库提供了过滤器配置参数的结构体类型，我们只需要<strong>给这个结构体赋值</strong>，然后<strong>调用HAL提供的初始化函数</strong>即可完成配置, 下面的代码仅仅是<strong>展示</strong>, 还不需要写进项目里</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 过滤器结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterIdHigh;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterIdLow;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMaskIdHigh;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMaskIdLow; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterFIFOAssignment; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterBank;        </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMode;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterScale;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterActivation; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> SlaveStartFilterBank; </span><br><span class=\"line\">&#125; CAN_FilterTypeDef;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置函数</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_ConfigFilter</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_FilterTypeDef *sFilterConfig</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>具体的使用和结构体的定义随后再讲，我们只需要对这个结构体和函数有一个<strong>大概的印象</strong>即可</p>\n<h3 id=\"发送接收报文\"><a href=\"#发送接收报文\" class=\"headerlink\" title=\"发送接收报文\"></a>发送接收报文</h3><p>首先是<strong>发送</strong></p>\n<p>我预期使用一块主控与四个电机通信，那么在发送报文时，就需要指定<strong>发送给哪一个电机</strong>，以及<strong>其他一些信息</strong>，比如发送<code>信息的长度</code>，<code>信息的类型</code>，<code>信息ID类型</code>等等，HAL把这些发送需要的信息定义成了一个结构体 <code>CAN_TxHeaderTypeDef</code>,我们只需要为每一个电机声明一个 <code>CAN_TxHeaderTypeDef</code> 结构体，再确定好发送的数据内容，就可以将数据发送到指定的电机中</p>\n<p>我们回想一下，在设置接收中断时，是不是提到了<strong>邮箱</strong>的概念？<strong>STM32F407IGHx</strong>为我们提供了三个<strong>发送邮箱</strong>，在发送时，HAL库会自动选择空闲的邮箱，然后将<strong>实际使用的邮箱</strong>返回给我们，这也解释了我们传入函数的是指向邮箱的指针，而非一个邮箱编号的常量</p>\n<p>HAL库理所应当地帮我们写好了发送的函数，只要传入<code>can的句柄</code>，<code>报文头结构体</code>，<code>数据信息</code>和<code>邮箱</code>即可</p>\n<p>下面的代码同样不需要写进项目</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送函数的声明</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_AddTxMessage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_TxHeaderTypeDef *pHeader, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint8_t</span> aData[], </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint32_t</span> *pTxMailbox</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span>；</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 邮箱编号的定义</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX0             (0x00000001U)  <span class=\"comment\">/*!&lt; Tx Mailbox 0  */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX1             (0x00000002U)  <span class=\"comment\">/*!&lt; Tx Mailbox 1  */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX2             (0x00000004U)  <span class=\"comment\">/*!&lt; Tx Mailbox 2  */</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p>然后是<strong>接收</strong></p>\n<p>总线上的报文在经过了我们设置的<strong>过滤器</strong>后，正确的报文会<strong>触发</strong>我们设置的<strong>中断</strong>，我们便可以在中断的<strong>回调函数</strong>中对收到的数据进行处理了</p>\n<p>我们只需要找到HAL库为我们提供的中断函数，对其进行覆写即可</p>\n<p>以下是示例代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一种使用情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(hcan-&gt;Instance ==CAN1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;RxHeader, date_CAN1); </span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个函数可以从报文中分离出我们想要的信息</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_GetRxMessage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan,            <span class=\"comment\">// can句柄</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint32_t</span> RxFifo,                    <span class=\"comment\">// 接收邮箱编号</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_RxHeaderTypeDef *pHeader,       <span class=\"comment\">// 接收报文头</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint8_t</span> aData[]                     <span class=\"comment\">// 数据</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span>；</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 接收邮箱编号的定义</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_RX_FIFO0                (0x00000000U)  <span class=\"comment\">/*!&lt; CAN receive FIFO 0 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_RX_FIFO1                (0x00000001U)  <span class=\"comment\">/*!&lt; CAN receive FIFO 1 */</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们配置过滤器和发送接收这两个流程应该是有了一个<strong>大概的认知</strong>，来做一个简单的测试吧</p>\n<p>将运行模式设置为<strong>回环发送</strong>，我们就可以收到自己发送的报文，前提是能通过邮箱过滤，其他配置依照上文即可</p>\n<center><img src=https://pic.imgdb.cn/item/66424b9e0ea9cb140386eb23.png width=80%/></center>\n\n<p>记得重新生成代码</p>\n<p>然后我们写一个过滤器的配置, 下面的代码按照定义函数的方式在某个地方写下, 我都写在了<code>main.c</code>中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CAN_FilterTypeDef config;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 报文头结构体的赋值</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处配置为接收全部报文，以便于测试</span></span><br><span class=\"line\">    config.FilterActivation     = ENABLE;                <span class=\"comment\">// 启用过滤器</span></span><br><span class=\"line\">    config.FilterBank           = <span class=\"number\">0</span>;                     <span class=\"comment\">// 将要初始化的过滤器组</span></span><br><span class=\"line\">    config.SlaveStartFilterBank = <span class=\"number\">0</span>;                     <span class=\"comment\">// 从模式下的过滤器组</span></span><br><span class=\"line\">    config.FilterMode           = CAN_FILTERMODE_IDMASK; <span class=\"comment\">// 掩码模式</span></span><br><span class=\"line\">    config.FilterScale          = CAN_FILTERSCALE_32BIT; <span class=\"comment\">// 32位宽</span></span><br><span class=\"line\">    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;      <span class=\"comment\">// 配置邮箱0</span></span><br><span class=\"line\">    config.FilterIdHigh         = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 高位0</span></span><br><span class=\"line\">    config.FilterIdLow          = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 低位0</span></span><br><span class=\"line\">    config.FilterMaskIdHigh     = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码高位不检测</span></span><br><span class=\"line\">    config.FilterMaskIdLow      = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码低位不检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将配置加载进CAN 1中</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ConfigFilter</span>(&amp;hcan1, &amp;config);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化CAN</p>\n<p>上面过滤器的配置中启用了邮箱0 <code>CAN_FILTER_FIFO0</code>，所以在初始化时，我们要打开邮箱0的中断</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">can_filter_init</span>();                                                  <span class=\"comment\">// 过滤器</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_Start</span>(&amp;hcan1);                                              <span class=\"comment\">// 开启CAN通讯</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ActivateNotification</span>(&amp;hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  <span class=\"comment\">// 开启接收中断</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这段不用抄, 只是看看中断的类型</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hal库中的邮箱接收中断类型</span></span><br><span class=\"line\">CAN_IT_RX_FIFO0_MSG_PENDING     <span class=\"comment\">/*!&lt; FIFO 0 message pending interrupt */</span></span><br><span class=\"line\">CAN_IT_RX_FIFO0_FULL            <span class=\"comment\">/*!&lt; FIFO 0 full interrupt            */</span></span><br><span class=\"line\">CAN_IT_RX_FIFO0_OVERRUN         <span class=\"comment\">/*!&lt; FIFO 0 overrun interrupt         */</span></span><br><span class=\"line\">CAN_IT_RX_FIFO1_MSG_PENDING     <span class=\"comment\">/*!&lt; FIFO 1 message pending interrupt */</span></span><br><span class=\"line\">CAN_IT_RX_FIFO1_FULL            <span class=\"comment\">/*!&lt; FIFO 1 full interrupt            */</span></span><br><span class=\"line\">CAN_IT_RX_FIFO1_OVERRUN         <span class=\"comment\">/*!&lt; FIFO 1 overrun interrupt </span></span><br></pre></td></tr></table></figure>\n\n<p>接着声明一些必要的变量, 这里就是在<code>main</code>函数里面写了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_rx[<span class=\"number\">8</span>];    <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_tx[<span class=\"number\">8</span>];    <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">CAN_RxHeaderTypeDef can_1_rx_header;    <span class=\"comment\">// 接收报文头</span></span><br><span class=\"line\">CAN_TxHeaderTypeDef can_1_tx_header;    <span class=\"comment\">// 发送报文头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> mail_tx = CAN_TX_MAILBOX0;     <span class=\"comment\">// 发送邮箱编号</span></span><br></pre></td></tr></table></figure>\n\n<p>初始化一些参数, 然后调用一些初始化的函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 随便创建一种发送报文头结构体</span></span><br><span class=\"line\">can_1_tx_header.StdId              = <span class=\"number\">0x00000000</span>;</span><br><span class=\"line\">can_1_tx_header.ExtId              = <span class=\"number\">0x12345000</span>;</span><br><span class=\"line\">can_1_tx_header.IDE                = CAN_ID_EXT;</span><br><span class=\"line\">can_1_tx_header.RTR                = CAN_RTR_DATA;</span><br><span class=\"line\">can_1_tx_header.DLC                = <span class=\"number\">8</span>;</span><br><span class=\"line\">can_1_tx_header.TransmitGlobalTime = DISABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化一些发送的数据</span></span><br><span class=\"line\">can_1_tx[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 要使用的灯记得开启，根据自己的板子写即可</span></span><br><span class=\"line\"><span class=\"built_in\">HAL_TIM_PWM_Start</span>(&amp;htim5, TIM_CHANNEL_1);</span><br><span class=\"line\"><span class=\"comment\">// 刚才写的初始化函数用上</span></span><br><span class=\"line\"><span class=\"built_in\">can_init</span>();</span><br></pre></td></tr></table></figure>\n\n<p>回调函数的覆写, 写在<code>main.c</code>中就行</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hcan-&gt;Instance == CAN1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;can_1_rx_header, can_1_rx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据自己的板子替换一下点灯的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在主循环中不断发送报文, 也就是 <code>while(1)</code>里面</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">HAL_CAN_AddTxMessage</span>(&amp;hcan1, &amp;can_1_tx_header, can_1_tx, &amp;mail_tx);</span><br></pre></td></tr></table></figure>\n\n<p>这是我写好的 <code>main.c</code> ，注意根据自己使用的板子情况<strong>进行修改</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN Header */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * @file           : main.c</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief          : Main program body</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * @attention</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2024 STMicroelectronics.</span></span><br><span class=\"line\"><span class=\"comment\"> * All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This software is licensed under terms that can be found in the LICENSE file</span></span><br><span class=\"line\"><span class=\"comment\"> * in the root directory of this software component.</span></span><br><span class=\"line\"><span class=\"comment\"> * If no LICENSE file comes with this software, it is provided AS-IS.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END Header */</span></span><br><span class=\"line\"><span class=\"comment\">/* Includes ------------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;main.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;can.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tim.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;gpio.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private includes ----------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN Includes */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END Includes */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PTD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PTD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private define ------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private macro -------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PM */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PM */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private variables ---------------------------------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PV */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_rx[<span class=\"number\">8</span>]; <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_tx[<span class=\"number\">8</span>]; <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">CAN_RxHeaderTypeDef can_1_rx_header; <span class=\"comment\">// 接收保报文头</span></span><br><span class=\"line\">CAN_TxHeaderTypeDef can_1_tx_header; <span class=\"comment\">// 发送报文头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> mail_tx = CAN_TX_MAILBOX0; <span class=\"comment\">// 发送邮箱编号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PV */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SystemClock_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PFP */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PFP */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private user code ---------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CAN_FilterTypeDef config;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 报文头结构体的赋值</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处配置为接收全部报文，以便于测试</span></span><br><span class=\"line\">    config.FilterActivation     = ENABLE;                <span class=\"comment\">// 启用过滤器</span></span><br><span class=\"line\">    config.FilterBank           = <span class=\"number\">0</span>;                     <span class=\"comment\">// 将要初始化的过滤器组</span></span><br><span class=\"line\">    config.SlaveStartFilterBank = <span class=\"number\">0</span>;                     <span class=\"comment\">// 从模式下的过滤器组</span></span><br><span class=\"line\">    config.FilterMode           = CAN_FILTERMODE_IDMASK; <span class=\"comment\">// 掩码模式</span></span><br><span class=\"line\">    config.FilterScale          = CAN_FILTERSCALE_32BIT; <span class=\"comment\">// 32位宽</span></span><br><span class=\"line\">    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;      <span class=\"comment\">// 配置邮箱0</span></span><br><span class=\"line\">    config.FilterIdHigh         = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 高位0</span></span><br><span class=\"line\">    config.FilterIdLow          = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 低位0</span></span><br><span class=\"line\">    config.FilterMaskIdHigh     = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码高位不检测</span></span><br><span class=\"line\">    config.FilterMaskIdLow      = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码低位不检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将配置加载进CAN 1中</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ConfigFilter</span>(&amp;hcan1, &amp;config);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">can_filter_init</span>();                                                 <span class=\"comment\">// 过滤器</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_Start</span>(&amp;hcan1);                                             <span class=\"comment\">// 开启CAN通讯</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ActivateNotification</span>(&amp;hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); <span class=\"comment\">// 开启接收中断</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hcan-&gt;Instance == CAN1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;can_1_rx_header, can_1_rx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据自己的板子替换一下点灯的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  The application entry point.</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_Init</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN Init */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END Init */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Configure the system clock */</span></span><br><span class=\"line\">    <span class=\"built_in\">SystemClock_Config</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN SysInit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END SysInit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Initialize all configured peripherals */</span></span><br><span class=\"line\">    <span class=\"built_in\">MX_GPIO_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_TIM4_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_TIM5_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_CAN1_Init</span>();</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 随便创建一种发送报文头结构体</span></span><br><span class=\"line\">    can_1_tx_header.StdId              = <span class=\"number\">0x00000000</span>;</span><br><span class=\"line\">    can_1_tx_header.ExtId              = <span class=\"number\">0x12345000</span>;</span><br><span class=\"line\">    can_1_tx_header.IDE                = CAN_ID_EXT;</span><br><span class=\"line\">    can_1_tx_header.RTR                = CAN_RTR_DATA;</span><br><span class=\"line\">    can_1_tx_header.DLC                = <span class=\"number\">8</span>;</span><br><span class=\"line\">    can_1_tx_header.TransmitGlobalTime = DISABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">    can_1_tx[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">HAL_TIM_PWM_Start</span>(&amp;htim5, TIM_CHANNEL_1);</span><br><span class=\"line\">    <span class=\"built_in\">can_init</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Infinite loop */</span></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN WHILE */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_AddTxMessage</span>(&amp;hcan1, &amp;can_1_tx_header, can_1_tx, &amp;mail_tx);</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* USER CODE END WHILE */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* USER CODE BEGIN 3 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 3 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief System Clock Configuration</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SystemClock_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Configure the main internal regulator output voltage</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    __HAL_RCC_PWR_CLK_ENABLE();</span><br><span class=\"line\">    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initializes the RCC Oscillators according to the specified parameters</span></span><br><span class=\"line\"><span class=\"comment\">     * in the RCC_OscInitTypeDef structure.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;</span><br><span class=\"line\">    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;</span><br><span class=\"line\">    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLM            = <span class=\"number\">8</span>;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLN            = <span class=\"number\">168</span>;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLQ            = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_RCC_OscConfig</span>(&amp;RCC_OscInitStruct) != HAL_OK) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initializes the CPU, AHB and APB buses clocks</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;</span><br><span class=\"line\">    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class=\"line\">    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;</span><br><span class=\"line\">    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;</span><br><span class=\"line\">    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_RCC_ClockConfig</span>(&amp;RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 4 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 4 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  This function is executed in case of error occurrence.</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Error_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN Error_Handler_Debug */</span></span><br><span class=\"line\">    <span class=\"comment\">/* User can add his own implementation to report the HAL error return state */</span></span><br><span class=\"line\">    __disable_irq();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END Error_Handler_Debug */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> USE_FULL_ASSERT</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  Reports the name of the source file and the source line number</span></span><br><span class=\"line\"><span class=\"comment\"> *         where the assert_param error has occurred.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  file: pointer to the source file name</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  line: assert_param error line source number</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">assert_failed</span><span class=\"params\">(<span class=\"type\">uint8_t</span> *file, <span class=\"type\">uint32_t</span> line)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 6 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* User can add his own implementation to report the file name and line number,</span></span><br><span class=\"line\"><span class=\"comment\">       ex: printf(&quot;Wrong parameters value: file %s on line %d\\r\\n&quot;, file, line) */</span></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 6 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* USE_FULL_ASSERT */</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在ozone中查看参数，并实时修改<strong>发送数据</strong>的数值，发现<strong>接收数据</strong>也会实时修改，板载灯反馈正常</p>\n<p>若不能使用ozone，也可以在代码中修改发送的数值，重新烧录，查看板载灯的情况</p>\n<center><img src=https://pic.imgdb.cn/item/66424ba00ea9cb140386edb5.png width=60%/></center>\n\n<p>回环测试正常，我们可以进行下一步的了解</p>\n<h2 id=\"CAN与电调通讯\"><a href=\"#CAN与电调通讯\" class=\"headerlink\" title=\"CAN与电调通讯\"></a>CAN与电调通讯</h2><p>在囫囵吞枣地走通过一遍流程后，我们遇到很很多<strong>复杂的模式和结构体</strong>，这些需要根据实际情况来酌情配置</p>\n<p>接下来我们尝试使用C板来与C610通讯，接收信息并发送信息来控制电机</p>\n<h3 id=\"接收电机的回馈消息\"><a href=\"#接收电机的回馈消息\" class=\"headerlink\" title=\"接收电机的回馈消息\"></a>接收电机的回馈消息</h3><p>为了保持代码的可读性，我们将CAN相关代码分离开来</p>\n<p>大致结构是底层依赖<code>base-can</code>，在其基础上写一层<code>module-m2006</code>，在进程中调用这两个部分文件</p>\n<p>为了降低理解的难度，暂时不考虑使用其他设备的可能，只针对一个电调和一个电机的情况先写一份控制代码</p>\n<p>首先是base-can部分，它负责与底层的交互，直接使用HAL库提供的函数，将底层与应用层隔离</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-can.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;can.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init_can</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_can_tx_header</span><span class=\"params\">(CAN_TxHeaderTypeDef *header)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-can.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base-can.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仍然使用最简单的配置，接收所有报文</span></span><br><span class=\"line\"><span class=\"comment\">// 为了统一初始化函数的调用模式，我们将HAL_CAN_ConfigFilter函数的返回值返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> HAL_StatusTypeDef <span class=\"title\">configure_can_filter</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CAN_FilterTypeDef config;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.FilterActivation     = CAN_FILTER_ENABLE;</span><br><span class=\"line\">    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;</span><br><span class=\"line\">    config.FilterMode           = CAN_FILTERMODE_IDMASK;</span><br><span class=\"line\">    config.FilterScale          = CAN_FILTERSCALE_32BIT;</span><br><span class=\"line\">    config.FilterIdHigh         = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    config.FilterIdLow          = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    config.FilterMaskIdHigh     = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    config.FilterMaskIdLow      = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    config.FilterBank           = <span class=\"number\">0</span>;</span><br><span class=\"line\">    config.SlaveStartFilterBank = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">HAL_CAN_ConfigFilter</span>(hcan, &amp;config);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 集中对CAN进行初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init_can</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">configure_can_filter</span>(hcan))</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_CAN_Start</span>(hcan))</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_CAN_ActivateNotification</span>(hcan, CAN_IT_RX_FIFO0_MSG_PENDING))</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据C610手册，设置发送报文头的内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_can_tx_header</span><span class=\"params\">(CAN_TxHeaderTypeDef *header)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    header-&gt;StdId              = <span class=\"number\">0x200</span>;</span><br><span class=\"line\">    header-&gt;IDE                = CAN_ID_STD;</span><br><span class=\"line\">    header-&gt;RTR                = CAN_RTR_DATA;</span><br><span class=\"line\">    header-&gt;DLC                = <span class=\"number\">8</span>;</span><br><span class=\"line\">    header-&gt;TransmitGlobalTime = DISABLE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面代码写的十分地局限，没有考虑后期<strong>可能不断变化的需求</strong>，但对于现阶段来说，我们的首要目标是先以最简单的方式，驱动目标电机，现在接着往下写</p>\n<h3 id=\"包装与电调通讯的代码\"><a href=\"#包装与电调通讯的代码\" class=\"headerlink\" title=\"包装与电调通讯的代码\"></a>包装与电调通讯的代码</h3><p>为了方便我们 <code>get</code> 和 <code>control</code> 电机的状态，可以把对外暴露的api，即电机返回的状态值，用结构体包装，而对于控制电机需要使用到的 <code>句柄</code> ，或者说一些必要的 <code>上下文信息</code> ,我们也使用结构体将其包装起来，最后将两个结构体包装为电机完整的结构体，这样可以极大地方便函数的调用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module-m2006.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base-can.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">MotorStatus</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int16_t</span> angle;</span><br><span class=\"line\">    <span class=\"type\">int16_t</span> speed;</span><br><span class=\"line\">    <span class=\"type\">int16_t</span> torque;</span><br><span class=\"line\">&#125; MotorStatus;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">MotorHandle</span> &#123;</span><br><span class=\"line\">    CAN_HandleTypeDef *hcan;</span><br><span class=\"line\">    CAN_RxHeaderTypeDef header_rx;</span><br><span class=\"line\">    CAN_TxHeaderTypeDef header_tx;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> mail;</span><br><span class=\"line\">&#125; MotorHandle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Motor</span> &#123;</span><br><span class=\"line\">    MotorHandle handle;</span><br><span class=\"line\">    MotorStatus status;</span><br><span class=\"line\">&#125; Motor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init_motor</span><span class=\"params\">(Motor *motor)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_motor_status</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">uint8_t</span> data[<span class=\"number\">8</span>], Motor *motor)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_motor_current</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int16_t</span> current, Motor *motor)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module-m2006.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;module-m2006.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化关于电机的所有信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init_motor</span><span class=\"params\">(Motor *motor)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    motor-&gt;handle.hcan = &amp;hcan1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">init_can</span>(motor-&gt;handle.hcan);</span><br><span class=\"line\">    <span class=\"built_in\">set_can_tx_header</span>(&amp;motor-&gt;handle.header_tx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于从回报文中提取状态信息</span></span><br><span class=\"line\"><span class=\"comment\">// 按照C610用户手册上给出的高低位数据变换即可</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_motor_status</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">uint8_t</span> data[<span class=\"number\">8</span>], Motor *motor)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    motor-&gt;status.angle  = (data[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">8</span>) | data[<span class=\"number\">1</span>];</span><br><span class=\"line\">    motor-&gt;status.speed  = (data[<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">8</span>) | data[<span class=\"number\">3</span>];</span><br><span class=\"line\">    motor-&gt;status.torque = (data[<span class=\"number\">4</span>] &lt;&lt; <span class=\"number\">8</span>) | data[<span class=\"number\">5</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于设置电机输出电流值</span></span><br><span class=\"line\"><span class=\"comment\">// 由于目前只使用一个电机，为了方便，直接设置电机电调的ID为1</span></span><br><span class=\"line\"><span class=\"comment\">// 那么第一位和第二位uint8_t数据就是第一个电机的电流值高低位</span></span><br><span class=\"line\"><span class=\"comment\">// 依照文档，电流值的范围为 -10000 到 10000</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_motor_current</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int16_t</span> current, Motor *motor)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> data[<span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    data[<span class=\"number\">0</span>] = current &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    data[<span class=\"number\">1</span>] = current | <span class=\"number\">0xff00</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_AddTxMessage</span>(</span><br><span class=\"line\">        motor-&gt;handle.hcan, &amp;motor-&gt;handle.header_tx,</span><br><span class=\"line\">        data, &amp;motor-&gt;handle.mail);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在做完前面的工作后，我们只需要调用最上层的<code>module-motor</code>提供的初始化函数，就可以对整个系统初始化，然后使用<code>get_motor_status</code>获取电机状态，使用<code>set_motor_current</code>控制电机电流值</p>\n<h3 id=\"主要逻辑和CAN接收回调函数\"><a href=\"#主要逻辑和CAN接收回调函数\" class=\"headerlink\" title=\"主要逻辑和CAN接收回调函数\"></a>主要逻辑和CAN接收回调函数</h3><p>最后，为了与HAL库生成的文件分离地更彻底一点，我们在CubeMX生成的main.c中，加入我们自定义的进程入口</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前面代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PFP */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> <span class=\"title\">entrypoint</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PFP */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中间代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 2 */</span></span><br><span class=\"line\"><span class=\"built_in\">entrypoint</span>();</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Infinite loop */</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN WHILE */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END WHILE */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 3 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 3 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后面代码省略</span></span><br></pre></td></tr></table></figure>\n\n<p>使用extern声明一个外部函数，接着在CubeMX提供的主循环前插入该函数，我们便可以创建一个entrypoint.c函数来实现<code>void entrypoint()</code></p>\n<p>同时我们也可以把回调函数写在这里，保证变量作用域的统一，这样以后对代码增删改查都可以避免直接接触CubeMX直接生成的代码，贯彻了代码<strong>高内聚低耦合</strong>的原则（doge）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entrypoint.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;main.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tim.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;module-m2006.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// entrypoint function from main.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">entrypoint</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> Motor motor;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int16_t</span> current;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @brief the main loop function</span></span><br><span class=\"line\"><span class=\"comment\">// @note control the current of motor every 1 ms</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">entrypoint</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init_motor</span>(&amp;motor);</span><br><span class=\"line\">    current = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">set_motor_current</span>(current, &amp;motor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @brief callback when receiving message from motor</span></span><br><span class=\"line\"><span class=\"comment\">// @note convert the uint8_t data to motor status</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hcan == &amp;hcan1) &#123;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> data[<span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(</span><br><span class=\"line\">            &amp;hcan1, CAN_RX_FIFO0,</span><br><span class=\"line\">            &amp;motor.handle.header_rx, data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">get_motor_status</span>(data, &amp;motor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是代码结构，<code>activity</code>中是主要的进程，里面包含了程序自定义入口，也可以在使用实时系统的情况下将任务写在该文件夹下，<code>dependency</code>是包装后的库函数，供<code>activity</code>调用，<code>base</code>是与底层直接接触的库，一般会用到大量的HAL库，负责实现一些通讯协议，而<code>module</code>是更高级一层的，一般抽象成为某个外设的驱动库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注意HAL库生成的代码并没有被写出</span><br><span class=\"line\">// 请将这些文件结构包含进项目目录中，以保证entrypoint函数能够被顺利链接</span><br><span class=\"line\">-activity</span><br><span class=\"line\">  entrypoint.c</span><br><span class=\"line\">-dependency</span><br><span class=\"line\">  -base</span><br><span class=\"line\">    base-can.c</span><br><span class=\"line\">    base-can.h</span><br><span class=\"line\">  -module</span><br><span class=\"line\">    module-m2006.c</span><br><span class=\"line\">    module-m2006.h</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"连接设备与测试\"><a href=\"#连接设备与测试\" class=\"headerlink\" title=\"连接设备与测试\"></a>连接设备与测试</h3><p>临时画一个M2006的电机架测试用，放上一张整体的连线图</p>\n<center><img src=https://pic.imgdb.cn/item/66424bab0ea9cb140386f880.png width=80%/></center>\n\n<center><img src=https://pic.imgdb.cn/item/66424bad0ea9cb140386fb42.jpg width=80%/></center>\n\n<p>修改<code>entrypoint.c</code>中<code>current</code>的值，主循环中就会以1000Hz的频率调整电机的电流值，同时可以查看电调发回来的三个状态信息，使用Ozone可以查看<code>motor</code>和<code>current</code>两个变量的情况</p>\n<center><img src=https://pic.imgdb.cn/item/66424ba20ea9cb140386ef82.png width=80%/></center>\n\n<p>使用绘图工具将<code>angle</code>的返回值绘制出来，旋转电机，可以发现角度值会随着旋转流畅地改变</p>\n<center><img src=https://pic.imgdb.cn/item/66424ba40ea9cb140386f20f.png width=80%/></center>\n\n<p>调整<code>current</code>的值，就可以控制电机的正反转动，由于没有写<strong>控制算法</strong>，运动总是<strong>迟滞</strong>于电流值的改变的</p>\n<p>倘若无法使用ozone，可以使用<strong>串口</strong>传递将需要查看的变量和需要修改的变量，或者修改<code>current</code>后查看电机转动状态亦可，各个参数的范围请参照官方提供的开发文档</p>\n<h2 id=\"CAN的各种配置与模式\"><a href=\"#CAN的各种配置与模式\" class=\"headerlink\" title=\"CAN的各种配置与模式\"></a>CAN的各种配置与模式</h2><h3 id=\"HAL库关于CAN的说明\"><a href=\"#HAL库关于CAN的说明\" class=\"headerlink\" title=\"HAL库关于CAN的说明\"></a>HAL库关于CAN的说明</h3><p>想要深入了解Hal库提供的接口，最好的办法是直接查看<strong>源码上的注释</strong></p>\n<p>这是 <code>stm32f4xx_hal_can.c</code> 中的注释，我翻译了一下</p>\n<hr>\n<h4 id=\"如何使用该驱动\"><a href=\"#如何使用该驱动\" class=\"headerlink\" title=\"如何使用该驱动\"></a>如何使用该驱动</h4><ul>\n<li>通过执行 <code>HAL_CAN_MspInit()</code> 初始化 <code>CAN</code> 的底层资源<ul>\n<li>使用 <code>__HAL_RCC_CANx_CLK_ENABLE()</code> 启用 <code>CAN</code> 接口时钟</li>\n<li>配置 <code>CAN</code> 引脚<ul>\n<li>启用 <code>CAN GPIOs</code> 时钟</li>\n<li>将 <code>CAN</code> 引脚配置为可选的开漏型</li>\n</ul>\n</li>\n<li>如果使用中断（例如 <code>HAL_CAN_ActivateNotification()</code>）<ul>\n<li>使用 <code>HAL_NVIC_SetPriority()</code> 配置 <code>CAN</code> 中断优先级</li>\n<li>使用 <code>HAL_NVIC_EnableIRQ()</code> 启用 <code>CAN IRQ handler</code></li>\n<li>在 <code>CAN IRQ handler</code> 中，调用 <code>HAL_CAN_IRQHandler()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用 <code>HAL_CAN_Init()</code> 函数初始化 <code>CAN</code> 外设 该函数委托 <code>HAL_CAN_MspInit()</code> 进行初步的初始化</li>\n<li>使用以下函数配置接收过滤器<ul>\n<li><code>HAL_CAN_ConfigFilter()</code></li>\n</ul>\n</li>\n<li>使用 <code>HAL_CAN_Start()</code> 函数启动 CAN 模块 此后该节点在总线上便处于活动状态：接收报文，并能发送报文 </li>\n<li>为管理报文传输，可使用以下 Tx 控制函数<ul>\n<li><code>HAL_CAN_AddTxMessage()</code> 用于请求传输新的报文信息 </li>\n<li><code>HAL_CAN_AbortTxRequest()</code> 用于中止待处理报文的传输 </li>\n<li><code>HAL_CAN_GetTxMailboxesFreeLevel()</code> 用来获取空闲的 Tx 邮箱的数量 </li>\n<li><code>HAL_CAN_IsTxMessagePending()</code> 用于检查 Tx 邮箱中是否有待处理的信息 </li>\n<li><code>HAL_CAN_GetTxTimestamp()</code> 当 <code>Time triggered communication mode</code> 开启时，用来获取发送的 Tx 消息的时间戳</li>\n</ul>\n</li>\n<li>当 <code>CAN Rx FIFO</code> 收到报文时，可以使用 <code>HAL_CAN_GetRxMessage()</code> 获取，<code>HAL_CAN_GetRxFifoFillLevel()</code> 可以获取 <code>Rx FIFO</code> 中存储的报文数量</li>\n<li>调用 <code>HAL_CAN_Stop()</code> 函数可停止 CAN 模块 </li>\n<li>通过 <code>HAL_CAN_DeInit()</code> 函数实现去初始化</li>\n</ul>\n<h4 id=\"轮询模式操作\"><a href=\"#轮询模式操作\" class=\"headerlink\" title=\"轮询模式操作\"></a>轮询模式操作</h4><ul>\n<li>接收<ul>\n<li>使用 <code>HAL_CAN_GetRxFifoFillLevel()</code> 监控信息接收情况，至少收到一条信息后停止监控</li>\n<li>然后使用 <code>HAL_CAN_GetRxMessage()</code> 获取信息</li>\n</ul>\n</li>\n<li>传输<ul>\n<li>使用 <code>HAL_CAN_GetTxMailboxesFreeLevel()</code> 监控发送信箱的是否空闲，至少有一个发送信箱空闲后停止</li>\n<li>然后使用 <code>HAL_CAN_AddTxMessage()</code> 请求发送</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"中断模式操作\"><a href=\"#中断模式操作\" class=\"headerlink\" title=\"中断模式操作\"></a>中断模式操作</h4><ul>\n<li><p>使用 <code>HAL_CAN_ActivateNotification()</code> 激活通知，然后可以使用<code>HAL_CAN_xxxCallback()</code>来控制接收消息通知，该回调也是使用 <code>HAL_CAN_GetRxMessage()</code> 和 <code>HAL_CAN_AddTxMessage()</code>来实现的</p>\n</li>\n<li><p>可以使用 <code>HAL_CAN_DeactivateNotification()</code> 函数停用通知 </p>\n</li>\n<li><p>应特别注意 <code>CAN_IT_RX_FIFO0_MSG_PENDING</code> 和 <code>CAN_IT_RX_FIFO1_MSG_PENDING</code> ，这些通知会触发回调<code>HAL_CAN_RxFIFO0MsgPendingCallback()</code> 和 <code>HAL_CAN_RxFIFO1MsgPendingCallback()</code> 用户有两种可选项</p>\n<ul>\n<li>使用 <code>HAL_CAN_GetRxMessage()</code>在回调中直接获取 Rx 消息</li>\n<li>或者在回调中停用通知，而不获取 Rx 消息，使用 <code>HAL_CAN_GetRxMessage()</code> 获取 Rx 消息后再次激活通知</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>上面这一部分注释详细介绍了Hal库CAN通信的使用流程，而在<strong>接收过滤器</strong>初始化之前的步骤，均由CubeMX工具替我们完成，我们只需调用Hal提供的api来完成剩下的步骤</p>\n<p>同时，针对各个CAN通讯的时期，Hal库都提供了完备的回调函数，只要使用 <code>HAL_CAN_RegisterCallback()</code> 来注册对应的中断，然后覆写下面的回调函数即可，这些回调函数都会以 <code>__weak</code> 的类型声明，前面会加上 <code>HAL_CAN_</code>，他们都可以在<code>stm32f4xx_hal_can.c</code>中找到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to <span class=\"number\">1</span></span><br><span class=\"line\">allows the user to configure dynamically the driver callbacks.</span><br><span class=\"line\"><span class=\"function\">Use Function <span class=\"title\">HAL_CAN_RegisterCallback</span><span class=\"params\">()</span> to <span class=\"keyword\">register</span> an interrupt callback.</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Function <span class=\"title\">HAL_CAN_RegisterCallback</span><span class=\"params\">()</span> allows to <span class=\"keyword\">register</span> following callbacks:</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox0CompleteCallback   : Tx Mailbox <span class=\"number\">0</span> Complete Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox1CompleteCallback   : Tx Mailbox <span class=\"number\">1</span> Complete Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox2CompleteCallback   : Tx Mailbox <span class=\"number\">2</span> Complete Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox0AbortCallback      : Tx Mailbox <span class=\"number\">0</span> Abort Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox1AbortCallback      : Tx Mailbox <span class=\"number\">1</span> Abort Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox2AbortCallback      : Tx Mailbox <span class=\"number\">2</span> Abort Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) RxFifo0MsgPendingCallback    : Rx Fifo <span class=\"number\">0</span> Message Pending Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) RxFifo0FullCallback          : Rx Fifo <span class=\"number\">0</span> Full Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) RxFifo1MsgPendingCallback    : Rx Fifo <span class=\"number\">1</span> Message Pending Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) RxFifo1FullCallback          : Rx Fifo <span class=\"number\">1</span> Full Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) SleepCallback                : Sleep Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) ErrorCallback                : Error Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) MspInitCallback              : CAN MspInit.</span></span><br><span class=\"line\"><span class=\"function\">  (+) MspDeInitCallback            : CAN MspDeInit.</span></span><br><span class=\"line\"><span class=\"function\">This function takes as parameters the HAL peripheral handle, the Callback ID</span></span><br><span class=\"line\"><span class=\"function\">and a pointer to the user callback function.</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<code>HAL_CAN_ActivateNotification()</code> 本质是开启硬件中断，而 <code>HAL_CAN_RegisterCallback()</code> 本质是软件层面的回调，这在源代码中可以很清楚地看出</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)</span></span><br><span class=\"line\"></span><br><span class=\"line\">__HAL_CAN_ENABLE_IT(hcan, ActiveITs);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in HAL_CAN_RegisterCallback(</span></span><br><span class=\"line\"><span class=\"comment\">//      CAN_HandleTypeDef *hcan, </span></span><br><span class=\"line\"><span class=\"comment\">//      HAL_CAN_CallbackIDTypeDef CallbackID, </span></span><br><span class=\"line\"><span class=\"comment\">//      void (* pCallback)(CAN_HandleTypeDef *_hcan)</span></span><br><span class=\"line\"><span class=\"comment\">//      )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :</span><br><span class=\"line\">        hcan-&gt;TxMailbox0CompleteCallback = pCallback;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面我忽略了对于休眠模式的内容，感兴趣的可以去浏览器搜索相关api的使用</p>\n<h3 id=\"CubeMX-配置与过滤器\"><a href=\"#CubeMX-配置与过滤器\" class=\"headerlink\" title=\"CubeMX 配置与过滤器\"></a>CubeMX 配置与过滤器</h3><p>囿于篇幅，这两个方面就不写在这篇文章，只是简单总结一下</p>\n<p>配置要点是波特率的设置，正常的收发模式可以满足大部分的场景，上面配置波特率我只是一笔带过，这里在重新讲一下</p>\n<p>波特率的计算参数主要有三个</p>\n<ol>\n<li><code>Prescalar</code></li>\n<li><code>Time Quanta in Bit Segment 1</code></li>\n<li><code>Time Quanta in Bit Segment 2</code></li>\n</ol>\n<p>记住几个常用的组合足以应对大部分需求，注意CubeMX会<strong>判断</strong>各个传播相位是否过小，倘若遇到无法设置的问题时，可以试试将另一个参数先调大，将之前的参数调到目标值后再调回另一个参数</p>\n<p>而关于过滤器，要想参透原理又是需要不短的篇幅，倘若CAN设备数量不多，先用着全开放的过滤器吧，在回调函数<strong>判断回报文头结构体的ID</strong>就可以实现分别处理，<code>C610</code>设置ID的方法在文档中有很详细的介绍</p>\n<h2 id=\"文末\"><a href=\"#文末\" class=\"headerlink\" title=\"文末\"></a>文末</h2><p>这篇文章写了好几天，<code>电路</code>和<code>马原</code>成绩还没有出来，<code>工程数学</code>挂了，<code>大学物理</code>及格，一众<code>水课</code>平安度过，希望能过个好年吧</p>\n<br>\n<br>\n<br>\n<p align=\"right\">2023年1月24日凌晨2点半结文</p>","excerpt":"","more":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>现在是2024年1月18号晚上零点半，电路工数等困难科目已经考完，只是剩一门马原</p>\n<p>临近寒假的这一段时间颇为闲暇，于是在工作室寻得一些 <strong>M2006无刷电机</strong>和 <strong>C610电调</strong> ，加上手头上的 <strong>C板</strong>，试着组一台个人未来比赛用的四驱底盘</p>\n<p>依据大疆资料来看，电调需要使用CAN通信来控制，正中知识盲区，于是放下手中的马原教材（其实根本没有拿起来过），学习一下CAN</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><ul>\n<li>STM32CubeMX的使用</li>\n<li>一定的C语言使用经验</li>\n</ul>\n<h3 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h3><ul>\n<li>代码生成 <code>STM32CubeMX</code> （以HAL库为基础）</li>\n<li>编译工具 <code>arm-none-eabi工具链</code>（使用其他编译器亦可）</li>\n<li>编写环境 <code>VSCode</code>+<code>Embedded IDE</code> （Keil和CubeIDE亦可）</li>\n<li>调试工具 <code>Ozone</code>（本篇仅以此方法调试）</li>\n</ul>\n<h3 id=\"硬件环境\"><a href=\"#硬件环境\" class=\"headerlink\" title=\"硬件环境\"></a>硬件环境</h3><ul>\n<li>主控芯片 <code>大疆C板-STM32F407IGH6</code></li>\n<li>烧录工具 <code>JLink</code></li>\n<li>通讯目标 <code>C610电调</code></li>\n</ul>\n<h3 id=\"设备文档\"><a href=\"#设备文档\" class=\"headerlink\" title=\"设备文档\"></a>设备文档</h3><ul>\n<li><p><a href=\"https://rm-static.djicdn.com/tem/RM%20C610%E6%97%A0%E5%88%B7%E7%94%B5%E6%9C%BA%E8%B0%83%E9%80%9F%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%20%E5%8F%91%E5%B8%83%E7%89%88.pdf\">C610电调使用说明</a></p>\n</li>\n<li><p><a href=\"https://rm-static.djicdn.com/tem/35228/RoboMaster%20%20%E5%BC%80%E5%8F%91%E6%9D%BF%20C%20%E5%9E%8B%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C.pdf\">RoboMaster 开发板C型</a></p>\n</li>\n<li><p><a href=\"https://rm-static.djicdn.com/tem/35228/RoboMaster%20%E5%BC%80%E5%8F%91%E6%9D%BFC%E5%9E%8B%E5%8E%9F%E7%90%86%E5%9B%BE&%E4%BD%8D%E5%8F%B7%E5%9B%BE.zip\">C板原理图&amp;位号图</a></p>\n</li>\n</ul>\n<h2 id=\"CAN的印象\"><a href=\"#CAN的印象\" class=\"headerlink\" title=\"CAN的印象\"></a>CAN的印象</h2><h3 id=\"何为CAN？\"><a href=\"#何为CAN？\" class=\"headerlink\" title=\"何为CAN？\"></a>何为CAN？</h3><p>在查阅了很多资料后，我提取了几个关键词：<code>总线结构</code>，<code>串行通讯</code>，<code>标准协议</code>，只需要两条线，即可解决沿途中设备的通信需求，例如，使用一块主控板加上CAN总线就可以很轻松的控制多个电机，极大缓解了布线带给我们的<code>焦虑</code></p>\n<center>\n<img src=https://pic.imgdb.cn/item/66424bb50ea9cb1403870220.jpg\n    width=80% \n    />\n</center>\n<center>\n布线地狱\n</center>\n<br>\n\n<p>至于书面，准确，乃至于繁缛的官方定义，我便不写入文章里，百度看看就好</p>\n<h3 id=\"CAN的硬件组成\"><a href=\"#CAN的硬件组成\" class=\"headerlink\" title=\"CAN的硬件组成\"></a>CAN的硬件组成</h3><p>我们可以称一个通讯单元为<strong>节点</strong>，一个节点一般有三个部分：<strong>微控制器</strong>， <strong>CAN控制器</strong>，<strong>CAN收发器</strong>，总线两端须串上120Ω的电阻，以模拟无限远传输线的特性阻抗，通过开关等手段来选择是否使用这个<strong>电阻</strong></p>\n<center>\n<img src=https://pic.imgdb.cn/item/66424b9a0ea9cb140386e3ab.png width=80%/>\n</center>\n<center>\nCAN总线结构\n</center>\n<br>\n\n<p>STM32芯片会自带CAN外设拓展，名为<strong>bxCAN</strong> <code>(Basic Extended CAN  - 基本拓展CAN)</code>，详细内容此处不展开</p>\n<p>要注意，一般的STM32开发板是不带有CAN收发器的，需要自己另外购买，大疆C板是自带CAN收发器的，所以可以直接使用</p>\n<h2 id=\"CAN的回环测试\"><a href=\"#CAN的回环测试\" class=\"headerlink\" title=\"CAN的回环测试\"></a>CAN的回环测试</h2><p>姑且暂停理论部分的讲解，<strong>繁杂的原理</strong>总是令人头大，使人望而却步，我们先<strong>启动</strong>开发软件，走通一个通讯的流程，再来细细分析其中的缘由，或者跳过理论，只掌握软件层的流程也是可以的</p>\n<p>基本步骤：<code>配置STM32CubeMX</code> &gt; <code>配置CAN过滤器</code> &gt; <code>发送接收报文</code></p>\n<h3 id=\"配置STM32CubeMX\"><a href=\"#配置STM32CubeMX\" class=\"headerlink\" title=\"配置STM32CubeMX\"></a>配置STM32CubeMX</h3><p>启动CubeMX，选好芯片类型创建项目，首先把<strong>常规设置</strong>搞定</p>\n<p>关于C板的一些<strong>注意点</strong></p>\n<ul>\n<li>C板默认的<code>CAN1 PIN</code>不是原理图上的位置, 需要修改一下</li>\n<li>注意C板的晶振是<strong>12MHz</strong>，要把输入频率调整成12MHz</li>\n<li>C板的外设电源和swd输入的<strong>电源不在一条线路</strong>，不能通过<strong>swd口供电</strong>，需要插上<strong>24v电源</strong>或者<strong>usb口供电</strong>，否则CAN的收发器将不工作，无法正常收发数据，当然，<strong>回环模式</strong>还是可以收到的，因为回环的数据不经过CAN收发器</li>\n<li>一对一连接C板和电调时，需要将电调上的电阻打开，一对多时，把最远端的电阻打开即可，保持CAN总线两端串着电阻</li>\n</ul>\n<center><img src=https://pic.imgdb.cn/item/66424ba80ea9cb140386f69c.png width=80%/></center>\n<center>RCC设置</center>\n<br>\n\n<center><img src=https://pic.imgdb.cn/item/66424bb10ea9cb140386fee3.png width=80%/></center>\n<center>SWD设置</center>\n<br>\n\n\n<center><img src=https://pic.imgdb.cn/item/66424b9b0ea9cb140386e69c.png width=80%/></center>\n<center>时钟设置</center>\n<br>\n\n<center><img src=https://pic.imgdb.cn/item/66424b970ea9cb140386de39.png width=80%/></center>\n<center>.c文件和.h文件分开生成</center>\n<br>\n\n<p>项目管理类型之类的根据<strong>自己使用的开发环境</strong>来设置即可</p>\n<p>简单写一个点灯测试一下</p>\n<p>这是板载灯的连线</p>\n<ul>\n<li><code>TIM5_CH1</code> - <code>LED_BLUE</code></li>\n<li><code>TIM5_CH2</code> - <code>LED_GREEN</code></li>\n<li><code>TIM5_CH3</code> - <code>LED_RED</code></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">breath_led</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_2, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_3, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">100</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_2, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">        __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_3, <span class=\"number\">20000</span> * i / <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将其放入主循环中运行，理所应当地成功了</p>\n<p>现在开始配置<strong>CAN通信</strong></p>\n<p>CubeMX界面中，在<code>CAN1</code>的<strong>Parameter Settings</strong>我们可以看到</p>\n<ul>\n<li><strong>Bit Timings Parameters</strong> - 配置传输速度<ul>\n<li><strong>Prescaler (for Time Quantum)</strong> - 分频，调整TQ（Time Quantum）大小</li>\n<li>Time Quantum - 最小时间单位</li>\n<li><strong>Time Quanta in Bit Segment 1</strong> - 相位缓冲段1段占几个TQ</li>\n<li><strong>Time Quanta in Bit Segment 2</strong> - 相位缓冲段2段占几个TQ</li>\n<li>Time for one Bit</li>\n<li>Baud Rate - 波特率</li>\n<li><strong>ReSynchronization Jump Width</strong> - 再同步补偿宽度</li>\n</ul>\n</li>\n<li><strong>Basic Parameters</strong> - 基本参数<ul>\n<li>Time Triggered Communication Mode - 时间触发模式</li>\n<li>Automatic Bus-off Management - 自动离线管理</li>\n<li>Automatic Wake-Up Mode - 自动唤醒</li>\n<li>Automatic Retransmission - 自动重传</li>\n<li>Receive Fifo Locked Mode - 锁定模式</li>\n<li>Transmit Fifo Priority - 报文发送优先级</li>\n</ul>\n</li>\n<li><strong>Advanced Parameters</strong> - 高级参数<ul>\n<li><strong>Operating Mode</strong> -*运行模式：<code>正常模式</code> <code>静默模式</code> <code>回环模式</code> <code>回环静默模式</code></li>\n</ul>\n</li>\n</ul>\n<p>而 <strong>NVIC Interrupt Table</strong> 中有</p>\n<ul>\n<li>CAN1 TX interrupts</li>\n<li>CAN1 RX0 interrupts</li>\n<li>CAN1 RX1 interrupt</li>\n<li>CAN1 SCE interrupt</li>\n</ul>\n<p>这是我们初期需要关注的配置列表</p>\n<p><strong>1. 设置波特率</strong></p>\n<p>先打开CAN1的<code>Activated</code>选项, 其他的选项才能显示出来</p>\n<center><img src=https://pic.imgdb.cn/item/66424b930ea9cb140386dabf.png width=80%/></center>\n\n<p>以我的需求为例，查阅大疆官方资料可以得知</p>\n<blockquote>\n<p>将 CAN 信号线连接到控制板接收 CAN 控制指令，CAN 总线比特率为 1Mbps </p>\n</blockquote>\n<p>所以我们需要将CAN通讯的比特率 <code>baud rate</code> 设置为 <code>1000000 bit/s</code></p>\n<p>根据波特率计算公式 BaudRate &#x3D; TQ * ( Sync + TBS1 + TBS2) , 我们得到如下设置</p>\n<center><img src=https://pic.imgdb.cn/item/66424b950ea9cb140386dce8.png width=80%/></center>\n<center>TQ * ( 4 + 9 + 1 ) = 1000ns</center>\n\n<p>根据实际情况计算一下即可，也可以多选几个选项，把正确的波特率尝试出来，<strong>灰色的选项</strong>就是CubeMX帮我们计算好的数值</p>\n<p><strong>别忘了修改CAN1的引脚</strong></p>\n<center><img src=https://pic.imgdb.cn/item/66424b980ea9cb140386e0d0.png width=80%/></center>\n<center>CAN引脚设置</center>\n<br>\n\n<p><strong>2. 打开中断</strong></p>\n<p>处理电调发送的电机信息，需要中断来调用回调函数，于是打开<strong>接收中断</strong></p>\n<p>在接收和发送信息前，我们会遇到一个CAN通信的抽象概念 —— <strong>邮箱</strong></p>\n<p>这里我使用的单片机中，CAN外设具有两个用于接收信息的<strong>邮箱</strong>，我们命其为 <code>FIFO0</code>和<code>FIFO1</code>，每个邮箱都有<strong>一个过滤器</strong>，用于筛选报文，可以存放<strong>三条报文</strong>，在<strong>中断设置</strong>中对应 <code>CAN1 RX0 interrupt</code>和<code>CAN1 RX1 interrupt</code>，我们打开需要使用的那一个就可以</p>\n<center><img src=https://pic.imgdb.cn/item/66424b9d0ea9cb140386e883.png width=80%/></center>\n\n<p>既然存在接收邮箱，相应的，就有<strong>发送邮箱</strong>，我们现在只要知道发送邮箱存在<strong>发送优先级</strong>且每个邮箱只能存放<strong>一条报文</strong></p>\n<p>现在，我们已经在CubeMX中配置好了CAN，下一步就是要配置<strong>CAN过滤器</strong></p>\n<h3 id=\"配置CAN过滤器\"><a href=\"#配置CAN过滤器\" class=\"headerlink\" title=\"配置CAN过滤器\"></a>配置CAN过滤器</h3><p>前面我们说到，STM32上有两个<strong>邮箱</strong>用于接收报文，为了接收我们想要的报文，我们需要配置一下过滤器，把不想接受的报文过滤掉，只放行想要的报文</p>\n<p>配置过滤器需要我们自己手写，并未提前生成，但HAL库提供了过滤器配置参数的结构体类型，我们只需要<strong>给这个结构体赋值</strong>，然后<strong>调用HAL提供的初始化函数</strong>即可完成配置, 下面的代码仅仅是<strong>展示</strong>, 还不需要写进项目里</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 过滤器结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterIdHigh;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterIdLow;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMaskIdHigh;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMaskIdLow; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterFIFOAssignment; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterBank;        </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterMode;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterScale;</span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> FilterActivation; </span><br><span class=\"line\">  <span class=\"type\">uint32_t</span> SlaveStartFilterBank; </span><br><span class=\"line\">&#125; CAN_FilterTypeDef;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置函数</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_ConfigFilter</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_FilterTypeDef *sFilterConfig</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>具体的使用和结构体的定义随后再讲，我们只需要对这个结构体和函数有一个<strong>大概的印象</strong>即可</p>\n<h3 id=\"发送接收报文\"><a href=\"#发送接收报文\" class=\"headerlink\" title=\"发送接收报文\"></a>发送接收报文</h3><p>首先是<strong>发送</strong></p>\n<p>我预期使用一块主控与四个电机通信，那么在发送报文时，就需要指定<strong>发送给哪一个电机</strong>，以及<strong>其他一些信息</strong>，比如发送<code>信息的长度</code>，<code>信息的类型</code>，<code>信息ID类型</code>等等，HAL把这些发送需要的信息定义成了一个结构体 <code>CAN_TxHeaderTypeDef</code>,我们只需要为每一个电机声明一个 <code>CAN_TxHeaderTypeDef</code> 结构体，再确定好发送的数据内容，就可以将数据发送到指定的电机中</p>\n<p>我们回想一下，在设置接收中断时，是不是提到了<strong>邮箱</strong>的概念？<strong>STM32F407IGHx</strong>为我们提供了三个<strong>发送邮箱</strong>，在发送时，HAL库会自动选择空闲的邮箱，然后将<strong>实际使用的邮箱</strong>返回给我们，这也解释了我们传入函数的是指向邮箱的指针，而非一个邮箱编号的常量</p>\n<p>HAL库理所应当地帮我们写好了发送的函数，只要传入<code>can的句柄</code>，<code>报文头结构体</code>，<code>数据信息</code>和<code>邮箱</code>即可</p>\n<p>下面的代码同样不需要写进项目</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drivers\\STM32F4xx_HAL_Driver\\Inc\\stm32f4xx_hal_can.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送函数的声明</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_AddTxMessage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_TxHeaderTypeDef *pHeader, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint8_t</span> aData[], </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint32_t</span> *pTxMailbox</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span>；</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 邮箱编号的定义</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX0             (0x00000001U)  <span class=\"comment\">/*!&lt; Tx Mailbox 0  */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX1             (0x00000002U)  <span class=\"comment\">/*!&lt; Tx Mailbox 1  */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_TX_MAILBOX2             (0x00000004U)  <span class=\"comment\">/*!&lt; Tx Mailbox 2  */</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p>然后是<strong>接收</strong></p>\n<p>总线上的报文在经过了我们设置的<strong>过滤器</strong>后，正确的报文会<strong>触发</strong>我们设置的<strong>中断</strong>，我们便可以在中断的<strong>回调函数</strong>中对收到的数据进行处理了</p>\n<p>我们只需要找到HAL库为我们提供的中断函数，对其进行覆写即可</p>\n<p>以下是示例代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一种使用情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(hcan-&gt;Instance ==CAN1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;RxHeader, date_CAN1); </span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个函数可以从报文中分离出我们想要的信息</span></span><br><span class=\"line\"><span class=\"function\">HAL_StatusTypeDef <span class=\"title\">HAL_CAN_GetRxMessage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_HandleTypeDef *hcan,            <span class=\"comment\">// can句柄</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint32_t</span> RxFifo,                    <span class=\"comment\">// 接收邮箱编号</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    CAN_RxHeaderTypeDef *pHeader,       <span class=\"comment\">// 接收报文头</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint8_t</span> aData[]                     <span class=\"comment\">// 数据</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span>；</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 接收邮箱编号的定义</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_RX_FIFO0                (0x00000000U)  <span class=\"comment\">/*!&lt; CAN receive FIFO 0 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAN_RX_FIFO1                (0x00000001U)  <span class=\"comment\">/*!&lt; CAN receive FIFO 1 */</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们配置过滤器和发送接收这两个流程应该是有了一个<strong>大概的认知</strong>，来做一个简单的测试吧</p>\n<p>将运行模式设置为<strong>回环发送</strong>，我们就可以收到自己发送的报文，前提是能通过邮箱过滤，其他配置依照上文即可</p>\n<center><img src=https://pic.imgdb.cn/item/66424b9e0ea9cb140386eb23.png width=80%/></center>\n\n<p>记得重新生成代码</p>\n<p>然后我们写一个过滤器的配置, 下面的代码按照定义函数的方式在某个地方写下, 我都写在了<code>main.c</code>中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CAN_FilterTypeDef config;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 报文头结构体的赋值</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处配置为接收全部报文，以便于测试</span></span><br><span class=\"line\">    config.FilterActivation     = ENABLE;                <span class=\"comment\">// 启用过滤器</span></span><br><span class=\"line\">    config.FilterBank           = <span class=\"number\">0</span>;                     <span class=\"comment\">// 将要初始化的过滤器组</span></span><br><span class=\"line\">    config.SlaveStartFilterBank = <span class=\"number\">0</span>;                     <span class=\"comment\">// 从模式下的过滤器组</span></span><br><span class=\"line\">    config.FilterMode           = CAN_FILTERMODE_IDMASK; <span class=\"comment\">// 掩码模式</span></span><br><span class=\"line\">    config.FilterScale          = CAN_FILTERSCALE_32BIT; <span class=\"comment\">// 32位宽</span></span><br><span class=\"line\">    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;      <span class=\"comment\">// 配置邮箱0</span></span><br><span class=\"line\">    config.FilterIdHigh         = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 高位0</span></span><br><span class=\"line\">    config.FilterIdLow          = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 低位0</span></span><br><span class=\"line\">    config.FilterMaskIdHigh     = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码高位不检测</span></span><br><span class=\"line\">    config.FilterMaskIdLow      = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码低位不检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将配置加载进CAN 1中</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ConfigFilter</span>(&amp;hcan1, &amp;config);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化CAN</p>\n<p>上面过滤器的配置中启用了邮箱0 <code>CAN_FILTER_FIFO0</code>，所以在初始化时，我们要打开邮箱0的中断</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">can_filter_init</span>();                                                  <span class=\"comment\">// 过滤器</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_Start</span>(&amp;hcan1);                                              <span class=\"comment\">// 开启CAN通讯</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ActivateNotification</span>(&amp;hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  <span class=\"comment\">// 开启接收中断</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这段不用抄, 只是看看中断的类型</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hal库中的邮箱接收中断类型</span></span><br><span class=\"line\">CAN_IT_RX_FIFO0_MSG_PENDING     <span class=\"comment\">/*!&lt; FIFO 0 message pending interrupt */</span></span><br><span class=\"line\">CAN_IT_RX_FIFO0_FULL            <span class=\"comment\">/*!&lt; FIFO 0 full interrupt            */</span></span><br><span class=\"line\">CAN_IT_RX_FIFO0_OVERRUN         <span class=\"comment\">/*!&lt; FIFO 0 overrun interrupt         */</span></span><br><span class=\"line\">CAN_IT_RX_FIFO1_MSG_PENDING     <span class=\"comment\">/*!&lt; FIFO 1 message pending interrupt */</span></span><br><span class=\"line\">CAN_IT_RX_FIFO1_FULL            <span class=\"comment\">/*!&lt; FIFO 1 full interrupt            */</span></span><br><span class=\"line\">CAN_IT_RX_FIFO1_OVERRUN         <span class=\"comment\">/*!&lt; FIFO 1 overrun interrupt </span></span><br></pre></td></tr></table></figure>\n\n<p>接着声明一些必要的变量, 这里就是在<code>main</code>函数里面写了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_rx[<span class=\"number\">8</span>];    <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_tx[<span class=\"number\">8</span>];    <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">CAN_RxHeaderTypeDef can_1_rx_header;    <span class=\"comment\">// 接收报文头</span></span><br><span class=\"line\">CAN_TxHeaderTypeDef can_1_tx_header;    <span class=\"comment\">// 发送报文头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> mail_tx = CAN_TX_MAILBOX0;     <span class=\"comment\">// 发送邮箱编号</span></span><br></pre></td></tr></table></figure>\n\n<p>初始化一些参数, 然后调用一些初始化的函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 随便创建一种发送报文头结构体</span></span><br><span class=\"line\">can_1_tx_header.StdId              = <span class=\"number\">0x00000000</span>;</span><br><span class=\"line\">can_1_tx_header.ExtId              = <span class=\"number\">0x12345000</span>;</span><br><span class=\"line\">can_1_tx_header.IDE                = CAN_ID_EXT;</span><br><span class=\"line\">can_1_tx_header.RTR                = CAN_RTR_DATA;</span><br><span class=\"line\">can_1_tx_header.DLC                = <span class=\"number\">8</span>;</span><br><span class=\"line\">can_1_tx_header.TransmitGlobalTime = DISABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化一些发送的数据</span></span><br><span class=\"line\">can_1_tx[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 要使用的灯记得开启，根据自己的板子写即可</span></span><br><span class=\"line\"><span class=\"built_in\">HAL_TIM_PWM_Start</span>(&amp;htim5, TIM_CHANNEL_1);</span><br><span class=\"line\"><span class=\"comment\">// 刚才写的初始化函数用上</span></span><br><span class=\"line\"><span class=\"built_in\">can_init</span>();</span><br></pre></td></tr></table></figure>\n\n<p>回调函数的覆写, 写在<code>main.c</code>中就行</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hcan-&gt;Instance == CAN1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;can_1_rx_header, can_1_rx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据自己的板子替换一下点灯的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在主循环中不断发送报文, 也就是 <code>while(1)</code>里面</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">HAL_CAN_AddTxMessage</span>(&amp;hcan1, &amp;can_1_tx_header, can_1_tx, &amp;mail_tx);</span><br></pre></td></tr></table></figure>\n\n<p>这是我写好的 <code>main.c</code> ，注意根据自己使用的板子情况<strong>进行修改</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN Header */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * @file           : main.c</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief          : Main program body</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * @attention</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2024 STMicroelectronics.</span></span><br><span class=\"line\"><span class=\"comment\"> * All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This software is licensed under terms that can be found in the LICENSE file</span></span><br><span class=\"line\"><span class=\"comment\"> * in the root directory of this software component.</span></span><br><span class=\"line\"><span class=\"comment\"> * If no LICENSE file comes with this software, it is provided AS-IS.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END Header */</span></span><br><span class=\"line\"><span class=\"comment\">/* Includes ------------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;main.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;can.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tim.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;gpio.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private includes ----------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN Includes */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END Includes */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PTD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PTD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private define ------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PD */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private macro -------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PM */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PM */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private variables ---------------------------------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PV */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_rx[<span class=\"number\">8</span>]; <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> can_1_tx[<span class=\"number\">8</span>]; <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">CAN_RxHeaderTypeDef can_1_rx_header; <span class=\"comment\">// 接收保报文头</span></span><br><span class=\"line\">CAN_TxHeaderTypeDef can_1_tx_header; <span class=\"comment\">// 发送报文头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> mail_tx = CAN_TX_MAILBOX0; <span class=\"comment\">// 发送邮箱编号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PV */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SystemClock_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PFP */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PFP */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private user code ---------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_filter_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CAN_FilterTypeDef config;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 报文头结构体的赋值</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处配置为接收全部报文，以便于测试</span></span><br><span class=\"line\">    config.FilterActivation     = ENABLE;                <span class=\"comment\">// 启用过滤器</span></span><br><span class=\"line\">    config.FilterBank           = <span class=\"number\">0</span>;                     <span class=\"comment\">// 将要初始化的过滤器组</span></span><br><span class=\"line\">    config.SlaveStartFilterBank = <span class=\"number\">0</span>;                     <span class=\"comment\">// 从模式下的过滤器组</span></span><br><span class=\"line\">    config.FilterMode           = CAN_FILTERMODE_IDMASK; <span class=\"comment\">// 掩码模式</span></span><br><span class=\"line\">    config.FilterScale          = CAN_FILTERSCALE_32BIT; <span class=\"comment\">// 32位宽</span></span><br><span class=\"line\">    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;      <span class=\"comment\">// 配置邮箱0</span></span><br><span class=\"line\">    config.FilterIdHigh         = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 高位0</span></span><br><span class=\"line\">    config.FilterIdLow          = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 低位0</span></span><br><span class=\"line\">    config.FilterMaskIdHigh     = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码高位不检测</span></span><br><span class=\"line\">    config.FilterMaskIdLow      = <span class=\"number\">0x0000</span>;                <span class=\"comment\">// 掩码低位不检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将配置加载进CAN 1中</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ConfigFilter</span>(&amp;hcan1, &amp;config);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">can_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">can_filter_init</span>();                                                 <span class=\"comment\">// 过滤器</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_Start</span>(&amp;hcan1);                                             <span class=\"comment\">// 开启CAN通讯</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_ActivateNotification</span>(&amp;hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); <span class=\"comment\">// 开启接收中断</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hcan-&gt;Instance == CAN1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(&amp;hcan1, CAN_RX_FIFO0, &amp;can_1_rx_header, can_1_rx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 简单根据接收数据内容做一个反馈，点亮或熄灭板载灯</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据自己的板子替换一下点灯的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">20000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (can_1_rx[<span class=\"number\">0</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_1, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  The application entry point.</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class=\"line\">    <span class=\"built_in\">HAL_Init</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN Init */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END Init */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Configure the system clock */</span></span><br><span class=\"line\">    <span class=\"built_in\">SystemClock_Config</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN SysInit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END SysInit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Initialize all configured peripherals */</span></span><br><span class=\"line\">    <span class=\"built_in\">MX_GPIO_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_TIM4_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_TIM5_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">MX_CAN1_Init</span>();</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 随便创建一种发送报文头结构体</span></span><br><span class=\"line\">    can_1_tx_header.StdId              = <span class=\"number\">0x00000000</span>;</span><br><span class=\"line\">    can_1_tx_header.ExtId              = <span class=\"number\">0x12345000</span>;</span><br><span class=\"line\">    can_1_tx_header.IDE                = CAN_ID_EXT;</span><br><span class=\"line\">    can_1_tx_header.RTR                = CAN_RTR_DATA;</span><br><span class=\"line\">    can_1_tx_header.DLC                = <span class=\"number\">8</span>;</span><br><span class=\"line\">    can_1_tx_header.TransmitGlobalTime = DISABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">    can_1_tx[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">HAL_TIM_PWM_Start</span>(&amp;htim5, TIM_CHANNEL_1);</span><br><span class=\"line\">    <span class=\"built_in\">can_init</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Infinite loop */</span></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN WHILE */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_AddTxMessage</span>(&amp;hcan1, &amp;can_1_tx_header, can_1_tx, &amp;mail_tx);</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* USER CODE END WHILE */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* USER CODE BEGIN 3 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 3 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief System Clock Configuration</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SystemClock_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Configure the main internal regulator output voltage</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    __HAL_RCC_PWR_CLK_ENABLE();</span><br><span class=\"line\">    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initializes the RCC Oscillators according to the specified parameters</span></span><br><span class=\"line\"><span class=\"comment\">     * in the RCC_OscInitTypeDef structure.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;</span><br><span class=\"line\">    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;</span><br><span class=\"line\">    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLM            = <span class=\"number\">8</span>;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLN            = <span class=\"number\">168</span>;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;</span><br><span class=\"line\">    RCC_OscInitStruct.PLL.PLLQ            = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_RCC_OscConfig</span>(&amp;RCC_OscInitStruct) != HAL_OK) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initializes the CPU, AHB and APB buses clocks</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;</span><br><span class=\"line\">    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class=\"line\">    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;</span><br><span class=\"line\">    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;</span><br><span class=\"line\">    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_RCC_ClockConfig</span>(&amp;RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 4 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 4 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  This function is executed in case of error occurrence.</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Error_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN Error_Handler_Debug */</span></span><br><span class=\"line\">    <span class=\"comment\">/* User can add his own implementation to report the HAL error return state */</span></span><br><span class=\"line\">    __disable_irq();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END Error_Handler_Debug */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> USE_FULL_ASSERT</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  Reports the name of the source file and the source line number</span></span><br><span class=\"line\"><span class=\"comment\"> *         where the assert_param error has occurred.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  file: pointer to the source file name</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  line: assert_param error line source number</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval None</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">assert_failed</span><span class=\"params\">(<span class=\"type\">uint8_t</span> *file, <span class=\"type\">uint32_t</span> line)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 6 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* User can add his own implementation to report the file name and line number,</span></span><br><span class=\"line\"><span class=\"comment\">       ex: printf(&quot;Wrong parameters value: file %s on line %d\\r\\n&quot;, file, line) */</span></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END 6 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* USE_FULL_ASSERT */</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在ozone中查看参数，并实时修改<strong>发送数据</strong>的数值，发现<strong>接收数据</strong>也会实时修改，板载灯反馈正常</p>\n<p>若不能使用ozone，也可以在代码中修改发送的数值，重新烧录，查看板载灯的情况</p>\n<center><img src=https://pic.imgdb.cn/item/66424ba00ea9cb140386edb5.png width=60%/></center>\n\n<p>回环测试正常，我们可以进行下一步的了解</p>\n<h2 id=\"CAN与电调通讯\"><a href=\"#CAN与电调通讯\" class=\"headerlink\" title=\"CAN与电调通讯\"></a>CAN与电调通讯</h2><p>在囫囵吞枣地走通过一遍流程后，我们遇到很很多<strong>复杂的模式和结构体</strong>，这些需要根据实际情况来酌情配置</p>\n<p>接下来我们尝试使用C板来与C610通讯，接收信息并发送信息来控制电机</p>\n<h3 id=\"接收电机的回馈消息\"><a href=\"#接收电机的回馈消息\" class=\"headerlink\" title=\"接收电机的回馈消息\"></a>接收电机的回馈消息</h3><p>为了保持代码的可读性，我们将CAN相关代码分离开来</p>\n<p>大致结构是底层依赖<code>base-can</code>，在其基础上写一层<code>module-m2006</code>，在进程中调用这两个部分文件</p>\n<p>为了降低理解的难度，暂时不考虑使用其他设备的可能，只针对一个电调和一个电机的情况先写一份控制代码</p>\n<p>首先是base-can部分，它负责与底层的交互，直接使用HAL库提供的函数，将底层与应用层隔离</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-can.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;can.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init_can</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_can_tx_header</span><span class=\"params\">(CAN_TxHeaderTypeDef *header)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-can.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base-can.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仍然使用最简单的配置，接收所有报文</span></span><br><span class=\"line\"><span class=\"comment\">// 为了统一初始化函数的调用模式，我们将HAL_CAN_ConfigFilter函数的返回值返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> HAL_StatusTypeDef <span class=\"title\">configure_can_filter</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CAN_FilterTypeDef config;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.FilterActivation     = CAN_FILTER_ENABLE;</span><br><span class=\"line\">    config.FilterFIFOAssignment = CAN_FILTER_FIFO0;</span><br><span class=\"line\">    config.FilterMode           = CAN_FILTERMODE_IDMASK;</span><br><span class=\"line\">    config.FilterScale          = CAN_FILTERSCALE_32BIT;</span><br><span class=\"line\">    config.FilterIdHigh         = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    config.FilterIdLow          = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    config.FilterMaskIdHigh     = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    config.FilterMaskIdLow      = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    config.FilterBank           = <span class=\"number\">0</span>;</span><br><span class=\"line\">    config.SlaveStartFilterBank = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">HAL_CAN_ConfigFilter</span>(hcan, &amp;config);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 集中对CAN进行初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init_can</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">configure_can_filter</span>(hcan))</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_CAN_Start</span>(hcan))</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">HAL_CAN_ActivateNotification</span>(hcan, CAN_IT_RX_FIFO0_MSG_PENDING))</span><br><span class=\"line\">        <span class=\"built_in\">Error_Handler</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据C610手册，设置发送报文头的内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_can_tx_header</span><span class=\"params\">(CAN_TxHeaderTypeDef *header)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    header-&gt;StdId              = <span class=\"number\">0x200</span>;</span><br><span class=\"line\">    header-&gt;IDE                = CAN_ID_STD;</span><br><span class=\"line\">    header-&gt;RTR                = CAN_RTR_DATA;</span><br><span class=\"line\">    header-&gt;DLC                = <span class=\"number\">8</span>;</span><br><span class=\"line\">    header-&gt;TransmitGlobalTime = DISABLE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面代码写的十分地局限，没有考虑后期<strong>可能不断变化的需求</strong>，但对于现阶段来说，我们的首要目标是先以最简单的方式，驱动目标电机，现在接着往下写</p>\n<h3 id=\"包装与电调通讯的代码\"><a href=\"#包装与电调通讯的代码\" class=\"headerlink\" title=\"包装与电调通讯的代码\"></a>包装与电调通讯的代码</h3><p>为了方便我们 <code>get</code> 和 <code>control</code> 电机的状态，可以把对外暴露的api，即电机返回的状态值，用结构体包装，而对于控制电机需要使用到的 <code>句柄</code> ，或者说一些必要的 <code>上下文信息</code> ,我们也使用结构体将其包装起来，最后将两个结构体包装为电机完整的结构体，这样可以极大地方便函数的调用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module-m2006.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base-can.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">MotorStatus</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int16_t</span> angle;</span><br><span class=\"line\">    <span class=\"type\">int16_t</span> speed;</span><br><span class=\"line\">    <span class=\"type\">int16_t</span> torque;</span><br><span class=\"line\">&#125; MotorStatus;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">MotorHandle</span> &#123;</span><br><span class=\"line\">    CAN_HandleTypeDef *hcan;</span><br><span class=\"line\">    CAN_RxHeaderTypeDef header_rx;</span><br><span class=\"line\">    CAN_TxHeaderTypeDef header_tx;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> mail;</span><br><span class=\"line\">&#125; MotorHandle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Motor</span> &#123;</span><br><span class=\"line\">    MotorHandle handle;</span><br><span class=\"line\">    MotorStatus status;</span><br><span class=\"line\">&#125; Motor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init_motor</span><span class=\"params\">(Motor *motor)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_motor_status</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">uint8_t</span> data[<span class=\"number\">8</span>], Motor *motor)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_motor_current</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int16_t</span> current, Motor *motor)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module-m2006.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;module-m2006.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化关于电机的所有信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init_motor</span><span class=\"params\">(Motor *motor)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    motor-&gt;handle.hcan = &amp;hcan1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">init_can</span>(motor-&gt;handle.hcan);</span><br><span class=\"line\">    <span class=\"built_in\">set_can_tx_header</span>(&amp;motor-&gt;handle.header_tx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于从回报文中提取状态信息</span></span><br><span class=\"line\"><span class=\"comment\">// 按照C610用户手册上给出的高低位数据变换即可</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_motor_status</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">uint8_t</span> data[<span class=\"number\">8</span>], Motor *motor)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    motor-&gt;status.angle  = (data[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">8</span>) | data[<span class=\"number\">1</span>];</span><br><span class=\"line\">    motor-&gt;status.speed  = (data[<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">8</span>) | data[<span class=\"number\">3</span>];</span><br><span class=\"line\">    motor-&gt;status.torque = (data[<span class=\"number\">4</span>] &lt;&lt; <span class=\"number\">8</span>) | data[<span class=\"number\">5</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于设置电机输出电流值</span></span><br><span class=\"line\"><span class=\"comment\">// 由于目前只使用一个电机，为了方便，直接设置电机电调的ID为1</span></span><br><span class=\"line\"><span class=\"comment\">// 那么第一位和第二位uint8_t数据就是第一个电机的电流值高低位</span></span><br><span class=\"line\"><span class=\"comment\">// 依照文档，电流值的范围为 -10000 到 10000</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_motor_current</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int16_t</span> current, Motor *motor)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> data[<span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    data[<span class=\"number\">0</span>] = current &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    data[<span class=\"number\">1</span>] = current | <span class=\"number\">0xff00</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">HAL_CAN_AddTxMessage</span>(</span><br><span class=\"line\">        motor-&gt;handle.hcan, &amp;motor-&gt;handle.header_tx,</span><br><span class=\"line\">        data, &amp;motor-&gt;handle.mail);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在做完前面的工作后，我们只需要调用最上层的<code>module-motor</code>提供的初始化函数，就可以对整个系统初始化，然后使用<code>get_motor_status</code>获取电机状态，使用<code>set_motor_current</code>控制电机电流值</p>\n<h3 id=\"主要逻辑和CAN接收回调函数\"><a href=\"#主要逻辑和CAN接收回调函数\" class=\"headerlink\" title=\"主要逻辑和CAN接收回调函数\"></a>主要逻辑和CAN接收回调函数</h3><p>最后，为了与HAL库生成的文件分离地更彻底一点，我们在CubeMX生成的main.c中，加入我们自定义的进程入口</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前面代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN PFP */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> <span class=\"title\">entrypoint</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END PFP */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中间代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 2 */</span></span><br><span class=\"line\"><span class=\"built_in\">entrypoint</span>();</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Infinite loop */</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN WHILE */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE END WHILE */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* USER CODE BEGIN 3 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 3 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后面代码省略</span></span><br></pre></td></tr></table></figure>\n\n<p>使用extern声明一个外部函数，接着在CubeMX提供的主循环前插入该函数，我们便可以创建一个entrypoint.c函数来实现<code>void entrypoint()</code></p>\n<p>同时我们也可以把回调函数写在这里，保证变量作用域的统一，这样以后对代码增删改查都可以避免直接接触CubeMX直接生成的代码，贯彻了代码<strong>高内聚低耦合</strong>的原则（doge）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entrypoint.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;main.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tim.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;module-m2006.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// entrypoint function from main.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">entrypoint</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> Motor motor;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int16_t</span> current;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @brief the main loop function</span></span><br><span class=\"line\"><span class=\"comment\">// @note control the current of motor every 1 ms</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">entrypoint</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init_motor</span>(&amp;motor);</span><br><span class=\"line\">    current = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">HAL_Delay</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">set_motor_current</span>(current, &amp;motor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @brief callback when receiving message from motor</span></span><br><span class=\"line\"><span class=\"comment\">// @note convert the uint8_t data to motor status</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HAL_CAN_RxFifo0MsgPendingCallback</span><span class=\"params\">(CAN_HandleTypeDef *hcan)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hcan == &amp;hcan1) &#123;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> data[<span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">HAL_CAN_GetRxMessage</span>(</span><br><span class=\"line\">            &amp;hcan1, CAN_RX_FIFO0,</span><br><span class=\"line\">            &amp;motor.handle.header_rx, data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">get_motor_status</span>(data, &amp;motor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是代码结构，<code>activity</code>中是主要的进程，里面包含了程序自定义入口，也可以在使用实时系统的情况下将任务写在该文件夹下，<code>dependency</code>是包装后的库函数，供<code>activity</code>调用，<code>base</code>是与底层直接接触的库，一般会用到大量的HAL库，负责实现一些通讯协议，而<code>module</code>是更高级一层的，一般抽象成为某个外设的驱动库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注意HAL库生成的代码并没有被写出</span><br><span class=\"line\">// 请将这些文件结构包含进项目目录中，以保证entrypoint函数能够被顺利链接</span><br><span class=\"line\">-activity</span><br><span class=\"line\">  entrypoint.c</span><br><span class=\"line\">-dependency</span><br><span class=\"line\">  -base</span><br><span class=\"line\">    base-can.c</span><br><span class=\"line\">    base-can.h</span><br><span class=\"line\">  -module</span><br><span class=\"line\">    module-m2006.c</span><br><span class=\"line\">    module-m2006.h</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"连接设备与测试\"><a href=\"#连接设备与测试\" class=\"headerlink\" title=\"连接设备与测试\"></a>连接设备与测试</h3><p>临时画一个M2006的电机架测试用，放上一张整体的连线图</p>\n<center><img src=https://pic.imgdb.cn/item/66424bab0ea9cb140386f880.png width=80%/></center>\n\n<center><img src=https://pic.imgdb.cn/item/66424bad0ea9cb140386fb42.jpg width=80%/></center>\n\n<p>修改<code>entrypoint.c</code>中<code>current</code>的值，主循环中就会以1000Hz的频率调整电机的电流值，同时可以查看电调发回来的三个状态信息，使用Ozone可以查看<code>motor</code>和<code>current</code>两个变量的情况</p>\n<center><img src=https://pic.imgdb.cn/item/66424ba20ea9cb140386ef82.png width=80%/></center>\n\n<p>使用绘图工具将<code>angle</code>的返回值绘制出来，旋转电机，可以发现角度值会随着旋转流畅地改变</p>\n<center><img src=https://pic.imgdb.cn/item/66424ba40ea9cb140386f20f.png width=80%/></center>\n\n<p>调整<code>current</code>的值，就可以控制电机的正反转动，由于没有写<strong>控制算法</strong>，运动总是<strong>迟滞</strong>于电流值的改变的</p>\n<p>倘若无法使用ozone，可以使用<strong>串口</strong>传递将需要查看的变量和需要修改的变量，或者修改<code>current</code>后查看电机转动状态亦可，各个参数的范围请参照官方提供的开发文档</p>\n<h2 id=\"CAN的各种配置与模式\"><a href=\"#CAN的各种配置与模式\" class=\"headerlink\" title=\"CAN的各种配置与模式\"></a>CAN的各种配置与模式</h2><h3 id=\"HAL库关于CAN的说明\"><a href=\"#HAL库关于CAN的说明\" class=\"headerlink\" title=\"HAL库关于CAN的说明\"></a>HAL库关于CAN的说明</h3><p>想要深入了解Hal库提供的接口，最好的办法是直接查看<strong>源码上的注释</strong></p>\n<p>这是 <code>stm32f4xx_hal_can.c</code> 中的注释，我翻译了一下</p>\n<hr>\n<h4 id=\"如何使用该驱动\"><a href=\"#如何使用该驱动\" class=\"headerlink\" title=\"如何使用该驱动\"></a>如何使用该驱动</h4><ul>\n<li>通过执行 <code>HAL_CAN_MspInit()</code> 初始化 <code>CAN</code> 的底层资源<ul>\n<li>使用 <code>__HAL_RCC_CANx_CLK_ENABLE()</code> 启用 <code>CAN</code> 接口时钟</li>\n<li>配置 <code>CAN</code> 引脚<ul>\n<li>启用 <code>CAN GPIOs</code> 时钟</li>\n<li>将 <code>CAN</code> 引脚配置为可选的开漏型</li>\n</ul>\n</li>\n<li>如果使用中断（例如 <code>HAL_CAN_ActivateNotification()</code>）<ul>\n<li>使用 <code>HAL_NVIC_SetPriority()</code> 配置 <code>CAN</code> 中断优先级</li>\n<li>使用 <code>HAL_NVIC_EnableIRQ()</code> 启用 <code>CAN IRQ handler</code></li>\n<li>在 <code>CAN IRQ handler</code> 中，调用 <code>HAL_CAN_IRQHandler()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用 <code>HAL_CAN_Init()</code> 函数初始化 <code>CAN</code> 外设 该函数委托 <code>HAL_CAN_MspInit()</code> 进行初步的初始化</li>\n<li>使用以下函数配置接收过滤器<ul>\n<li><code>HAL_CAN_ConfigFilter()</code></li>\n</ul>\n</li>\n<li>使用 <code>HAL_CAN_Start()</code> 函数启动 CAN 模块 此后该节点在总线上便处于活动状态：接收报文，并能发送报文 </li>\n<li>为管理报文传输，可使用以下 Tx 控制函数<ul>\n<li><code>HAL_CAN_AddTxMessage()</code> 用于请求传输新的报文信息 </li>\n<li><code>HAL_CAN_AbortTxRequest()</code> 用于中止待处理报文的传输 </li>\n<li><code>HAL_CAN_GetTxMailboxesFreeLevel()</code> 用来获取空闲的 Tx 邮箱的数量 </li>\n<li><code>HAL_CAN_IsTxMessagePending()</code> 用于检查 Tx 邮箱中是否有待处理的信息 </li>\n<li><code>HAL_CAN_GetTxTimestamp()</code> 当 <code>Time triggered communication mode</code> 开启时，用来获取发送的 Tx 消息的时间戳</li>\n</ul>\n</li>\n<li>当 <code>CAN Rx FIFO</code> 收到报文时，可以使用 <code>HAL_CAN_GetRxMessage()</code> 获取，<code>HAL_CAN_GetRxFifoFillLevel()</code> 可以获取 <code>Rx FIFO</code> 中存储的报文数量</li>\n<li>调用 <code>HAL_CAN_Stop()</code> 函数可停止 CAN 模块 </li>\n<li>通过 <code>HAL_CAN_DeInit()</code> 函数实现去初始化</li>\n</ul>\n<h4 id=\"轮询模式操作\"><a href=\"#轮询模式操作\" class=\"headerlink\" title=\"轮询模式操作\"></a>轮询模式操作</h4><ul>\n<li>接收<ul>\n<li>使用 <code>HAL_CAN_GetRxFifoFillLevel()</code> 监控信息接收情况，至少收到一条信息后停止监控</li>\n<li>然后使用 <code>HAL_CAN_GetRxMessage()</code> 获取信息</li>\n</ul>\n</li>\n<li>传输<ul>\n<li>使用 <code>HAL_CAN_GetTxMailboxesFreeLevel()</code> 监控发送信箱的是否空闲，至少有一个发送信箱空闲后停止</li>\n<li>然后使用 <code>HAL_CAN_AddTxMessage()</code> 请求发送</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"中断模式操作\"><a href=\"#中断模式操作\" class=\"headerlink\" title=\"中断模式操作\"></a>中断模式操作</h4><ul>\n<li><p>使用 <code>HAL_CAN_ActivateNotification()</code> 激活通知，然后可以使用<code>HAL_CAN_xxxCallback()</code>来控制接收消息通知，该回调也是使用 <code>HAL_CAN_GetRxMessage()</code> 和 <code>HAL_CAN_AddTxMessage()</code>来实现的</p>\n</li>\n<li><p>可以使用 <code>HAL_CAN_DeactivateNotification()</code> 函数停用通知 </p>\n</li>\n<li><p>应特别注意 <code>CAN_IT_RX_FIFO0_MSG_PENDING</code> 和 <code>CAN_IT_RX_FIFO1_MSG_PENDING</code> ，这些通知会触发回调<code>HAL_CAN_RxFIFO0MsgPendingCallback()</code> 和 <code>HAL_CAN_RxFIFO1MsgPendingCallback()</code> 用户有两种可选项</p>\n<ul>\n<li>使用 <code>HAL_CAN_GetRxMessage()</code>在回调中直接获取 Rx 消息</li>\n<li>或者在回调中停用通知，而不获取 Rx 消息，使用 <code>HAL_CAN_GetRxMessage()</code> 获取 Rx 消息后再次激活通知</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>上面这一部分注释详细介绍了Hal库CAN通信的使用流程，而在<strong>接收过滤器</strong>初始化之前的步骤，均由CubeMX工具替我们完成，我们只需调用Hal提供的api来完成剩下的步骤</p>\n<p>同时，针对各个CAN通讯的时期，Hal库都提供了完备的回调函数，只要使用 <code>HAL_CAN_RegisterCallback()</code> 来注册对应的中断，然后覆写下面的回调函数即可，这些回调函数都会以 <code>__weak</code> 的类型声明，前面会加上 <code>HAL_CAN_</code>，他们都可以在<code>stm32f4xx_hal_can.c</code>中找到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to <span class=\"number\">1</span></span><br><span class=\"line\">allows the user to configure dynamically the driver callbacks.</span><br><span class=\"line\"><span class=\"function\">Use Function <span class=\"title\">HAL_CAN_RegisterCallback</span><span class=\"params\">()</span> to <span class=\"keyword\">register</span> an interrupt callback.</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Function <span class=\"title\">HAL_CAN_RegisterCallback</span><span class=\"params\">()</span> allows to <span class=\"keyword\">register</span> following callbacks:</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox0CompleteCallback   : Tx Mailbox <span class=\"number\">0</span> Complete Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox1CompleteCallback   : Tx Mailbox <span class=\"number\">1</span> Complete Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox2CompleteCallback   : Tx Mailbox <span class=\"number\">2</span> Complete Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox0AbortCallback      : Tx Mailbox <span class=\"number\">0</span> Abort Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox1AbortCallback      : Tx Mailbox <span class=\"number\">1</span> Abort Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) TxMailbox2AbortCallback      : Tx Mailbox <span class=\"number\">2</span> Abort Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) RxFifo0MsgPendingCallback    : Rx Fifo <span class=\"number\">0</span> Message Pending Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) RxFifo0FullCallback          : Rx Fifo <span class=\"number\">0</span> Full Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) RxFifo1MsgPendingCallback    : Rx Fifo <span class=\"number\">1</span> Message Pending Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) RxFifo1FullCallback          : Rx Fifo <span class=\"number\">1</span> Full Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) SleepCallback                : Sleep Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) ErrorCallback                : Error Callback.</span></span><br><span class=\"line\"><span class=\"function\">  (+) MspInitCallback              : CAN MspInit.</span></span><br><span class=\"line\"><span class=\"function\">  (+) MspDeInitCallback            : CAN MspDeInit.</span></span><br><span class=\"line\"><span class=\"function\">This function takes as parameters the HAL peripheral handle, the Callback ID</span></span><br><span class=\"line\"><span class=\"function\">and a pointer to the user callback function.</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<code>HAL_CAN_ActivateNotification()</code> 本质是开启硬件中断，而 <code>HAL_CAN_RegisterCallback()</code> 本质是软件层面的回调，这在源代码中可以很清楚地看出</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)</span></span><br><span class=\"line\"></span><br><span class=\"line\">__HAL_CAN_ENABLE_IT(hcan, ActiveITs);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in HAL_CAN_RegisterCallback(</span></span><br><span class=\"line\"><span class=\"comment\">//      CAN_HandleTypeDef *hcan, </span></span><br><span class=\"line\"><span class=\"comment\">//      HAL_CAN_CallbackIDTypeDef CallbackID, </span></span><br><span class=\"line\"><span class=\"comment\">//      void (* pCallback)(CAN_HandleTypeDef *_hcan)</span></span><br><span class=\"line\"><span class=\"comment\">//      )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :</span><br><span class=\"line\">        hcan-&gt;TxMailbox0CompleteCallback = pCallback;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面我忽略了对于休眠模式的内容，感兴趣的可以去浏览器搜索相关api的使用</p>\n<h3 id=\"CubeMX-配置与过滤器\"><a href=\"#CubeMX-配置与过滤器\" class=\"headerlink\" title=\"CubeMX 配置与过滤器\"></a>CubeMX 配置与过滤器</h3><p>囿于篇幅，这两个方面就不写在这篇文章，只是简单总结一下</p>\n<p>配置要点是波特率的设置，正常的收发模式可以满足大部分的场景，上面配置波特率我只是一笔带过，这里在重新讲一下</p>\n<p>波特率的计算参数主要有三个</p>\n<ol>\n<li><code>Prescalar</code></li>\n<li><code>Time Quanta in Bit Segment 1</code></li>\n<li><code>Time Quanta in Bit Segment 2</code></li>\n</ol>\n<p>记住几个常用的组合足以应对大部分需求，注意CubeMX会<strong>判断</strong>各个传播相位是否过小，倘若遇到无法设置的问题时，可以试试将另一个参数先调大，将之前的参数调到目标值后再调回另一个参数</p>\n<p>而关于过滤器，要想参透原理又是需要不短的篇幅，倘若CAN设备数量不多，先用着全开放的过滤器吧，在回调函数<strong>判断回报文头结构体的ID</strong>就可以实现分别处理，<code>C610</code>设置ID的方法在文档中有很详细的介绍</p>\n<h2 id=\"文末\"><a href=\"#文末\" class=\"headerlink\" title=\"文末\"></a>文末</h2><p>这篇文章写了好几天，<code>电路</code>和<code>马原</code>成绩还没有出来，<code>工程数学</code>挂了，<code>大学物理</code>及格，一众<code>水课</code>平安度过，希望能过个好年吧</p>\n<br>\n<br>\n<br>\n<p align=\"right\">2023年1月24日凌晨2点半结文</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"clx6hajm10001i960b1qv0ubu","category_id":"clx6hajm60003i9604vcphxno","_id":"clx6hajmc000bi96040yj5tvd"},{"post_id":"clx6hajma0007i960c9ehfz69","category_id":"clx6hajm60003i9604vcphxno","_id":"clx6hajme000ei960hj9tcgux"},{"post_id":"clx6hajm40002i960af1t3ku3","category_id":"clx6hajma0008i960ggmyb0z7","_id":"clx6hajme000gi960epx65nnj"},{"post_id":"clx6hajm80005i9607hb5hpne","category_id":"clx6hajma0008i960ggmyb0z7","_id":"clx6hajmf000ji9602fqx8ch5"},{"post_id":"clx6hajm90006i960g7q2e8oo","category_id":"clx6hajme000fi960aahzfyq8","_id":"clx6hajmf000ni960973525z7"},{"post_id":"clx6hajmk0016i960es6wa68l","category_id":"clx6hajmm0017i960c6jdguam","_id":"clx6hajmn001ai960e9e3cgri"}],"PostTag":[{"post_id":"clx6hajma0007i960c9ehfz69","tag_id":"clx6hajm70004i960dmsi2fwi","_id":"clx6hajmc000ai960gjvl2n44"},{"post_id":"clx6hajm10001i960b1qv0ubu","tag_id":"clx6hajm70004i960dmsi2fwi","_id":"clx6hajmf000ii960ed5hfxk4"},{"post_id":"clx6hajm10001i960b1qv0ubu","tag_id":"clx6hajmb0009i9606pnsexqy","_id":"clx6hajmf000ki9600zu7hwbh"},{"post_id":"clx6hajm10001i960b1qv0ubu","tag_id":"clx6hajmc000di960cvk99511","_id":"clx6hajmf000mi960bz0aha2f"},{"post_id":"clx6hajm40002i960af1t3ku3","tag_id":"clx6hajme000hi9602u578zcy","_id":"clx6hajmg000qi960c9smg30n"},{"post_id":"clx6hajm40002i960af1t3ku3","tag_id":"clx6hajmf000li960ht6h21hh","_id":"clx6hajmg000ri9602dl93y28"},{"post_id":"clx6hajm40002i960af1t3ku3","tag_id":"clx6hajmf000oi9608gob3sqc","_id":"clx6hajmh000ti9606izgcsko"},{"post_id":"clx6hajm80005i9607hb5hpne","tag_id":"clx6hajm70004i960dmsi2fwi","_id":"clx6hajmh000vi960ea2xgv86"},{"post_id":"clx6hajm80005i9607hb5hpne","tag_id":"clx6hajme000hi9602u578zcy","_id":"clx6hajmh000wi960cx6lh5d3"},{"post_id":"clx6hajm90006i960g7q2e8oo","tag_id":"clx6hajm70004i960dmsi2fwi","_id":"clx6hajmi0010i9602g000cw7"},{"post_id":"clx6hajm90006i960g7q2e8oo","tag_id":"clx6hajmb0009i9606pnsexqy","_id":"clx6hajmi0011i9609boz5gg3"},{"post_id":"clx6hajm90006i960g7q2e8oo","tag_id":"clx6hajmh000xi960dbyahhjv","_id":"clx6hajmj0012i960fjls4vr0"},{"post_id":"clx6hajm90006i960g7q2e8oo","tag_id":"clx6hajmi000yi9607t6o3zcv","_id":"clx6hajmj0013i9601o1z5rsj"},{"post_id":"clx6hajm90006i960g7q2e8oo","tag_id":"clx6hajmi000zi960hov4416m","_id":"clx6hajmj0014i96033lue8hu"},{"post_id":"clx6hajmk0016i960es6wa68l","tag_id":"clx6hajmm0018i9606mxkhro0","_id":"clx6hajmn001bi9605a8r8o5e"},{"post_id":"clx6hajmk0016i960es6wa68l","tag_id":"clx6hajmm0019i960f53renls","_id":"clx6hajmn001ci960dgth4www"},{"post_id":"clx6hajmk0016i960es6wa68l","tag_id":"clx6hajmf000oi9608gob3sqc","_id":"clx6hajmn001di9609hki8f5m"}],"Tag":[{"name":"ubuntu","_id":"clx6hajm70004i960dmsi2fwi"},{"name":"server","_id":"clx6hajmb0009i9606pnsexqy"},{"name":"netplan","_id":"clx6hajmc000di960cvk99511"},{"name":"ros2","_id":"clx6hajme000hi9602u578zcy"},{"name":"foxglove","_id":"clx6hajmf000li960ht6h21hh"},{"name":"c/cpp","_id":"clx6hajmf000oi9608gob3sqc"},{"name":"nginx","_id":"clx6hajmh000xi960dbyahhjv"},{"name":"frp","_id":"clx6hajmi000yi9607t6o3zcv"},{"name":"web","_id":"clx6hajmi000zi960hov4416m"},{"name":"embedded","_id":"clx6hajmm0018i9606mxkhro0"},{"name":"can","_id":"clx6hajmm0019i960f53renls"}]}}